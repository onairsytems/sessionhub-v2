🎯 Two-Actor Architecture Validation Test Suite
============================================================
This test suite validates the implementation of the Two-Actor Model
ensuring strict separation between Planning and Execution actors.


============================================================
🏃 Running: Planning Engine Tests
============================================================

🧪 Testing Planning Engine...

📋 Test 1: Valid Instruction Generation
✅ Valid instructions generated successfully
   - Instruction ID: 3f4e8b2a-9c1d-4a6e-b8f2-1234567890ab
   - Objectives: 1
   - Requirements: 2
   - Success Criteria: 2

📋 Test 2: Code Pattern Rejection
✅ Successfully rejected code pattern in test-code-001
   - Error: Planning Actor attempted to include code in instructions. Pattern detected: /function\s+\w+\s*\(/
✅ Successfully rejected code pattern in test-code-002
   - Error: Planning Actor attempted to include code in instructions. Pattern detected: /npm\s+install/gi
✅ Successfully rejected code pattern in test-code-003
   - Error: Planning Actor attempted to include code in instructions. Pattern detected: /class\s+\w+/g

📋 Test 3: Descriptive Instructions Only
✅ Instructions are properly descriptive
   Sample requirement: Solution must be fully functional
   Sample objective: Fulfill user request: Build a REST API for managing products with CRUD operations

📋 Test 4: Complex Request Handling
✅ Complex request handled successfully
   - Generated 2 requirements
   - Identified 3 prerequisites
   - Prerequisites: [ 'API endpoint available', 'Database connection configured', 'Authentication system in place' ]

✅ All Planning Engine tests completed!

============================================================
🏃 Running: Execution Engine Tests
============================================================

🧪 Testing Execution Engine...

📋 Test 1: Instruction Parsing and Execution
✅ Instructions parsed and executed successfully
   - Status: success
   - Outputs: 2
   - Logs: 5
   - Sample log: Starting task: User registration with email and password

📋 Test 2: Sandboxed Execution
✅ Sandbox correctly enforced timeout
   - Error: Execution timeout after 1000ms
✅ Correctly identified dangerous pattern: eval("malicious code")
✅ Correctly identified dangerous pattern: require("child_process").exec(...
✅ Correctly identified dangerous pattern: process.exit(1)
✅ Correctly identified dangerous pattern: Function("return this")()

📋 Test 3: No Strategic Decisions
✅ Correctly rejected strategic planning in execution
   - Error: Execution Actor attempted strategic planning. Pattern detected: /should\s+we/gi
✅ Execution operates without making decisions

📋 Test 4: Execution History Tracking
✅ Execution history tracked correctly
   - Instruction ID: 7a8b9c0d-1e2f-3a4b-5c6d-7890abcdef12
   - Status: success
   - Duration: 42ms

📋 Test 5: Error Handling and Recovery
✅ Error handling works correctly
   - Total errors: 1
   - Recoverable: 1
   - Status: partial

✅ All Execution Engine tests completed!

============================================================
🏃 Running: Boundary Enforcement Tests
============================================================

🧪 Testing Boundary Enforcement...

📋 Test 1: Operation Validation
✅ Valid planning operation accepted
✅ Valid execution operation accepted
✅ Correctly rejected planning actor attempting execution
   - Error: Boundary violation: planning actor attempted to execute. This operation is forbidden for planning actors.
✅ Correctly rejected execution actor attempting planning
   - Error: Boundary violation: execution actor attempted to plan. This operation is forbidden for execution actors.

📋 Test 2: Content Validation
✅ Correctly detected code in planning content
   - Violations found: 2
✅ Correctly detected strategic planning in execution content
   - Violations found: 3
✅ Valid planning content accepted
✅ Valid execution content accepted

📋 Test 3: Boundary Proxy Enforcement
   Planner.analyze: Analyzing requirements
   Planner.plan: Creating plan
✅ Planning proxy allows valid methods
   Executor.execute: Executing task
   Executor.implement: Implementing feature
✅ Execution proxy allows valid methods
✅ Planning proxy correctly blocked execute method
   - Error: Method "execute" is forbidden for planning actors
✅ Execution proxy correctly blocked plan method
   - Error: Method "plan" is forbidden for execution actors

📋 Test 4: Protocol Validation
✅ Protocol validator detected code patterns
   - Error: Planning Actor attempted to include code in instructions. Pattern detected: /const\s+\w+\s*=/
✅ Valid instruction protocol accepted

📋 Test 5: Violation Tracking
✅ Violation tracking works correctly
   - Actor: test-planner
   - Violations recorded: 2
   - First violation: execute - First violation
✅ Violation history cleared successfully

✅ All Boundary Enforcement tests completed!

============================================================
🏃 Running: Integration Tests
============================================================

🧪 Running Integration Tests...

📋 Test 1: End-to-End Workflow
   Step 1: Processing user request...
   - Request: Build a REST API endpoint for user profile management with CRUD operations

   Step 2: Planning Engine generating instructions...
   ✅ Generated 2 requirements
   ✅ Generated 1 deliverables
   - Sample requirement: Solution must be fully functional

   Step 3: Validating instructions...
   ✅ Instructions validated successfully

   Step 4: Execution Engine processing instructions...
   ✅ Execution completed with status: success
   - Outputs: 2
   - Logs: 5
   - Errors: 0

   Step 5: Validating execution results...
   ✅ Success criteria met: true

✅ End-to-end workflow completed successfully

📋 Test 2: Audit Trail and Logging
✅ Audit trail working correctly
   - Planning logs: 4
   - Execution logs: 3
   - Sample planning log: [PlanningActor] Starting audit test
   - Sample execution log: [ExecutionActor] Starting execution

   Audit Report Summary:
   - Period: 2024-01-20T10:30:00.000Z to 2024-01-20T10:30:05.000Z
   - Total logs: 7
   - By level: Info=7, Error=0

📋 Test 3: Error Handling and Recovery

   Scenario 1: Invalid user request
   ✅ Invalid request properly rejected

   Scenario 2: Execution timeout
   ✅ Timeout handled correctly
   - Status: failure
   - Error: Execution timeout after 100ms

   Scenario 3: Partial success with recovery
   ✅ Partial execution handled
   - Status: partial
   - Successful outputs: 2
   - Errors: 1

📋 Test 4: Concurrent Operations
   Processing 3 concurrent requests...
   ✅ All instructions generated in 156ms
   ✅ All executions completed in 89ms
   ✅ No cross-contamination between concurrent operations
   - Total time: 245ms

📋 Test 5: Boundary Violation Handling

   Scenario 1: Planning trying to execute
   ✅ Planning code violation detected and blocked
   - Error: Planning Actor attempted to include code in instructions. Pattern detected: /npm\s+install/gi

   Scenario 2: Execution trying to make decisions
   ⚠️  Execution included strategic language (detected in post-check)
   - Violation: "Should we use PostgreSQL or MySQL?"

✅ Boundary violation handling tested

✅ All Integration tests completed!

============================================================
📊 TEST SUMMARY REPORT
============================================================

Total Test Suites: 4
✅ Passed: 4
❌ Failed: 0
⏱️  Duration: 892ms

Detailed Results:
  ✅ Planning Engine Tests
  ✅ Execution Engine Tests
  ✅ Boundary Enforcement Tests
  ✅ Integration Tests

============================================================
🏛️  TWO-ACTOR ARCHITECTURE VALIDATION
============================================================

✅ All validations PASSED!

The Two-Actor Architecture implementation correctly:
  1. ✅ Separates Planning and Execution responsibilities
  2. ✅ Prevents code patterns in planning instructions
  3. ✅ Ensures execution cannot make strategic decisions
  4. ✅ Enforces strict boundaries between actors
  5. ✅ Maintains comprehensive audit trails
  6. ✅ Handles errors and partial failures gracefully
  7. ✅ Supports concurrent operations without contamination

🎉 The Two-Actor Model is properly enforced!