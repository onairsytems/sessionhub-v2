[{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/app/admin.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/app/architecture.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/app/docs.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":240,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9797,9800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9797,9800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Code, Rocket, Search, Terminal, Zap, HelpCircle, ExternalLink } from 'lucide-react';\ninterface DocSection {\n  id: string;\n  title: string;\n  icon: React.ElementType;\n  content: React.ReactNode;\n}\nexport default function DocsPage() {\n  const [selectedSection, setSelectedSection] = useState('getting-started');\n  const [searchQuery, setSearchQuery] = useState('');\n  const docSections: DocSection[] = [\n    {\n      id: 'getting-started',\n      title: 'Getting Started',\n      icon: Rocket,\n      content: (\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Welcome to SessionHub</h3>\n          <p className=\"text-muted-foreground\">\n            SessionHub is your intelligent development session manager powered by Claude AI.\n            Get started with these simple steps:\n          </p>\n          <ol className=\"list-decimal list-inside space-y-2 ml-4\">\n            <li>Configure your API keys in Settings</li>\n            <li>Create your first project or import existing ones</li>\n            <li>Start a new session with clear objectives</li>\n            <li>Let Claude help plan and execute your tasks</li>\n            <li>Review and commit your changes</li>\n          </ol>\n          <div className=\"mt-6 p-4 bg-secondary rounded-lg\">\n            <p className=\"text-sm\">\n              <strong>Pro tip:</strong> Use keyboard shortcuts (⌘K) to quickly navigate between features.\n            </p>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 'sessions',\n      title: 'Working with Sessions',\n      icon: Terminal,\n      content: (\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Session Workflow</h3>\n          <p className=\"text-muted-foreground\">\n            Sessions are the core of SessionHub. Each session represents a focused work period with clear objectives.\n          </p>\n          <div className=\"space-y-4\">\n            <div>\n              <h4 className=\"font-medium mb-2\">Planning Phase</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Define your objectives and let Claude analyze your codebase to create an execution plan.\n              </p>\n            </div>\n            <div>\n              <h4 className=\"font-medium mb-2\">Execution Phase</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Claude implements the plan while you monitor progress and provide guidance.\n              </p>\n            </div>\n            <div>\n              <h4 className=\"font-medium mb-2\">Review Phase</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Review changes, run tests, and commit your work with confidence.\n              </p>\n            </div>\n          </div>\n          <Card className=\"mt-4\">\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Session Templates</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground\">\n                Save time with pre-configured session templates for common tasks like bug fixes,\n                feature development, refactoring, and documentation updates.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      )\n    },\n    {\n      id: 'mcp-integration',\n      title: 'MCP Integration',\n      icon: Zap,\n      content: (\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Model Context Protocol</h3>\n          <p className=\"text-muted-foreground\">\n            Extend Claude's capabilities with MCP servers for specialized tools and integrations.\n          </p>\n          <div className=\"grid gap-4 mt-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-sm\">Available MCP Servers</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2 text-sm\">\n                  <li>• <strong>File System</strong>: Advanced file operations</li>\n                  <li>• <strong>Git</strong>: Version control integration</li>\n                  <li>• <strong>Database</strong>: Query and manage databases</li>\n                  <li>• <strong>API Testing</strong>: HTTP request tools</li>\n                  <li>• <strong>Custom Tools</strong>: Build your own MCP servers</li>\n                </ul>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-sm\">Creating Custom MCP Servers</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground mb-2\">\n                  Build custom tools that integrate seamlessly with Claude:\n                </p>\n                <pre className=\"text-xs bg-muted p-2 rounded\">\n{`// Example MCP server\nexport const server = {\n  name: 'my-tool',\n  methods: {\n    doSomething: async (params) => {\n      // Your custom logic\n    }\n  }\n}`}\n                </pre>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 'keyboard-shortcuts',\n      title: 'Keyboard Shortcuts',\n      icon: Code,\n      content: (\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Keyboard Shortcuts</h3>\n          <p className=\"text-muted-foreground\">\n            Master these shortcuts to navigate SessionHub like a pro:\n          </p>\n          <div className=\"grid gap-2 mt-4\">\n            <div className=\"flex justify-between p-2 rounded bg-secondary\">\n              <span className=\"text-sm\">Quick command palette</span>\n              <kbd className=\"text-xs px-2 py-1 rounded bg-background\">⌘K</kbd>\n            </div>\n            <div className=\"flex justify-between p-2 rounded bg-secondary\">\n              <span className=\"text-sm\">New session</span>\n              <kbd className=\"text-xs px-2 py-1 rounded bg-background\">⌘N</kbd>\n            </div>\n            <div className=\"flex justify-between p-2 rounded bg-secondary\">\n              <span className=\"text-sm\">Switch project</span>\n              <kbd className=\"text-xs px-2 py-1 rounded bg-background\">⌘P</kbd>\n            </div>\n            <div className=\"flex justify-between p-2 rounded bg-secondary\">\n              <span className=\"text-sm\">Toggle theme</span>\n              <kbd className=\"text-xs px-2 py-1 rounded bg-background\">⌘⇧T</kbd>\n            </div>\n            <div className=\"flex justify-between p-2 rounded bg-secondary\">\n              <span className=\"text-sm\">Search documentation</span>\n              <kbd className=\"text-xs px-2 py-1 rounded bg-background\">⌘/</kbd>\n            </div>\n            <div className=\"flex justify-between p-2 rounded bg-secondary\">\n              <span className=\"text-sm\">Settings</span>\n              <kbd className=\"text-xs px-2 py-1 rounded bg-background\">⌘,</kbd>\n            </div>\n          </div>\n          <p className=\"text-sm text-muted-foreground mt-4\">\n            Customize shortcuts in Settings → Keyboard Shortcuts\n          </p>\n        </div>\n      )\n    },\n    {\n      id: 'troubleshooting',\n      title: 'Troubleshooting',\n      icon: HelpCircle,\n      content: (\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Common Issues</h3>\n          <div className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-sm\">Claude API Connection Issues</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground mb-2\">\n                  If Claude isn't responding:\n                </p>\n                <ul className=\"list-disc list-inside text-sm space-y-1 ml-2\">\n                  <li>Check your API key in Settings</li>\n                  <li>Verify your internet connection</li>\n                  <li>Check the Claude API status page</li>\n                  <li>Try regenerating your API key</li>\n                </ul>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-sm\">Session Not Progressing</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground mb-2\">\n                  If a session seems stuck:\n                </p>\n                <ul className=\"list-disc list-inside text-sm space-y-1 ml-2\">\n                  <li>Check the activity log for errors</li>\n                  <li>Ensure file permissions are correct</li>\n                  <li>Try pausing and resuming the session</li>\n                  <li>Review the execution plan for issues</li>\n                </ul>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-sm\">Performance Issues</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-muted-foreground mb-2\">\n                  For optimal performance:\n                </p>\n                <ul className=\"list-disc list-inside text-sm space-y-1 ml-2\">\n                  <li>Close unnecessary applications</li>\n                  <li>Limit concurrent sessions</li>\n                  <li>Clear the cache in Settings</li>\n                  <li>Update to the latest version</li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      )\n    }\n  ];\n  const filteredSections = docSections.filter(section =>\n    section.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (section.content as any).props.children.toString().toLowerCase().includes(searchQuery.toLowerCase())\n  );\n  const currentSection = filteredSections.find(s => s.id === selectedSection) || filteredSections[0];\n  return (\n    <div className=\"container mx-auto p-6 max-w-7xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold mb-2\">Documentation</h1>\n        <p className=\"text-muted-foreground\">\n          Everything you need to know about using SessionHub effectively\n        </p>\n      </div>\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        {/* Sidebar */}\n        <div className=\"md:col-span-1\">\n          <div className=\"sticky top-6 space-y-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search docs...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 rounded-lg border bg-background\"\n              />\n            </div>\n            <nav className=\"space-y-1\">\n              {filteredSections.map((section) => {\n                const Icon = section.icon;\n                return (\n                  <button\n                    key={section.id}\n                    onClick={() => setSelectedSection(section.id)}\n                    className={`w-full flex items-center gap-2 px-3 py-2 rounded-lg text-sm transition-colors ${\n                      selectedSection === section.id\n                        ? 'bg-primary text-primary-foreground'\n                        : 'hover:bg-secondary'\n                    }`}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                    {section.title}\n                  </button>\n                );\n              })}\n            </nav>\n            <div className=\"pt-4 border-t\">\n              <a\n                href=\"https://github.com/sessionhub/docs\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"flex items-center gap-2 text-sm text-muted-foreground hover:text-foreground\"\n              >\n                <ExternalLink className=\"w-4 h-4\" />\n                View on GitHub\n              </a>\n            </div>\n          </div>\n        </div>\n        {/* Content */}\n        <div className=\"md:col-span-3\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                {currentSection && <currentSection.icon className=\"w-5 h-5\" />}\n                {currentSection?.title}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {currentSection?.content}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/app/figma.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/app/mcp-marketplace.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/app/mcp-server.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/app/page-complex.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/app/page-test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/app/session.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/app/sessions.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":16,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":16,"endColumn":26,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[900,900],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":201,"column":27,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":201,"endColumn":48}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React, { useState, useEffect } from 'react';\nimport { SessionLibrary } from '@/renderer/components/sessions/SessionLibrary';\nimport { SessionWorkflowVisualization } from '@/renderer/components/sessions/SessionWorkflowVisualization';\nimport { SessionAnalyticsDashboard } from '@/renderer/components/sessions/SessionAnalyticsDashboard';\nimport { Session } from '@/src/models/Session';\nimport { Button } from '@/components/ui/Button';\nimport { Card } from '@/components/ui/Card';\nexport default function SessionsPage() {\n  const [view, setView] = useState<'library' | 'analytics' | 'templates'>('library');\n  const [selectedSession, setSelectedSession] = useState<Session | null>(null);\n  const [userId] = useState<string>('default-user'); // TODO: Get from auth\n  const [projectId] = useState<string | undefined>();\n  useEffect(() => {\n    // Load current project if available\n    loadCurrentProject();\n  }, []);\n  const loadCurrentProject = async () => {\n    try {\n      // TODO: Get current project from context\n      // For now, we'll leave it undefined to show all sessions\n    } catch (error) {\n    }\n  };\n  const handleSessionSelect = (session: Session) => {\n    setSelectedSession(session);\n  };\n  const handleSessionCreate = async () => {\n    // TODO: Open session creation dialog\n  };\n  const handleBackToList = () => {\n    setSelectedSession(null);\n  };\n  if (selectedSession) {\n    // Show session detail view\n    return (\n      <div className=\"container mx-auto p-6 max-w-7xl\">\n        <div className=\"mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleBackToList}\n          >\n            ← Back to Sessions\n          </Button>\n        </div>\n        <div className=\"space-y-6\">\n          <Card className=\"p-6\">\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2\">\n              {selectedSession.name}\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              {selectedSession.description}\n            </p>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-6 text-sm\">\n              <div>\n                <p className=\"text-gray-500 dark:text-gray-400\">Status</p>\n                <p className=\"font-medium capitalize\">{selectedSession.status}</p>\n              </div>\n              <div>\n                <p className=\"text-gray-500 dark:text-gray-400\">Created</p>\n                <p className=\"font-medium\">\n                  {new Date(selectedSession.createdAt).toLocaleDateString()}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-gray-500 dark:text-gray-400\">Duration</p>\n                <p className=\"font-medium\">\n                  {selectedSession.metadata.totalDuration\n                    ? `${Math.round(selectedSession.metadata.totalDuration / 1000 / 60)}m`\n                    : 'In progress'}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-gray-500 dark:text-gray-400\">Project</p>\n                <p className=\"font-medium\">{selectedSession.projectId || 'None'}</p>\n              </div>\n            </div>\n          </Card>\n          <SessionWorkflowVisualization\n            session={selectedSession}\n            onPhaseClick={(_phase) => {\n              // TODO: Show _phase details\n            }}\n          />\n          {/* Session details tabs */}\n          <Card className=\"p-6\">\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Session Details</h3>\n              {/* Request */}\n              <div>\n                <h4 className=\"font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  Original Request\n                </h4>\n                <div className=\"bg-gray-50 dark:bg-gray-800 rounded p-4\">\n                  <p className=\"text-sm whitespace-pre-wrap\">\n                    {selectedSession.request.content}\n                  </p>\n                </div>\n              </div>\n              {/* Instructions */}\n              {selectedSession.instructions && (\n                <div>\n                  <h4 className=\"font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                    Generated Instructions\n                  </h4>\n                  <div className=\"bg-gray-50 dark:bg-gray-800 rounded p-4\">\n                    <p className=\"text-sm\">\n                      {selectedSession.instructions.requirements?.length || 0} requirements defined\n                    </p>\n                  </div>\n                </div>\n              )}\n              {/* Result */}\n              {selectedSession.result && (\n                <div>\n                  <h4 className=\"font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                    Execution Result\n                  </h4>\n                  <div className=\"bg-gray-50 dark:bg-gray-800 rounded p-4\">\n                    <p className=\"text-sm\">\n                      {selectedSession.result.status === 'success'\n                        ? 'Successfully completed'\n                        : selectedSession.result.status === 'partial'\n                        ? 'Partially completed'\n                        : 'Failed to complete'}\n                    </p>\n                  </div>\n                </div>\n              )}\n              {/* Error */}\n              {selectedSession.error && (\n                <div>\n                  <h4 className=\"font-medium text-red-700 dark:text-red-300 mb-2\">\n                    Error Details\n                  </h4>\n                  <div className=\"bg-red-50 dark:bg-red-900/20 rounded p-4\">\n                    <p className=\"text-sm text-red-800 dark:text-red-200\">\n                      {selectedSession.error.message}\n                    </p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"container mx-auto p-6 max-w-7xl\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100\">\n          Sessions\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400 mt-2\">\n          Manage your development sessions, view analytics, and create from templates\n        </p>\n      </div>\n      {/* View tabs */}\n      <div className=\"border-b border-gray-200 dark:border-gray-700 mb-6\">\n        <nav className=\"-mb-px flex space-x-8\">\n          <button\n            onClick={() => setView('library')}\n            className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors ${\n              view === 'library'\n                ? 'border-primary text-primary'\n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n            }`}\n          >\n            Session Library\n          </button>\n          <button\n            onClick={() => setView('analytics')}\n            className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors ${\n              view === 'analytics'\n                ? 'border-primary text-primary'\n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n            }`}\n          >\n            Analytics\n          </button>\n          <button\n            onClick={() => setView('templates')}\n            className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors ${\n              view === 'templates'\n                ? 'border-primary text-primary'\n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n            }`}\n          >\n            Templates\n          </button>\n        </nav>\n      </div>\n      {/* Content */}\n      {view === 'library' && (\n        <SessionLibrary\n          userId={userId}\n          projectId={projectId}\n          onSessionSelect={handleSessionSelect}\n          onSessionCreate={handleSessionCreate}\n        />\n      )}\n      {view === 'analytics' && (\n        <SessionAnalyticsDashboard\n          userId={userId}\n          projectId={projectId}\n        />\n      )}\n      {view === 'templates' && (\n        <Card className=\"p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Session Templates</h2>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Session templates feature coming soon. You'll be able to save successful sessions as templates\n            and reuse them for similar tasks.\n          </p>\n        </Card>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/app/settings.tsx","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":180,"column":35,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":180,"endColumn":47}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { ThemeToggle } from '@/components/ui/ThemeToggle';\nimport { \n  Key, \n  Bell, \n  Shield, \n  Palette, \n  Keyboard,\n  Database,\n  Zap,\n  Save,\n  Eye,\n  EyeOff,\n  Check,\n  X\n} from 'lucide-react';\ninterface SettingsSection {\n  id: string;\n  title: string;\n  icon: React.ElementType;\n  description: string;\n}\nexport default function SettingsPage() {\n  const [activeSection, setActiveSection] = useState('api-keys');\n  const [showApiKey, setShowApiKey] = useState(false);\n  const [apiKey, setApiKey] = useState('');\n  const [supabaseUrl, setSupabaseUrl] = useState('');\n  const [supabaseKey, setSupabaseKey] = useState('');\n  const [saveStatus, setSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\n  const settingsSections: SettingsSection[] = [\n    {\n      id: 'api-keys',\n      title: 'API Keys',\n      icon: Key,\n      description: 'Manage your API keys and integrations'\n    },\n    {\n      id: 'appearance',\n      title: 'Appearance',\n      icon: Palette,\n      description: 'Customize the look and feel'\n    },\n    {\n      id: 'notifications',\n      title: 'Notifications',\n      icon: Bell,\n      description: 'Configure notification preferences'\n    },\n    {\n      id: 'keyboard',\n      title: 'Keyboard Shortcuts',\n      icon: Keyboard,\n      description: 'Customize keyboard shortcuts'\n    },\n    {\n      id: 'security',\n      title: 'Security',\n      icon: Shield,\n      description: 'Security and privacy settings'\n    },\n    {\n      id: 'data',\n      title: 'Data & Storage',\n      icon: Database,\n      description: 'Manage local data and cloud sync'\n    },\n    {\n      id: 'performance',\n      title: 'Performance',\n      icon: Zap,\n      description: 'Optimize for your system'\n    }\n  ];\n  const handleSave = async () => {\n    setSaveStatus('saving');\n    try {\n      // In a real app, this would save to electron store or Supabase\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      setSaveStatus('saved');\n      setTimeout(() => setSaveStatus('idle'), 2000);\n    } catch (error) {\n      setSaveStatus('error');\n      setTimeout(() => setSaveStatus('idle'), 3000);\n    }\n  };\n  const currentSection = settingsSections.find(s => s.id === activeSection);\n  return (\n    <div className=\"container mx-auto p-6 max-w-7xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold mb-2\">Settings</h1>\n        <p className=\"text-muted-foreground\">\n          Configure SessionHub to work the way you want\n        </p>\n      </div>\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        {/* Sidebar */}\n        <div className=\"md:col-span-1\">\n          <nav className=\"space-y-1\">\n            {settingsSections.map((section) => {\n              const Icon = section.icon;\n              return (\n                <button\n                  key={section.id}\n                  onClick={() => setActiveSection(section.id)}\n                  className={`w-full flex items-center gap-3 px-3 py-2 rounded-lg text-sm transition-colors ${\n                    activeSection === section.id\n                      ? 'bg-primary text-primary-foreground'\n                      : 'hover:bg-secondary'\n                  }`}\n                >\n                  <Icon className=\"w-4 h-4\" />\n                  <div className=\"text-left\">\n                    <div className=\"font-medium\">{section.title}</div>\n                  </div>\n                </button>\n              );\n            })}\n          </nav>\n        </div>\n        {/* Content */}\n        <div className=\"md:col-span-3\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                {currentSection && <currentSection.icon className=\"w-5 h-5\" />}\n                {currentSection?.title}\n              </CardTitle>\n              <CardDescription>{currentSection?.description}</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {activeSection === 'api-keys' && (\n                <div className=\"space-y-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Claude API Key</label>\n                    <div className=\"flex gap-2\">\n                      <div className=\"relative flex-1\">\n                        <input\n                          type={showApiKey ? 'text' : 'password'}\n                          value={apiKey}\n                          onChange={(e) => setApiKey(e.target.value)}\n                          placeholder=\"sk-ant-...\"\n                          className=\"w-full px-3 py-2 rounded-lg border bg-background\"\n                        />\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => setShowApiKey(!showApiKey)}\n                      >\n                        {showApiKey ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                      </Button>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Get your API key from the Anthropic Console\n                    </p>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Supabase URL</label>\n                    <input\n                      type=\"text\"\n                      value={supabaseUrl}\n                      onChange={(e) => setSupabaseUrl(e.target.value)}\n                      placeholder=\"https://your-project.supabase.co\"\n                      className=\"w-full px-3 py-2 rounded-lg border bg-background\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Supabase Anon Key</label>\n                    <input\n                      type=\"password\"\n                      value={supabaseKey}\n                      onChange={(e) => setSupabaseKey(e.target.value)}\n                      placeholder=\"eyJ...\"\n                      className=\"w-full px-3 py-2 rounded-lg border bg-background\"\n                    />\n                  </div>\n                  <Button onClick={handleSave} className=\"w-full\">\n                    {saveStatus === 'saving' && (\n                      <>\n                        <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin mr-2\" />\n                        Saving...\n                      </>\n                    )}\n                    {saveStatus === 'saved' && (\n                      <>\n                        <Check className=\"w-4 h-4 mr-2\" />\n                        Saved\n                      </>\n                    )}\n                    {saveStatus === 'error' && (\n                      <>\n                        <X className=\"w-4 h-4 mr-2\" />\n                        Error\n                      </>\n                    )}\n                    {saveStatus === 'idle' && (\n                      <>\n                        <Save className=\"w-4 h-4 mr-2\" />\n                        Save Changes\n                      </>\n                    )}\n                  </Button>\n                </div>\n              )}\n              {activeSection === 'appearance' && (\n                <div className=\"space-y-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Theme</label>\n                    <div className=\"flex items-center justify-between p-3 rounded-lg border\">\n                      <span className=\"text-sm\">Application theme</span>\n                      <ThemeToggle />\n                    </div>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Editor Font Size</label>\n                    <select className=\"w-full px-3 py-2 rounded-lg border bg-background\">\n                      <option value=\"12\">12px</option>\n                      <option value=\"14\">14px (Default)</option>\n                      <option value=\"16\">16px</option>\n                      <option value=\"18\">18px</option>\n                    </select>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">UI Density</label>\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      <Button variant=\"ghost\" size=\"sm\">Compact</Button>\n                      <Button variant=\"primary\" size=\"sm\">Normal</Button>\n                      <Button variant=\"ghost\" size=\"sm\">Comfortable</Button>\n                    </div>\n                  </div>\n                </div>\n              )}\n              {activeSection === 'notifications' && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-3 rounded-lg border\">\n                    <div>\n                      <div className=\"font-medium text-sm\">Session Completion</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Notify when a session completes\n                      </div>\n                    </div>\n                    <input type=\"checkbox\" defaultChecked className=\"w-4 h-4\" />\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 rounded-lg border\">\n                    <div>\n                      <div className=\"font-medium text-sm\">Error Alerts</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Show alerts for critical errors\n                      </div>\n                    </div>\n                    <input type=\"checkbox\" defaultChecked className=\"w-4 h-4\" />\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 rounded-lg border\">\n                    <div>\n                      <div className=\"font-medium text-sm\">Update Available</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Notify about new versions\n                      </div>\n                    </div>\n                    <input type=\"checkbox\" defaultChecked className=\"w-4 h-4\" />\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 rounded-lg border\">\n                    <div>\n                      <div className=\"font-medium text-sm\">Sound Effects</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Play sounds for notifications\n                      </div>\n                    </div>\n                    <input type=\"checkbox\" className=\"w-4 h-4\" />\n                  </div>\n                </div>\n              )}\n              {activeSection === 'keyboard' && (\n                <div className=\"space-y-4\">\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Customize keyboard shortcuts to match your workflow\n                  </p>\n                  <div className=\"space-y-2\">\n                    {[\n                      { action: 'Quick Command', keys: '⌘K' },\n                      { action: 'New Session', keys: '⌘N' },\n                      { action: 'Switch Project', keys: '⌘P' },\n                      { action: 'Toggle Theme', keys: '⌘⇧T' },\n                      { action: 'Search', keys: '⌘/' },\n                      { action: 'Settings', keys: '⌘,' }\n                    ].map((shortcut) => (\n                      <div key={shortcut.action} className=\"flex items-center justify-between p-3 rounded-lg border hover:bg-secondary/50\">\n                        <span className=\"text-sm\">{shortcut.action}</span>\n                        <kbd className=\"px-2 py-1 text-xs rounded bg-muted\">{shortcut.keys}</kbd>\n                      </div>\n                    ))}\n                  </div>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"w-full\">\n                    Reset to Defaults\n                  </Button>\n                </div>\n              )}\n              {activeSection === 'security' && (\n                <div className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-base\">API Key Storage</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Your API keys are securely stored in the system keychain and never exposed in plain text.\n                      </p>\n                    </CardContent>\n                  </Card>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-3 rounded-lg border\">\n                      <div>\n                        <div className=\"font-medium text-sm\">Auto-lock</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          Lock SessionHub after inactivity\n                        </div>\n                      </div>\n                      <select className=\"px-3 py-1 rounded border bg-background text-sm\">\n                        <option>Never</option>\n                        <option>5 minutes</option>\n                        <option>15 minutes</option>\n                        <option>30 minutes</option>\n                      </select>\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 rounded-lg border\">\n                      <div>\n                        <div className=\"font-medium text-sm\">Telemetry</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          Share anonymous usage data\n                        </div>\n                      </div>\n                      <input type=\"checkbox\" className=\"w-4 h-4\" />\n                    </div>\n                  </div>\n                </div>\n              )}\n              {activeSection === 'data' && (\n                <div className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-base\">Local Storage</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Sessions</span>\n                        <span className=\"text-muted-foreground\">1.2 GB</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Cache</span>\n                        <span className=\"text-muted-foreground\">456 MB</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Logs</span>\n                        <span className=\"text-muted-foreground\">89 MB</span>\n                      </div>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"w-full mt-4\">\n                        Clear Cache\n                      </Button>\n                    </CardContent>\n                  </Card>\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-base\">Cloud Sync</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm\">Enable cloud sync</span>\n                        <input type=\"checkbox\" defaultChecked className=\"w-4 h-4\" />\n                      </div>\n                      <p className=\"text-xs text-muted-foreground mt-2\">\n                        Sync sessions and settings across devices via Supabase\n                      </p>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n              {activeSection === 'performance' && (\n                <div className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-base\">Apple Silicon Optimization</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <span className=\"text-sm\">Enable M4 Pro optimizations</span>\n                        <input type=\"checkbox\" defaultChecked className=\"w-4 h-4\" />\n                      </div>\n                      <p className=\"text-xs text-muted-foreground\">\n                        Automatically detected and optimized for your M4 Pro chip\n                      </p>\n                    </CardContent>\n                  </Card>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Max Concurrent Sessions</label>\n                      <select className=\"w-full px-3 py-2 rounded-lg border bg-background\" defaultValue=\"3\">\n                        <option value=\"1\">1</option>\n                        <option value=\"2\">2</option>\n                        <option value=\"3\">3 (Recommended)</option>\n                        <option value=\"5\">5</option>\n                        <option value=\"unlimited\">Unlimited</option>\n                      </select>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Memory Limit</label>\n                      <select className=\"w-full px-3 py-2 rounded-lg border bg-background\" defaultValue=\"4\">\n                        <option value=\"2\">2 GB</option>\n                        <option value=\"4\">4 GB (Default)</option>\n                        <option value=\"8\">8 GB</option>\n                        <option value=\"none\">No limit</option>\n                      </select>\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 rounded-lg border\">\n                      <div>\n                        <div className=\"font-medium text-sm\">Hardware Acceleration</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          Use GPU for rendering\n                        </div>\n                      </div>\n                      <input type=\"checkbox\" defaultChecked className=\"w-4 h-4\" />\n                    </div>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/app/zed-integration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/components/Navigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/components/SessionWorkflowPolished.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1129,1132],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1129,1132],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/Button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner';\nimport { EmptyState } from '@/components/ui/EmptyState';\nimport { useToastActions } from '@/components/ui/Toast';\nimport { SessionBreadcrumb } from '@/components/ui/Breadcrumb';\nimport {\n  CheckCircle,\n  Circle,\n  ArrowRight,\n  MessageSquare,\n  Code,\n  FileText,\n  Sparkles,\n  Clock,\n  Pause,\n  Play,\n  RotateCcw\n} from 'lucide-react';\ntype SessionPhase = 'planning' | 'execution' | 'review';\ntype SessionStatus = 'idle' | 'active' | 'paused' | 'completed' | 'failed';\ninterface SessionStep {\n  id: string;\n  phase: SessionPhase;\n  label: string;\n  description: string;\n  status: 'pending' | 'active' | 'completed' | 'skipped';\n  progress?: number;\n  startTime?: string;\n  endTime?: string;\n  error?: string;\n}\ninterface Session {\n  id: string;\n  name: string;\n  status: SessionStatus;\n  currentPhase: SessionPhase;\n  steps: SessionStep[];\n  plan?: string;\n  results?: any;\n  startTime: string;\n  endTime?: string;\n  estimatedDuration?: number;\n}\nexport default function SessionWorkflowPolished() {\n  const [session, setSession] = useState<Session | null>(null);\n  const [isTransitioning, setIsTransitioning] = useState(false);\n  const toast = useToastActions();\n  // Initialize session steps\n  const createSessionSteps = (): SessionStep[] => [\n    {\n      id: 'analyze',\n      phase: 'planning',\n      label: 'Analyze Requirements',\n      description: 'Understanding project objectives and constraints',\n      status: 'pending'\n    },\n    {\n      id: 'plan',\n      phase: 'planning',\n      label: 'Create Execution Plan',\n      description: 'Developing a detailed implementation strategy',\n      status: 'pending'\n    },\n    {\n      id: 'setup',\n      phase: 'execution',\n      label: 'Setup Environment',\n      description: 'Preparing development environment and dependencies',\n      status: 'pending'\n    },\n    {\n      id: 'implement',\n      phase: 'execution',\n      label: 'Implement Solution',\n      description: 'Building the solution according to plan',\n      status: 'pending'\n    },\n    {\n      id: 'test',\n      phase: 'execution',\n      label: 'Run Tests',\n      description: 'Validating the implementation',\n      status: 'pending'\n    },\n    {\n      id: 'review',\n      phase: 'review',\n      label: 'Review Changes',\n      description: 'Examining the completed work',\n      status: 'pending'\n    },\n    {\n      id: 'commit',\n      phase: 'review',\n      label: 'Commit & Document',\n      description: 'Saving changes and updating documentation',\n      status: 'pending'\n    }\n  ];\n  const startNewSession = () => {\n    const newSession: Session = {\n      id: Date.now().toString(),\n      name: `Session ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`,\n      status: 'active',\n      currentPhase: 'planning',\n      steps: createSessionSteps(),\n      startTime: new Date().toISOString(),\n      estimatedDuration: 25 // minutes\n    };\n    setSession(newSession);\n    toast.success('New session started', 'Good luck with your development!');\n    // Start the first step\n    setTimeout(() => {\n      activateStep(newSession, 'analyze');\n    }, 500);\n  };\n  const activateStep = (currentSession: Session, stepId: string) => {\n    setIsTransitioning(true);\n    const updatedSteps = currentSession.steps.map(step => {\n      if (step.id === stepId) {\n        return { ...step, status: 'active' as const, startTime: new Date().toISOString() };\n      }\n      return step;\n    });\n    setSession({\n      ...currentSession,\n      steps: updatedSteps\n    });\n    // Simulate step execution\n    setTimeout(() => {\n      completeStep(currentSession, stepId);\n      setIsTransitioning(false);\n    }, 2000 + Math.random() * 3000); // 2-5 seconds per step\n  };\n  const completeStep = (currentSession: Session, stepId: string) => {\n    const updatedSteps = currentSession.steps.map(step => {\n      if (step.id === stepId) {\n        return { ...step, status: 'completed' as const, endTime: new Date().toISOString(), progress: 100 };\n      }\n      return step;\n    });\n    const updatedSession = { ...currentSession, steps: updatedSteps };\n    setSession(updatedSession);\n    // Find next step\n    const nextStep = updatedSteps.find(step => step.status === 'pending');\n    if (nextStep) {\n      // Check if we're transitioning phases\n      const currentStep = updatedSteps.find(s => s.id === stepId);\n      if (currentStep && nextStep.phase !== currentStep.phase) {\n        setIsTransitioning(true);\n        toast.info(`Moving to ${nextStep.phase} phase`, 'Transitioning to the next phase of your session');\n        setTimeout(() => {\n          setSession({ ...updatedSession, currentPhase: nextStep.phase });\n          activateStep(updatedSession, nextStep.id);\n        }, 1000);\n      } else {\n        activateStep(updatedSession, nextStep.id);\n      }\n    } else {\n      // Session complete\n      completeSession(updatedSession);\n    }\n  };\n  const completeSession = (currentSession: Session) => {\n    setSession({\n      ...currentSession,\n      status: 'completed',\n      endTime: new Date().toISOString()\n    });\n    toast.success('Session completed!', 'All tasks have been successfully completed');\n  };\n  const pauseSession = () => {\n    if (session && session.status === 'active') {\n      setSession({ ...session, status: 'paused' });\n      toast.info('Session paused', 'You can resume anytime');\n    }\n  };\n  const resumeSession = () => {\n    if (session && session.status === 'paused') {\n      setSession({ ...session, status: 'active' });\n      toast.info('Session resumed', 'Continuing where you left off');\n      // Resume the active step\n      const activeStep = session.steps.find(s => s.status === 'active');\n      if (activeStep) {\n        activateStep(session, activeStep.id);\n      }\n    }\n  };\n  const resetSession = () => {\n    setSession(null);\n    toast.info('Session reset', 'Ready to start a new session');\n  };\n  const getPhaseProgress = (phase: SessionPhase): number => {\n    if (!session) return 0;\n    const phaseSteps = session.steps.filter(s => s.phase === phase);\n    const completedSteps = phaseSteps.filter(s => s.status === 'completed').length;\n    return (completedSteps / phaseSteps.length) * 100;\n  };\n  const getElapsedTime = (): string => {\n    if (!session) return '00:00';\n    const start = new Date(session.startTime);\n    const end = session.endTime ? new Date(session.endTime) : new Date();\n    const elapsed = Math.floor((end.getTime() - start.getTime()) / 1000);\n    const minutes = Math.floor(elapsed / 60);\n    const seconds = elapsed % 60;\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n  if (!session) {\n    return (\n      <div className=\"container mx-auto p-6 max-w-4xl\">\n        <EmptyState\n          icon={Sparkles}\n          title=\"Start a New Development Session\"\n          description=\"Create a focused work session with AI-powered planning and execution assistance\"\n          action={{\n            label: \"Start New Session\",\n            onClick: startNewSession,\n            variant: 'primary'\n          }}\n        >\n          <div className=\"grid grid-cols-3 gap-4 mt-6 mb-6\">\n            <div className=\"text-center\">\n              <MessageSquare className=\"w-8 h-8 mx-auto mb-2 text-muted-foreground\" />\n              <p className=\"text-sm font-medium\">Smart Planning</p>\n            </div>\n            <div className=\"text-center\">\n              <Code className=\"w-8 h-8 mx-auto mb-2 text-muted-foreground\" />\n              <p className=\"text-sm font-medium\">Guided Execution</p>\n            </div>\n            <div className=\"text-center\">\n              <FileText className=\"w-8 h-8 mx-auto mb-2 text-muted-foreground\" />\n              <p className=\"text-sm font-medium\">Auto Documentation</p>\n            </div>\n          </div>\n        </EmptyState>\n      </div>\n    );\n  }\n  return (\n    <div className=\"container mx-auto p-6 max-w-7xl\">\n      {/* Header with breadcrumb */}\n      <div className=\"mb-6\">\n        <SessionBreadcrumb sessionId={session.id} sessionName={session.name} />\n      </div>\n      {/* Session Progress Overview */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>{session.name}</CardTitle>\n              <CardDescription className=\"flex items-center gap-4 mt-2\">\n                <span className=\"flex items-center gap-1\">\n                  <Clock className=\"w-4 h-4\" />\n                  {getElapsedTime()}\n                </span>\n                {session.estimatedDuration && (\n                  <span className=\"text-muted-foreground\">\n                    Est. {session.estimatedDuration} min\n                  </span>\n                )}\n              </CardDescription>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              {session.status === 'active' && (\n                <Button variant=\"ghost\" size=\"sm\" onClick={pauseSession}>\n                  <Pause className=\"w-4 h-4 mr-2\" />\n                  Pause\n                </Button>\n              )}\n              {session.status === 'paused' && (\n                <Button variant=\"ghost\" size=\"sm\" onClick={resumeSession}>\n                  <Play className=\"w-4 h-4 mr-2\" />\n                  Resume\n                </Button>\n              )}\n              {session.status === 'completed' && (\n                <Button variant=\"ghost\" size=\"sm\" onClick={resetSession}>\n                  <RotateCcw className=\"w-4 h-4 mr-2\" />\n                  New Session\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Phase Progress */}\n          <div className=\"grid grid-cols-3 gap-4\">\n            {(['planning', 'execution', 'review'] as const).map((phase, index) => {\n              const progress = getPhaseProgress(phase);\n              const isActive = session.currentPhase === phase;\n              const isPast = ['planning', 'execution', 'review'].indexOf(phase) < \n                            ['planning', 'execution', 'review'].indexOf(session.currentPhase);\n              return (\n                <div key={phase} className=\"relative\">\n                  <div className={`p-4 rounded-lg border-2 transition-all duration-300 ${\n                    isActive ? 'border-primary bg-primary/5' : \n                    isPast ? 'border-green-500 bg-green-50 dark:bg-green-950' : \n                    'border-muted'\n                  }`}>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h3 className=\"font-medium capitalize\">{phase}</h3>\n                      {isPast ? (\n                        <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                      ) : isActive ? (\n                        <Circle className=\"w-5 h-5 text-primary animate-pulse\" />\n                      ) : (\n                        <Circle className=\"w-5 h-5 text-muted-foreground\" />\n                      )}\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div\n                        className=\"bg-primary rounded-full h-2 transition-all duration-500\"\n                        style={{ width: `${progress}%` }}\n                      />\n                    </div>\n                  </div>\n                  {index < 2 && (\n                    <ArrowRight className={`absolute top-1/2 -right-6 transform -translate-y-1/2 w-4 h-4 transition-colors duration-300 ${\n                      isPast ? 'text-green-500' : 'text-muted-foreground'\n                    }`} />\n                  )}\n                </div>\n              );\n            })}\n          </div>\n          {/* Current Step Details */}\n          <div className=\"mt-8 space-y-3\">\n            {session.steps.map((step) => (\n              <div\n                key={step.id}\n                className={`flex items-center gap-4 p-3 rounded-lg transition-all duration-300 ${\n                  step.status === 'active' ? 'bg-primary/10 border border-primary' :\n                  step.status === 'completed' ? 'bg-green-50 dark:bg-green-950' :\n                  'bg-muted/30'\n                }`}\n              >\n                <div className=\"flex-shrink-0\">\n                  {step.status === 'completed' ? (\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                  ) : step.status === 'active' ? (\n                    <LoadingSpinner size=\"sm\" />\n                  ) : (\n                    <Circle className=\"w-5 h-5 text-muted-foreground\" />\n                  )}\n                </div>\n                <div className=\"flex-1\">\n                  <p className={`font-medium ${\n                    step.status === 'active' ? 'text-primary' : ''\n                  }`}>\n                    {step.label}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {step.description}\n                  </p>\n                </div>\n                {step.status === 'active' && (\n                  <div className=\"text-sm text-muted-foreground animate-pulse\">\n                    Processing...\n                  </div>\n                )}\n                {step.status === 'completed' && step.startTime && step.endTime && (\n                  <div className=\"text-sm text-muted-foreground\">\n                    {Math.round((new Date(step.endTime).getTime() - new Date(step.startTime).getTime()) / 1000)}s\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n      {/* Transition Overlay */}\n      {isTransitioning && (\n        <div className=\"fixed inset-0 bg-background/50 backdrop-blur-sm z-40 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <LoadingSpinner size=\"lg\" label=\"Transitioning to next phase...\" />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/components/ui/Breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/components/ui/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/components/ui/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/components/ui/EmptyState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/components/ui/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/components/ui/KeyboardShortcuts.tsx","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to property where a void return was expected.","line":40,"column":17,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnProperty","endLine":40,"endColumn":58},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to property where a void return was expected.","line":64,"column":17,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnProperty","endLine":64,"endColumn":43},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to property where a void return was expected.","line":72,"column":17,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnProperty","endLine":72,"endColumn":47},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":138,"column":5,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":138,"endColumn":28,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[3975,3976],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Keyboard Shortcuts Component\n * Provides global keyboard shortcuts throughout the application\n */\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useRouter } from 'next/router';\nimport { Card } from './Card';\nimport { useTheme } from '../../lib/hooks/useTheme';\n\ninterface Shortcut {\n  keys: string[];\n  label: string;\n  description: string;\n  action: () => void;\n  category: string;\n  global?: boolean;\n}\n\nexport function KeyboardShortcuts() {\n  const router = useRouter();\n  const { toggleTheme } = useTheme();\n  const [showHelp, setShowHelp] = useState(false);\n  const [shortcuts, setShortcuts] = useState<Shortcut[]>([]);\n\n  // Register global shortcuts\n  useEffect(() => {\n    const globalShortcuts: Shortcut[] = [\n      {\n        keys: ['Meta', 'k'],\n        label: 'Command Palette',\n        description: 'Open quick command palette',\n        action: () => {},\n        category: 'Navigation',\n        global: true\n      },\n      {\n        keys: ['Meta', 'n'],\n        label: 'New Session',\n        description: 'Create a new development session',\n        action: () => router.push('/sessions?action=new'),\n        category: 'Sessions',\n        global: true\n      },\n      {\n        keys: ['Meta', 'p'],\n        label: 'Switch Project',\n        description: 'Quick switch between projects',\n        action: () => {},\n        category: 'Navigation',\n        global: true\n      },\n      {\n        keys: ['Meta', 'Shift', 't'],\n        label: 'Toggle Theme',\n        description: 'Switch between light and dark theme',\n        action: toggleTheme,\n        category: 'Appearance',\n        global: true\n      },\n      {\n        keys: ['Meta', '/'],\n        label: 'Search',\n        description: 'Search documentation and help',\n        action: () => router.push('/docs'),\n        category: 'Navigation',\n        global: true\n      },\n      {\n        keys: ['Meta', ','],\n        label: 'Settings',\n        description: 'Open application settings',\n        action: () => router.push('/settings'),\n        category: 'Navigation',\n        global: true\n      },\n      {\n        keys: ['?'],\n        label: 'Help',\n        description: 'Show keyboard shortcuts',\n        action: () => setShowHelp(true),\n        category: 'Help',\n        global: true\n      }\n    ];\n\n    setShortcuts(globalShortcuts);\n  }, [router, toggleTheme]);\n\n  const registerShortcut = useCallback((shortcut: Shortcut) => {\n    setShortcuts(prev => [...prev.filter(s => s.keys.join('+') !== shortcut.keys.join('+')), shortcut]);\n  }, []);\n\n  const unregisterShortcut = useCallback((keys: string[]) => {\n    setShortcuts(prev => prev.filter(s => s.keys.join('+') !== keys.join('+')));\n  }, []);\n\n  // Handle keyboard events\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const activeElement = document.activeElement;\n      const isTyping = activeElement?.tagName === 'INPUT' || \n                      activeElement?.tagName === 'TEXTAREA' || \n                      (activeElement as HTMLElement)?.contentEditable === 'true';\n\n      if (isTyping && e.key !== '?') return;\n\n      shortcuts.forEach(shortcut => {\n        const match = shortcut.keys.every(key => {\n          switch (key) {\n            case 'Meta':\n              return e.metaKey;\n            case 'Ctrl':\n              return e.ctrlKey;\n            case 'Alt':\n              return e.altKey;\n            case 'Shift':\n              return e.shiftKey;\n            default:\n              return e.key.toLowerCase() === key.toLowerCase();\n          }\n        });\n\n        if (match) {\n          e.preventDefault();\n          shortcut.action();\n        }\n      });\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [shortcuts]);\n\n  const groupedShortcuts = shortcuts.reduce((acc, shortcut) => {\n    if (!acc[shortcut.category]) {\n      acc[shortcut.category] = [];\n    }\n    acc[shortcut.category]!.push(shortcut);\n    return acc;\n  }, {} as Record<string, Shortcut[]>);\n\n  return (\n    <>\n      {/* Context API for child components */}\n      <KeyboardShortcutContext.Provider value={{ registerShortcut, unregisterShortcut }}>\n        {/* Children would go here */}\n      </KeyboardShortcutContext.Provider>\n\n      {/* Help Modal */}\n      {showHelp && (\n        <div className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\">\n          <Card className=\"max-w-2xl w-full max-h-[80vh] overflow-auto\">\n            <div className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-2xl font-bold\">Keyboard Shortcuts</h2>\n                <button\n                  onClick={() => setShowHelp(false)}\n                  className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n                >\n                  <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </button>\n              </div>\n\n              {Object.entries(groupedShortcuts).map(([category, categoryShortcuts]) => (\n                <div key={category} className=\"mb-6\">\n                  <h3 className=\"text-lg font-semibold mb-3\">{category}</h3>\n                  <div className=\"space-y-2\">\n                    {categoryShortcuts.map((shortcut, index) => (\n                      <div key={index} className=\"flex justify-between items-center py-2\">\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium\">{shortcut.label}</div>\n                          <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                            {shortcut.description}\n                          </div>\n                        </div>\n                        <div className=\"flex gap-1 ml-4\">\n                          {shortcut.keys.map((key, keyIndex) => (\n                            <React.Fragment key={keyIndex}>\n                              {keyIndex > 0 && <span className=\"text-gray-400\">+</span>}\n                              <kbd className=\"px-2 py-1 text-sm font-mono bg-gray-100 dark:bg-gray-800 rounded\">\n                                {key === 'Meta' ? '⌘' : key}\n                              </kbd>\n                            </React.Fragment>\n                          ))}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </Card>\n        </div>\n      )}\n    </>\n  );\n}\n\n// Context for registering shortcuts from child components\nexport const KeyboardShortcutContext = React.createContext<{\n  registerShortcut: (shortcut: Shortcut) => void;\n  unregisterShortcut: (keys: string[]) => void;\n}>({\n  registerShortcut: () => {},\n  unregisterShortcut: () => {}\n});\n\nexport const useKeyboardShortcut = () => React.useContext(KeyboardShortcutContext);","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/components/ui/LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/components/ui/QuickActions.tsx","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":161,"column":5,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":161,"endColumn":26,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[4512,4513],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Button } from './Button';\nimport { useKeyboardShortcut } from './KeyboardShortcuts';\nimport { useToastActions } from './Toast';\nimport {\n  Command,\n  Search,\n  Plus,\n  FileText,\n  Settings,\n  HelpCircle,\n  Zap,\n  GitBranch,\n  Terminal,\n  Cloud,\n  Shield,\n  Package,\n  BarChart\n} from 'lucide-react';\ninterface QuickAction {\n  id: string;\n  label: string;\n  description?: string;\n  icon: React.ElementType;\n  category: 'navigation' | 'session' | 'settings' | 'help';\n  action: () => void;\n  keywords: string[];\n}\nexport function QuickActionsMenu() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const router = useRouter();\n  const toast = useToastActions();\n  const { registerShortcut } = useKeyboardShortcut();\n  const quickActions: QuickAction[] = [\n    // Navigation\n    {\n      id: 'home',\n      label: 'Go to Dashboard',\n      icon: BarChart,\n      category: 'navigation',\n      action: () => router.push('/'),\n      keywords: ['home', 'dashboard', 'main']\n    },\n    {\n      id: 'sessions',\n      label: 'View Sessions',\n      icon: Terminal,\n      category: 'navigation',\n      action: () => router.push('/sessions'),\n      keywords: ['sessions', 'work', 'history']\n    },\n    {\n      id: 'architecture',\n      label: 'Architecture Overview',\n      icon: GitBranch,\n      category: 'navigation',\n      action: () => router.push('/architecture'),\n      keywords: ['architecture', 'system', 'design']\n    },\n    {\n      id: 'docs',\n      label: 'Documentation',\n      icon: FileText,\n      category: 'navigation',\n      action: () => router.push('/docs'),\n      keywords: ['docs', 'documentation', 'help', 'guide']\n    },\n    // Session Actions\n    {\n      id: 'new-session',\n      label: 'New Session',\n      description: 'Start a new development session',\n      icon: Plus,\n      category: 'session',\n      action: () => {\n        router.push('/sessions?action=new');\n        toast.success('Starting new session');\n      },\n      keywords: ['new', 'create', 'start', 'session']\n    },\n    {\n      id: 'import-project',\n      label: 'Import Project',\n      description: 'Import an existing codebase',\n      icon: Package,\n      category: 'session',\n      action: () => {\n        toast.info('Opening project import wizard');\n      },\n      keywords: ['import', 'project', 'codebase']\n    },\n    // Settings\n    {\n      id: 'settings',\n      label: 'Settings',\n      icon: Settings,\n      category: 'settings',\n      action: () => router.push('/settings'),\n      keywords: ['settings', 'preferences', 'config']\n    },\n    {\n      id: 'api-keys',\n      label: 'API Keys',\n      description: 'Manage your API credentials',\n      icon: Shield,\n      category: 'settings',\n      action: () => router.push('/settings?section=api-keys'),\n      keywords: ['api', 'keys', 'credentials', 'claude']\n    },\n    {\n      id: 'cloud-sync',\n      label: 'Cloud Sync',\n      description: 'Configure cloud synchronization',\n      icon: Cloud,\n      category: 'settings',\n      action: () => router.push('/settings?section=data'),\n      keywords: ['cloud', 'sync', 'backup', 'supabase']\n    },\n    // Help\n    {\n      id: 'help',\n      label: 'Help Center',\n      icon: HelpCircle,\n      category: 'help',\n      action: () => router.push('/docs'),\n      keywords: ['help', 'support', 'question']\n    },\n    {\n      id: 'shortcuts',\n      label: 'Keyboard Shortcuts',\n      description: 'View all keyboard shortcuts',\n      icon: Command,\n      category: 'help',\n      action: () => {\n        setIsOpen(false);\n        // Trigger keyboard shortcuts help\n        window.dispatchEvent(new KeyboardEvent('keydown', { key: '?' }));\n      },\n      keywords: ['keyboard', 'shortcuts', 'hotkeys']\n    }\n  ];\n  // Filter actions based on search\n  const filteredActions = quickActions.filter(action => {\n    const query = searchQuery.toLowerCase();\n    return (\n      action.label.toLowerCase().includes(query) ||\n      action.description?.toLowerCase().includes(query) ||\n      action.keywords.some(keyword => keyword.includes(query))\n    );\n  });\n  // Group actions by category\n  const groupedActions = filteredActions.reduce((acc, action) => {\n    if (!acc[action.category]) {\n      acc[action.category] = [];\n    }\n    acc[action.category]!.push(action);\n    return acc;\n  }, {} as Record<string, QuickAction[]>);\n  // Handle keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!isOpen) return;\n      switch (e.key) {\n        case 'ArrowDown':\n          e.preventDefault();\n          setSelectedIndex(prev => \n            prev < filteredActions.length - 1 ? prev + 1 : 0\n          );\n          break;\n        case 'ArrowUp':\n          e.preventDefault();\n          setSelectedIndex(prev => \n            prev > 0 ? prev - 1 : filteredActions.length - 1\n          );\n          break;\n        case 'Enter':\n          e.preventDefault();\n          if (filteredActions[selectedIndex]) {\n            filteredActions[selectedIndex].action();\n            setIsOpen(false);\n          }\n          break;\n        case 'Escape':\n          e.preventDefault();\n          setIsOpen(false);\n          break;\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, selectedIndex, filteredActions]);\n  // Reset selection when search changes\n  useEffect(() => {\n    setSelectedIndex(0);\n  }, [searchQuery]);\n  // Focus input when menu opens\n  useEffect(() => {\n    if (isOpen) {\n      inputRef.current?.focus();\n      setSearchQuery('');\n      setSelectedIndex(0);\n    }\n  }, [isOpen]);\n  // Register global shortcut\n  useEffect(() => {\n    registerShortcut({\n      keys: ['Meta', 'k'],\n      label: 'Quick Actions',\n      description: 'Open quick command palette',\n      action: () => setIsOpen(true),\n      category: 'Navigation',\n      global: true\n    });\n  }, [registerShortcut]);\n  if (!isOpen) {\n    return (\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={() => setIsOpen(true)}\n        className=\"flex items-center gap-2\"\n      >\n        <Command className=\"w-4 h-4\" />\n        <span className=\"hidden sm:inline\">Quick Actions</span>\n        <kbd className=\"hidden sm:inline px-1.5 py-0.5 text-xs rounded bg-muted\">⌘K</kbd>\n      </Button>\n    );\n  }\n  const categoryLabels = {\n    navigation: 'Navigation',\n    session: 'Sessions',\n    settings: 'Settings',\n    help: 'Help & Support'\n  };\n  return (\n    <div className=\"fixed inset-0 bg-background/80 backdrop-blur-sm z-50 flex items-start justify-center pt-[20vh]\">\n      <div className=\"bg-background border rounded-lg shadow-lg w-full max-w-2xl mx-4\">\n        <div className=\"p-4 border-b\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <input\n              ref={inputRef}\n              type=\"text\"\n              placeholder=\"Search for actions...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full pl-10 pr-10 py-2 bg-transparent border-0 focus:outline-none text-lg\"\n            />\n            <button\n              onClick={() => setIsOpen(false)}\n              className=\"absolute right-3 top-1/2 transform -translate-y-1/2 p-1 rounded hover:bg-muted\"\n            >\n              <kbd className=\"text-xs px-1.5 py-0.5 rounded bg-muted\">ESC</kbd>\n            </button>\n          </div>\n        </div>\n        <div className=\"max-h-[60vh] overflow-y-auto p-2\">\n          {filteredActions.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No actions found for \"{searchQuery}\"\n            </div>\n          ) : (\n            Object.entries(groupedActions).map(([category, actions]) => (\n              <div key={category} className=\"mb-4\">\n                <div className=\"text-xs font-medium text-muted-foreground px-2 py-1\">\n                  {categoryLabels[category as keyof typeof categoryLabels]}\n                </div>\n                {actions.map((action) => {\n                  const Icon = action.icon;\n                  const globalIndex = filteredActions.indexOf(action);\n                  const isSelected = globalIndex === selectedIndex;\n                  return (\n                    <button\n                      key={action.id}\n                      onClick={() => {\n                        action.action();\n                        setIsOpen(false);\n                      }}\n                      onMouseEnter={() => setSelectedIndex(globalIndex)}\n                      className={`w-full flex items-center gap-3 px-2 py-2 rounded text-left transition-colors ${\n                        isSelected ? 'bg-primary text-primary-foreground' : 'hover:bg-muted'\n                      }`}\n                    >\n                      <Icon className=\"w-4 h-4 flex-shrink-0\" />\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium text-sm\">{action.label}</div>\n                        {action.description && (\n                          <div className={`text-xs ${\n                            isSelected ? 'text-primary-foreground/80' : 'text-muted-foreground'\n                          }`}>\n                            {action.description}\n                          </div>\n                        )}\n                      </div>\n                      {isSelected && (\n                        <kbd className=\"text-xs px-1.5 py-0.5 rounded bg-primary-foreground/20\">\n                          ⏎\n                        </kbd>\n                      )}\n                    </button>\n                  );\n                })}\n              </div>\n            ))\n          )}\n        </div>\n        <div className=\"p-3 border-t text-xs text-muted-foreground flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <span className=\"flex items-center gap-1\">\n              <kbd className=\"px-1 py-0.5 rounded bg-muted\">↑↓</kbd>\n              Navigate\n            </span>\n            <span className=\"flex items-center gap-1\">\n              <kbd className=\"px-1 py-0.5 rounded bg-muted\">⏎</kbd>\n              Select\n            </span>\n            <span className=\"flex items-center gap-1\">\n              <kbd className=\"px-1 py-0.5 rounded bg-muted\">ESC</kbd>\n              Close\n            </span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Zap className=\"w-3 h-3\" />\n            Quick Actions\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/components/ui/Skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/components/ui/ThemeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/components/ui/Toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/jest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/lib/hooks/useTheme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/background-simple.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/background.ts","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":60,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":60,"endColumn":52},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":320,"column":31,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":320,"endColumn":47},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":322,"column":39,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":322,"endColumn":55},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":325,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":325,"endColumn":43,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[10855,10855],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":330,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":336,"endColumn":6},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":352,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":352,"endColumn":31,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[11900,11900],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":355,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":355,"endColumn":49,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[12003,12003],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":369,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":369,"endColumn":68,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[12522,12522],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":377,"column":36,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":377,"endColumn":52}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Electron Main Process - Background Service\n * Handles app lifecycle, window management, and system integration\n */\nimport { app, BrowserWindow, Menu, shell, ipcMain, dialog } from \"electron\";\nimport type { Notification as ElectronNotification } from \"electron\";\nimport { autoUpdater } from \"electron-updater\";\nimport * as path from \"path\";\nimport isDev from \"electron-is-dev\";\nimport serve from \"electron-serve\";\n// Import SessionHub services\nimport { productionMonitor } from \"../src/services/production/ProductionMonitor\";\nimport { selfDevelopmentProduction } from \"../src/services/production/SelfDevelopmentProduction\";\nimport { claudeAutoAcceptService } from \"./services/ClaudeAutoAcceptService\";\nimport { autoUpdateService } from \"./services/AutoUpdateService\";\nimport { menuBarService } from \"./services/mac/MenuBarService\";\nimport { appLifecycleService } from \"./services/AppLifecycleService\";\nimport { fileAssociationService } from \"./services/mac/FileAssociationService\";\nimport { productionOptimizations } from \"../src/config/production-optimizations\";\nimport { EmergencyRecoverySystem } from \"../src/services/pipeline/EmergencyRecoverySystem\";\n// Import IPC handlers\nimport { registerFigmaHandlers } from \"./ipc/figmaHandlers\";\nimport { registerAdminHandlers } from \"./ipc/adminHandlers\";\nimport { registerSessionPipelineHandlers } from \"./ipc/sessionPipelineHandlers\";\nimport { registerContextHandlers } from \"./ipc/contextHandlers\";\nimport { registerSessionHandlers } from \"./ipc/sessionHandlers\";\nimport { registerPipelineHandlers } from \"./ipc/pipelineHandlers\";\nimport { registerMCPServerHandlers } from \"./ipc/mcpServerHandlers\";\nimport { registerZedHandlers } from \"./ipc/zedHandlers\";\nimport { registerAIHandlers } from \"./ipc/aiHandlers\";\n// Configure auto-updater for production\nif (!isDev) {\n  serve({ directory: \"app\" });\n  void autoUpdater.checkForUpdatesAndNotify();\n}\nclass SessionHubApp {\n  private mainWindow: BrowserWindow | null = null;\n  private isQuitting = false;\n  constructor() {\n    this.initializeApp();\n  }\n  private initializeApp(): void {\n    // Enable live reload for development\n    if (isDev) {\n      require(\"electron-reload\")(__dirname, {\n        electron: path.join(\n          __dirname,\n          \"..\",\n          \"node_modules\",\n          \".bin\",\n          \"electron\",\n        ),\n        hardResetMethod: \"exit\",\n      });\n    }\n    // App event handlers\n    void app.whenReady().then(() => this.onReady());\n    app.on(\"window-all-closed\", () => this.onWindowAllClosed());\n    app.on(\"activate\", () => this.onActivate());\n    app.on(\"before-quit\", () => this.onBeforeQuit());\n    // Security: Prevent new window creation\n    app.on(\"web-contents-created\", (_event, contents) => {\n      contents.setWindowOpenHandler(({ url }) => {\n        shell.openExternal(url).catch(() => {\n          // Handle error silently\n        });\n        return { action: \"deny\" };\n      });\n    });\n    // Auto-updater will be initialized after window creation\n  }\n  private async onReady(): Promise<void> {\n// REMOVED: console statement\n    // Check for recovery needs before anything else\n    const recovery = EmergencyRecoverySystem.getInstance();\n    const recoverySuccess = await recovery.checkAndRecover();\n    if (!recoverySuccess) {\n      app.quit();\n      return;\n    }\n    // Initialize app lifecycle service\n    await appLifecycleService.initialize();\n    // Set app security\n    this.setSecurityDefaults();\n    // Create application menu\n    this.createMenu();\n    // Create main window\n    await this.createMainWindow();\n    // Initialize SessionHub services\n    await this.initializeServices();\n    // Initialize Mac-specific features\n    this.initializeMacFeatures();\n    // Initialize auto-updater after window is ready\n    this.setupAutoUpdater();\n    // Show startup notification\n    this.showStartupNotification();\n// REMOVED: console statement\n  }\n  private onWindowAllClosed(): void {\n    // On macOS, keep app running even when all windows are closed\n    if (process.platform !== \"darwin\") {\n      void app.quit();\n    }\n  }\n  private onActivate(): void {\n    // On macOS, re-create window when dock icon is clicked\n    if (BrowserWindow.getAllWindows().length === 0) {\n      this.createMainWindow().catch(() => {\n        // Handle window creation error silently\n      });\n    }\n  }\n  private async onBeforeQuit(): Promise<void> {\n    this.isQuitting = true;\n    // Clear crash marker for clean shutdown\n    const recovery = EmergencyRecoverySystem.getInstance();\n    recovery.clearCrashMarker();\n    // Shutdown production optimizations\n    if (!isDev) {\n      await productionOptimizations.shutdown();\n    }\n  }\n  private setSecurityDefaults(): void {\n    // Set secure defaults\n    app.setAboutPanelOptions({\n      applicationName: \"SessionHub\",\n      applicationVersion: \"1.0.0\",\n      version: \"1.0.0\",\n      copyright: \"© 2025 SessionHub Team\",\n      authors: [\"SessionHub Development Team\"],\n      website: \"https://sessionhub.com\",\n      iconPath: path.join(__dirname, \"../resources/icon.png\"),\n    });\n  }\n  private async createMainWindow(): Promise<void> {\n    // Check for saved window state\n    const savedState = appLifecycleService.getWindowState('main');\n    // Create the browser window\n    this.mainWindow = new BrowserWindow({\n      width: savedState?.bounds.width || 1200,\n      height: savedState?.bounds.height || 800,\n      x: savedState?.bounds.x,\n      y: savedState?.bounds.y,\n      minWidth: 800,\n      minHeight: 600,\n      show: false,\n      icon: path.join(__dirname, \"../resources/icon.png\"),\n      titleBarStyle: \"hiddenInset\",\n      webPreferences: {\n        nodeIntegration: false,\n        contextIsolation: true,\n        sandbox: true,\n        preload: path.join(__dirname, \"preload.js\"),\n      },\n    });\n    // Register window with lifecycle service\n    appLifecycleService.registerWindow(this.mainWindow);\n    // Load the application\n    if (isDev) {\n      await this.mainWindow.loadURL(\"http://localhost:3000\");\n      // Open DevTools in development\n      this.mainWindow.webContents.openDevTools();\n    } else {\n      await this.mainWindow.loadURL(\"app://./index.html\");\n    }\n    // Show window when ready\n    this.mainWindow.once(\"ready-to-show\", () => {\n      if (this.mainWindow) {\n        void this.mainWindow.show();\n        // Focus on the window\n        if (isDev) {\n          this.mainWindow.webContents.openDevTools();\n        }\n      }\n    });\n    // Handle window closed\n    this.mainWindow.on(\"closed\", () => {\n      this.mainWindow = null;\n    });\n    // Handle window close (hide instead of quit on macOS)\n    this.mainWindow.on(\"close\", (event) => {\n      if (process.platform === \"darwin\" && !this.isQuitting) {\n        event.preventDefault();\n        this.mainWindow?.hide();\n      }\n    });\n  }\n  private createMenu(): void {\n    const template: Electron.MenuItemConstructorOptions[] = [\n      {\n        label: app.getName(),\n        submenu: [\n          { role: \"about\" },\n          { type: \"separator\" },\n          { role: \"services\" },\n          { type: \"separator\" },\n          { role: \"hide\" },\n          { role: \"hideOthers\" },\n          { role: \"unhide\" },\n          { type: \"separator\" },\n          { role: \"quit\" },\n        ],\n      },\n      {\n        label: \"File\",\n        submenu: [\n          {\n            label: \"New Session\",\n            accelerator: \"CmdOrCtrl+N\",\n            click: () => void this.newSession(),\n          },\n          { type: \"separator\" },\n          { role: \"close\" },\n        ],\n      },\n      {\n        label: \"Edit\",\n        submenu: [\n          { role: \"undo\" },\n          { role: \"redo\" },\n          { type: \"separator\" },\n          { role: \"cut\" },\n          { role: \"copy\" },\n          { role: \"paste\" },\n          { role: \"selectAll\" },\n        ],\n      },\n      {\n        label: \"View\",\n        submenu: [\n          { role: \"reload\" },\n          { role: \"forceReload\" },\n          { role: \"toggleDevTools\" },\n          { type: \"separator\" },\n          { role: \"resetZoom\" },\n          { role: \"zoomIn\" },\n          { role: \"zoomOut\" },\n          { type: \"separator\" },\n          { role: \"togglefullscreen\" },\n        ],\n      },\n      {\n        label: \"Window\",\n        submenu: [\n          { role: \"minimize\" },\n          { role: \"zoom\" },\n          { type: \"separator\" },\n          { role: \"front\" },\n        ],\n      },\n      {\n        label: \"Help\",\n        submenu: [\n          {\n            label: \"Documentation\",\n            click: () => void shell.openExternal(\"https://sessionhub.com/docs\"),\n          },\n          {\n            label: \"Support\",\n            click: () => void shell.openExternal(\"https://sessionhub.com/support\"),\n          },\n          { type: \"separator\" },\n          {\n            label: \"System Health\",\n            click: () => void this.showSystemHealth(),\n          },\n        ],\n      },\n    ];\n    const menu = Menu.buildFromTemplate(template);\n    Menu.setApplicationMenu(menu);\n  }\n  private async initializeServices(): Promise<void> {\n// REMOVED: console statement\n    // Initialize production optimizations\n    if (!isDev) {\n      await productionOptimizations.initialize();\n    }\n    // Start production monitoring\n    void productionMonitor.performHealthChecks();\n    // Initialize self-development system\n    selfDevelopmentProduction.getSelfDevelopmentStatus();\n// REMOVED: console statement\n    // Initialize self-development pipeline\n    const pipelineConfig = {\n      github: {\n        webhookSecret: process.env['GITHUB_WEBHOOK_SECRET'] || '',\n        apiToken: '', // Will be loaded from credential manager\n        repos: ['sessionhub/sessionhub-v2'],\n        labelFilter: ['sessionhub-auto']\n      },\n      production: {\n        errorThreshold: 5,\n        monitoringInterval: 60000\n      },\n      deployment: {\n        autoDeployEnabled: !isDev,\n        requiresApproval: true,\n        signatureKeyPath: path.join(app.getPath('userData'), 'keys', 'deploy.key'),\n        updateChannels: ['stable', 'beta', 'alpha']\n      },\n      emergency: {\n        recoveryEndpoint: 'http://localhost:3000/recovery',\n        fallbackVersion: '1.0.0'\n      }\n    };\n    // Initialize pipeline through IPC when ready\n    setTimeout(() => {\n      this.mainWindow?.webContents.send('pipeline:initialize', pipelineConfig);\n    }, 5000);\n    // Initialize Claude auto-accept service\n    void claudeAutoAcceptService.initialize();\n    // Set up IPC handlers\n    this.setupIpcHandlers();\n// REMOVED: console statement\n  }\n  private initializeMacFeatures(): void {\n    if (process.platform !== 'darwin') return;\n    // Initialize menu bar\n    menuBarService.initialize(this.mainWindow!);\n    // Initialize file associations\n    fileAssociationService.initialize(this.mainWindow!);\n    // Set up menu bar event handlers\n    menuBarService.on('check-updates', () => {\n      autoUpdateService.checkForUpdates();\n    });\n    menuBarService.on('force-sync', () => {\n      this.mainWindow?.webContents.send('force-sync');\n    });\n    menuBarService.on('toggle-auto-accept', async (enabled: boolean) => {\n      if (enabled) {\n        await claudeAutoAcceptService.enable();\n      } else {\n        await claudeAutoAcceptService.disable();\n      }\n    });\n    menuBarService.on('open-project', (projectPath: string) => {\n      this.mainWindow?.webContents.send('open-project', { projectPath });\n    });\n    // Set up file association handlers\n    fileAssociationService.on('open-project', (data) => {\n      this.mainWindow?.webContents.send('file-opened', data);\n    });\n    fileAssociationService.on('open-session', (data) => {\n      this.mainWindow?.webContents.send('file-opened', data);\n    });\n    fileAssociationService.on('open-template', (data) => {\n      this.mainWindow?.webContents.send('file-opened', data);\n    });\n    // Set up lifecycle handlers\n    appLifecycleService.on('should-create-window', () => {\n      this.createMainWindow();\n    });\n    appLifecycleService.on('open-file', (filePath: string) => {\n      fileAssociationService.openFile(filePath);\n    });\n    appLifecycleService.on('open-url', (url: string) => {\n      fileAssociationService.handleDeepLink(url);\n    });\n    appLifecycleService.on('crash-recovery-needed', (lastSession) => {\n      if (this.mainWindow) {\n        this.mainWindow.webContents.send('restore-session', lastSession);\n      }\n    });\n    // Energy efficiency handlers\n    appLifecycleService.on('on-battery', () => {\n      // Switch to efficiency mode when on battery\n      if (!isDev) {\n        productionOptimizations.optimizeForWorkload('development');\n      }\n      // Reduce update check frequency\n      autoUpdateService.destroy();\n      menuBarService.updateStatus({ syncStatus: 'idle' });\n    });\n    appLifecycleService.on('on-ac', () => {\n      // Resume normal operations\n      autoUpdateService.initialize(this.mainWindow!);\n    });\n  }\n  private setupIpcHandlers(): void {\n    // Register Figma handlers\n    registerFigmaHandlers();\n    // Register Admin handlers\n    registerAdminHandlers();\n    // Register Session Pipeline handlers\n    registerSessionPipelineHandlers();\n    // Register Context handlers\n    registerContextHandlers();\n    // Register Session handlers\n    registerSessionHandlers();\n    // Register Pipeline handlers\n    registerPipelineHandlers();\n    // Register MCP Server handlers\n    registerMCPServerHandlers();\n    // Register Zed IDE handlers\n    registerZedHandlers();\n    // Register AI Enhancement handlers\n    registerAIHandlers();\n    // System health check\n    ipcMain.handle(\"get-system-health\", async () => {\n      return await productionMonitor.performHealthChecks();\n    });\n    // Self-development status\n    ipcMain.handle(\"get-self-development-status\", () => {\n      return selfDevelopmentProduction.getSelfDevelopmentStatus();\n    });\n    // Trigger test issue (for demo purposes)\n    ipcMain.handle(\"trigger-test-issue\", async () => {\n      await selfDevelopmentProduction.triggerTestIssue();\n      return { success: true, message: \"Test issue triggered\" };\n    });\n    // Get production metrics\n    ipcMain.handle(\"get-production-metrics\", () => {\n      return productionMonitor.getMetricsSummary();\n    });\n    // Update handlers\n    ipcMain.handle(\"check-for-updates\", async () => {\n      await autoUpdateService.checkForUpdates();\n      return autoUpdateService.getStatus();\n    });\n    ipcMain.handle(\"download-update\", async () => {\n      await autoUpdateService.downloadUpdate();\n    });\n    ipcMain.handle(\"install-update\", () => {\n      autoUpdateService.quitAndInstall();\n    });\n    // File association handlers\n    ipcMain.handle(\"save-project-file\", async (_event, projectData, savePath) => {\n      return await fileAssociationService.saveProjectFile(projectData, savePath);\n    });\n    // Preferences handlers\n    ipcMain.handle(\"set-preference\", async (_event, key, value) => {\n      await appLifecycleService.setPreference(key, value);\n    });\n    ipcMain.handle(\"get-preference\", (_event, key) => {\n      return appLifecycleService.getPreference(key);\n    });\n    // Session state handlers\n    ipcMain.handle(\"save-session\", async (_event, sessionData) => {\n      await appLifecycleService.saveSession(sessionData);\n    });\n    // Menu bar status handlers\n    ipcMain.handle(\"update-menu-bar-status\", (_event, status) => {\n      menuBarService.updateStatus(status);\n    });\n  }\n  private setupAutoUpdater(): void {\n    if (isDev) return;\n    // Initialize auto-update service when window is ready\n    if (this.mainWindow) {\n      autoUpdateService.initialize(this.mainWindow);\n    }\n    // Handle update events\n    autoUpdateService.on('update-available', () => {\n      menuBarService.updateStatus({ updateAvailable: true });\n    });\n    autoUpdateService.on('update-downloaded', () => {\n      menuBarService.showStatusMessage('Update ready - restart to apply');\n    });\n    autoUpdateService.on('error', (_error) => {\n      // Log but don't show to user unless critical\n      // console.error('Update error:', error);\n    });\n  }\n  private showStartupNotification(): void {\n    const { Notification } = eval(\"require('electron')\") as { Notification: typeof ElectronNotification };\n    if (Notification.isSupported()) {\n      const notification = new Notification({\n        title: \"SessionHub Ready\",\n        body: \"AI-powered development platform is now running\",\n        icon: path.join(__dirname, \"../resources/icon.png\"),\n      });\n      notification.show();\n    }\n  }\n  private newSession(): void {\n    // Send message to renderer to create new session\n    this.mainWindow?.webContents.send(\"new-session\");\n  }\n  private async showSystemHealth(): Promise<void> {\n    const health = await productionMonitor.performHealthChecks();\n    const message = `SessionHub Status: ${health.status.toUpperCase()}\\n\\nUptime: ${Math.round(health.uptime / 1000)}s\\nChecks passed: ${health.checks.filter((c) => c.status === \"pass\").length}/${health.checks.length}`;\n    if (this.mainWindow) {\n      void dialog.showMessageBox(this.mainWindow, {\n        type: \"info\",\n        title: \"System Health\",\n        message,\n        buttons: [\"OK\"],\n      });\n    }\n  }\n}\n// Initialize SessionHub\nnew SessionHubApp();\n","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/ipc/adminHandlers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":132,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":135,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4304,4307],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4304,4307],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":137,"column":165,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":168,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4798,4801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4798,4801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ipcMain } from 'electron';\nimport { SupabaseService } from '../../src/services/cloud/SupabaseService';\nimport { getAdminService } from '../../src/services/admin/AdminService';\nimport { Logger } from '../../src/lib/logging/Logger';\n\nconst logger = new Logger('AdminHandlers');\n\nexport function registerAdminHandlers(): void {\n  const serviceLogger = new Logger('SupabaseService');\n  const supabaseService = new SupabaseService(serviceLogger);\n  const adminService = getAdminService(supabaseService);\n\n  // Check admin access\n  ipcMain.handle('admin:check-access', async () => {\n    try {\n      const isAdmin = await adminService.checkAdminRole();\n      return { success: true, isAdmin };\n    } catch (error) {\n      logger.error('Failed to check admin access', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Check super admin access\n  ipcMain.handle('admin:check-super-access', async () => {\n    try {\n      const isSuperAdmin = await adminService.checkSuperAdminRole();\n      return { success: true, isSuperAdmin };\n    } catch (error) {\n      logger.error('Failed to check super admin access', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Get all users\n  ipcMain.handle('admin:get-all-users', async () => {\n    try {\n      const users = await adminService.getAllUsers();\n      return { success: true, users };\n    } catch (error) {\n      logger.error('Failed to get all users', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Get user by ID\n  ipcMain.handle('admin:get-user', async (_event, userId: string) => {\n    try {\n      const user = await adminService.getUserById(userId);\n      return { success: true, user };\n    } catch (error) {\n      logger.error('Failed to get user', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Update user role\n  ipcMain.handle('admin:update-user-role', async (_event, userId: string, role: 'user' | 'admin' | 'super_admin') => {\n    try {\n      await adminService.updateUserRole(userId, role);\n      return { success: true };\n    } catch (error) {\n      logger.error('Failed to update user role', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Suspend user\n  ipcMain.handle('admin:suspend-user', async (_event, userId: string) => {\n    try {\n      await adminService.suspendUser(userId);\n      return { success: true };\n    } catch (error) {\n      logger.error('Failed to suspend user', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Activate user\n  ipcMain.handle('admin:activate-user', async (_event, userId: string) => {\n    try {\n      await adminService.activateUser(userId);\n      return { success: true };\n    } catch (error) {\n      logger.error('Failed to activate user', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Get system stats\n  ipcMain.handle('admin:get-system-stats', async () => {\n    try {\n      const stats = await adminService.getSystemStats();\n      return { success: true, stats };\n    } catch (error) {\n      logger.error('Failed to get system stats', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Get audit logs\n  ipcMain.handle('admin:get-audit-logs', async (_event, filters?: {\n    adminId?: string;\n    action?: string;\n    targetType?: string;\n    startDate?: string;\n    endDate?: string;\n    limit?: number;\n  }) => {\n    try {\n      const parsedFilters = filters ? {\n        ...filters,\n        startDate: filters.startDate ? new Date(filters.startDate) : undefined,\n        endDate: filters.endDate ? new Date(filters.endDate) : undefined\n      } : undefined;\n\n      const logs = await adminService.getAuditLogs(parsedFilters);\n      return { success: true, logs };\n    } catch (error) {\n      logger.error('Failed to get audit logs', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Record system metric\n  ipcMain.handle('admin:record-metric', async (_event, metricType: string, value: number, unit?: string, metadata?: Record<string, any>) => {\n    try {\n      await adminService.recordSystemMetric(metricType, value, unit, metadata);\n      return { success: true };\n    } catch (error) {\n      logger.error('Failed to record system metric', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Log emergency access\n  ipcMain.handle('admin:log-emergency-access', async (_event, action: string, severity: 'low' | 'medium' | 'high' | 'critical', reason: string, affectedResources?: any[]) => {\n    try {\n      const logId = await adminService.logEmergencyAccess(action, severity, reason, affectedResources);\n      return { success: true, logId };\n    } catch (error) {\n      logger.error('Failed to log emergency access', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Resolve emergency access\n  ipcMain.handle('admin:resolve-emergency', async (_event, emergencyLogId: string, resolutionNotes: string) => {\n    try {\n      await adminService.resolveEmergencyAccess(emergencyLogId, resolutionNotes);\n      return { success: true };\n    } catch (error) {\n      logger.error('Failed to resolve emergency access', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Get emergency access logs\n  ipcMain.handle('admin:get-emergency-logs', async () => {\n    try {\n      // Only super admins can view emergency logs\n      const isSuperAdmin = await adminService.checkSuperAdminRole();\n      if (!isSuperAdmin) {\n        throw new Error('Super admin access required');\n      }\n\n      const { data, error } = await supabaseService.getClient()\n        .from('emergency_access_logs')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        throw error;\n      }\n\n      return { success: true, logs: data };\n    } catch (error) {\n      logger.error('Failed to get emergency logs', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // System health check\n  ipcMain.handle('admin:health-check', async () => {\n    try {\n      const isAdmin = await adminService.checkAdminRole();\n      if (!isAdmin) {\n        throw new Error('Admin access required');\n      }\n\n      // Perform health checks\n      const healthChecks = {\n        database: false,\n        authentication: false,\n        services: false\n      };\n\n      // Check database connection\n      try {\n        const { error } = await supabaseService.getClient()\n          .from('user_profiles')\n          .select('count')\n          .limit(1);\n        healthChecks.database = !error;\n      } catch {\n        healthChecks.database = false;\n      }\n\n      // Check authentication\n      const currentUser = await supabaseService.getCurrentUser();\n      healthChecks.authentication = !!currentUser;\n\n      // Services are considered healthy if we got this far\n      healthChecks.services = true;\n\n      // Record health metrics\n      const overallHealth = Object.values(healthChecks).every(v => v);\n      await adminService.recordSystemMetric('system_health', overallHealth ? 100 : 50, '%', healthChecks);\n\n      return { success: true, healthChecks, overallHealth };\n    } catch (error) {\n      logger.error('Failed to perform health check', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Batch user operations\n  ipcMain.handle('admin:batch-user-operation', async (_event, operation: 'suspend' | 'activate', userIds: string[]) => {\n    try {\n      await adminService.requireAdminRole();\n\n      const results = [];\n      for (const userId of userIds) {\n        try {\n          if (operation === 'suspend') {\n            await adminService.suspendUser(userId);\n          } else {\n            await adminService.activateUser(userId);\n          }\n          results.push({ userId, success: true });\n        } catch (error) {\n          results.push({ userId, success: false, error: (error as Error).message });\n        }\n      }\n\n      return { success: true, results };\n    } catch (error) {\n      logger.error('Failed to perform batch operation', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  logger.info('Admin handlers registered');\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/ipc/aiHandlers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1326,1329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1326,1329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2225,2228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2225,2228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3048,3051],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3048,3051],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * IPC handlers for AI Enhancement features\n * Session 2.8 Implementation\n */\nimport { ipcMain, IpcMainInvokeEvent } from 'electron';\nimport { AIEnhancementManager } from '../../src/services/ai';\nimport type { \n  AutocompleteContext,\n  PatternSearchCriteria,\n  AIEnhancementConfig \n} from '../../src/services/ai';\nlet aiManager: AIEnhancementManager | null = null;\nexport function registerAIHandlers(): void {\n  // Initialize AI Manager\n  ipcMain.handle('ai:initialize', async () => {\n    if (!aiManager) {\n      aiManager = new AIEnhancementManager();\n      await aiManager.initialize();\n    }\n    return aiManager.getStatus();\n  });\n  // Learning from code\n  ipcMain.handle('ai:learn-from-code', async (\n    _event: IpcMainInvokeEvent,\n    filePath: string,\n    content: string\n  ) => {\n    if (!aiManager) throw new Error('AI Manager not initialized');\n    await aiManager.learnFromCode(filePath, content);\n    return { success: true };\n  });\n  // Autocomplete\n  ipcMain.handle('ai:get-autocomplete', async (\n    _event: IpcMainInvokeEvent,\n    context: AutocompleteContext\n  ) => {\n    if (!aiManager) throw new Error('AI Manager not initialized');\n    return await aiManager.getAutocompleteSuggestions(context);\n  });\n  ipcMain.handle('ai:record-autocomplete', async (\n    _event: IpcMainInvokeEvent,\n    suggestion: any,\n    accepted: boolean\n  ) => {\n    if (!aiManager) throw new Error('AI Manager not initialized');\n    await aiManager.recordAutocompleteUsage(suggestion, accepted);\n    return { success: true };\n  });\n  // Project analysis\n  ipcMain.handle('ai:analyze-project', async (\n    _event: IpcMainInvokeEvent,\n    projectPath: string\n  ) => {\n    if (!aiManager) throw new Error('AI Manager not initialized');\n    return await aiManager.analyzeProject(projectPath);\n  });\n  // Session tracking\n  ipcMain.handle('ai:start-session', async (\n    _event: IpcMainInvokeEvent,\n    sessionId: string,\n    objectives: string[]\n  ) => {\n    if (!aiManager) throw new Error('AI Manager not initialized');\n    await aiManager.startSession(sessionId, objectives);\n    return { success: true };\n  });\n  ipcMain.handle('ai:update-session', async (\n    _event: IpcMainInvokeEvent,\n    sessionId: string,\n    updates: any\n  ) => {\n    if (!aiManager) throw new Error('AI Manager not initialized');\n    await aiManager.updateSession(sessionId, updates);\n    return { success: true };\n  });\n  ipcMain.handle('ai:complete-session', async (\n    _event: IpcMainInvokeEvent,\n    sessionId: string,\n    success: boolean\n  ) => {\n    if (!aiManager) throw new Error('AI Manager not initialized');\n    await aiManager.completeSession(sessionId, success);\n    return { success: true };\n  });\n  // Pattern library\n  ipcMain.handle('ai:search-patterns', async (\n    _event: IpcMainInvokeEvent,\n    criteria: PatternSearchCriteria\n  ) => {\n    if (!aiManager) throw new Error('AI Manager not initialized');\n    return await aiManager.searchPatterns(criteria);\n  });\n  ipcMain.handle('ai:add-pattern', async (\n    _event: IpcMainInvokeEvent,\n    pattern: any\n  ) => {\n    if (!aiManager) throw new Error('AI Manager not initialized');\n    return await aiManager.addPattern(pattern);\n  });\n  // Cross-project intelligence\n  ipcMain.handle('ai:get-insights', async (\n    _event: IpcMainInvokeEvent,\n    projectPath?: string\n  ) => {\n    if (!aiManager) throw new Error('AI Manager not initialized');\n    return await aiManager.getProjectInsights(projectPath);\n  });\n  ipcMain.handle('ai:transfer-learning', async (\n    _event: IpcMainInvokeEvent,\n    fromProject: string,\n    toProject: string\n  ) => {\n    if (!aiManager) throw new Error('AI Manager not initialized');\n    return await aiManager.transferLearning(fromProject, toProject);\n  });\n  // Status and reports\n  ipcMain.handle('ai:get-status', async () => {\n    if (!aiManager) throw new Error('AI Manager not initialized');\n    return aiManager.getStatus();\n  });\n  ipcMain.handle('ai:get-metrics-summary', async (\n    _event: IpcMainInvokeEvent,\n    days: number\n  ) => {\n    if (!aiManager) throw new Error('AI Manager not initialized');\n    return await aiManager.getMetricsSummary(days);\n  });\n  ipcMain.handle('ai:generate-insights', async () => {\n    if (!aiManager) throw new Error('AI Manager not initialized');\n    return await aiManager.generateInsightReport();\n  });\n  // Configuration\n  ipcMain.handle('ai:get-config', async () => {\n    if (!aiManager) throw new Error('AI Manager not initialized');\n    return aiManager.getConfig();\n  });\n  ipcMain.handle('ai:update-config', async (\n    _event: IpcMainInvokeEvent,\n    config: Partial<AIEnhancementConfig>\n  ) => {\n    if (!aiManager) throw new Error('AI Manager not initialized');\n    aiManager.updateConfig(config);\n    return aiManager.getConfig();\n  });\n  // Data management\n  ipcMain.handle('ai:export-data', async () => {\n    if (!aiManager) throw new Error('AI Manager not initialized');\n    return await aiManager.exportLearningData();\n  });\n  ipcMain.handle('ai:import-data', async (\n    _event: IpcMainInvokeEvent,\n    data: string\n  ) => {\n    if (!aiManager) throw new Error('AI Manager not initialized');\n    await aiManager.importLearningData(data);\n    return { success: true };\n  });\n  ipcMain.handle('ai:clear-data', async () => {\n    if (!aiManager) throw new Error('AI Manager not initialized');\n    await aiManager.clearLearningData();\n    return { success: true };\n  });\n}\nexport function getAIManager(): AIEnhancementManager | null {\n  return aiManager;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/ipc/apiHandlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":110,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":110,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3052,3055],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3052,3055],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":112,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":112,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":118,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":118,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":120,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":120,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":121,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":121,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":122,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":122,"endColumn":21}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ipcMain, dialog } from \"electron\";\nimport { MacKeychainService } from \"../services/mac/MacKeychainService\";\nimport { ClaudeAPIClient } from \"../../src/lib/api/ClaudeAPIClient\";\nimport Store from \"electron-store\";\n\nconst store = new Store();\nconst keychainService = new MacKeychainService();\n\nexport function registerApiHandlers(): void {\n  // Check if API key exists\n  ipcMain.handle(\"check-api-key\", async () => {\n    try {\n      const apiKey = await keychainService.getCredential(\n        \"sessionhub\",\n        \"claude-api-key\",\n      );\n      return !!apiKey;\n    } catch (error: unknown) {\n      return false;\n    }\n  });\n\n  // Validate API key\n  ipcMain.handle(\"validate-api-key\", async (_event, apiKey: string) => {\n    try {\n      const client = new ClaudeAPIClient({ apiKey });\n      // Test the API key with a simple request\n      await client.sendMessage(\"Hello\", \"test-validation\");\n      return true;\n    } catch (error: unknown) {\n// REMOVED: console statement\n      return false;\n    }\n  });\n\n  // Save API key to keychain\n  ipcMain.handle(\"save-api-key\", async (_event, apiKey: string) => {\n    try {\n      await keychainService.setCredential(\n        \"sessionhub\",\n        \"claude-api-key\",\n        apiKey,\n      );\n      return true;\n    } catch (error: unknown) {\n// REMOVED: console statement\n      throw error;\n    }\n  });\n\n  // Send chat message\n  ipcMain.handle(\n    \"send-chat-message\",\n    async (_event, sessionId: string, message: string) => {\n      try {\n        const apiKey = await keychainService.getCredential(\n          \"sessionhub\",\n          \"claude-api-key\",\n        );\n        if (!apiKey) {\n          throw new Error(\"API key not found\");\n        }\n\n        const client = new ClaudeAPIClient({ apiKey });\n\n        // Get conversation history\n        const history = store.get(\n          `sessions.${sessionId}.messages`,\n          [],\n        ) as Array<{ role: string; content: string }>;\n\n        // Add user message to history\n        history.push({ role: \"user\", content: message });\n\n        // Send to Claude API\n        const response = await client.sendMessage(message, sessionId, history);\n\n        // Add assistant response to history\n        history.push({ role: \"assistant\", content: response });\n\n        // Save updated history\n        store.set(`sessions.${sessionId}.messages`, history);\n\n        return response;\n      } catch (error: unknown) {\n// REMOVED: console statement\n        throw error;\n      }\n    },\n  );\n\n  // GitHub repository selection dialog\n  ipcMain.handle(\"select-github-repo\", async () => {\n    try {\n      // Show dialog to input GitHub URL\n      const result = await dialog.showMessageBox({\n        type: \"question\",\n        buttons: [\"Cancel\", \"Import\"],\n        defaultId: 1,\n        title: \"Import GitHub Repository\",\n        message: \"Enter the GitHub repository URL\",\n        detail: \"Example: https://github.com/owner/repo\",\n      });\n\n      if (result.response === 0) {\n        return null;\n      }\n\n      // Parse the GitHub URL\n      const url = (result as any).inputValue || '';\n      const githubRegex = /^https?:\\/\\/github\\.com\\/([^\\/]+)\\/([^\\/\\s]+)/;\n      const match = url.match(githubRegex);\n      \n      if (!match) {\n        return null;\n      }\n      \n      const [, owner, repo] = match;\n      return {\n        url: url.replace(/\\.git$/, ''), // Remove .git suffix if present\n        name: repo.replace(/\\.git$/, ''),\n        owner: owner,\n        defaultBranch: \"main\", // Could fetch this via GitHub API\n      };\n    } catch (error: unknown) {\n// REMOVED: console statement\n      return null;\n    }\n  });\n\n  // Analyze repository\n  ipcMain.handle(\n    \"analyze-repository\",\n    async (\n      _event,\n      sessionId: string,\n      repoInfo: {\n        url: string;\n        owner: string;\n        name: string;\n        defaultBranch: string;\n      },\n    ) => {\n      try {\n        const apiKey = await keychainService.getCredential(\n          \"sessionhub\",\n          \"claude-api-key\",\n        );\n        if (!apiKey) {\n          throw new Error(\"API key not found\");\n        }\n\n        const client = new ClaudeAPIClient({ apiKey });\n\n        // Create analysis prompt\n        const analysisPrompt = `Please analyze this GitHub repository: ${repoInfo.url}\nRepository: ${repoInfo.owner}/${repoInfo.name}\nDefault Branch: ${repoInfo.defaultBranch}\n\nProvide a comprehensive analysis including:\n1. Project structure and architecture\n2. Main technologies and frameworks used\n3. Key features and functionality\n4. Code quality observations\n5. Potential improvements or issues\n6. Recommendations for development approach`;\n\n        const response = await client.sendMessage(analysisPrompt, sessionId);\n\n        return response;\n      } catch (error: unknown) {\n// REMOVED: console statement\n        throw error;\n      }\n    },\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/ipc/contextHandlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":72,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":72,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2908,2911],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2908,2911],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":80,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":80,"endColumn":75},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3135,3138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3135,3138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":81,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":90,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3197,3200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3197,3200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":82,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":82,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":83,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":83,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":84,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":84,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":85,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":85,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":86,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":86,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":87,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":87,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":88,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":88,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":89,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":89,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":93,"column":31,"nodeType":"Property","messageId":"anyAssignment","endLine":93,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3936,3939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3936,3939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":109,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":109,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3986,3989],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3986,3989],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ipcMain } from 'electron';\nimport { ProjectContextService } from '@/src/services/intelligence/ProjectContextService';\nimport { PatternRecognitionService } from '@/src/services/intelligence/PatternRecognitionService';\nimport { Logger } from '@/src/lib/logging/Logger';\n\nconst logger = new Logger('ContextHandlers');\nconst contextService = ProjectContextService.getInstance();\nconst patternService = new PatternRecognitionService();\n\nexport function registerContextHandlers() {\n  // Analyze project context\n  ipcMain.handle('analyze-project-context', async (_event, projectId: string, projectPath: string) => {\n    try {\n      logger.info(`Analyzing context for project: ${projectId}`);\n      const result = await contextService.analyzeProjectContext(projectPath, projectId);\n      return { success: true, data: result };\n    } catch (error) {\n      logger.error('Failed to analyze project context', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Get project context\n  ipcMain.handle('get-project-context', async (_event, projectId: string) => {\n    try {\n      const context = await contextService.getContextForPlanning(projectId);\n      return { success: true, data: context };\n    } catch (error) {\n      logger.error('Failed to get project context', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Search similar contexts\n  ipcMain.handle('search-similar-contexts', async (_event, projectId: string, limit: number = 5) => {\n    try {\n      const context = await contextService.getContextForPlanning(projectId);\n      if (!context) {\n        return { success: false, error: 'Context not found' };\n      }\n      \n      const similar = await contextService.searchSimilarContexts(context, limit);\n      return { success: true, data: similar };\n    } catch (error) {\n      logger.error('Failed to search similar contexts', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Get patterns\n  ipcMain.handle('get-patterns', async (_event, projectId?: string) => {\n    try {\n      let patterns;\n      \n      if (projectId) {\n        // Get patterns relevant to a specific project\n        const context = await contextService.getContextForPlanning(projectId);\n        if (context) {\n          const suggestions = await patternService.getSuggestionsForContext({\n            projectType: context.projectType,\n            language: context.language,\n            framework: context.frameworks[0]?.name\n          });\n          \n          patterns = suggestions.map(s => ({\n            id: s.pattern.id,\n            type: s.pattern.type,\n            name: s.pattern.pattern,\n            description: s.pattern.description || '',\n            examples: s.pattern.examples || [],\n            frequency: s.pattern.frequency,\n            projects: (s.pattern as any).projectIds || [],\n            confidence: s.relevanceScore\n          }));\n        } else {\n          patterns = [];\n        }\n      } else {\n        // Get all patterns\n        const allPatterns = await (patternService as any).getAllPatterns();\n        patterns = allPatterns.map((p: any) => ({\n          id: p.id,\n          type: p.type,\n          name: p.pattern,\n          description: p.description || '',\n          examples: p.examples || [],\n          frequency: p.frequency,\n          projects: p.projectIds || [],\n          confidence: p.successRate\n        }));\n      }\n      \n      return { success: true, data: patterns };\n    } catch (error) {\n      logger.error('Failed to get patterns', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Learn pattern from example\n  ipcMain.handle('learn-pattern', async (_event, pattern: {\n    type: string;\n    pattern: string;\n    example: string;\n    projectId: string;\n  }) => {\n    try {\n      await (patternService as any).learnPattern({\n        type: pattern.type as any,\n        pattern: pattern.pattern,\n        example: pattern.example,\n        projectId: pattern.projectId,\n        context: {},\n        timestamp: new Date()\n      });\n      \n      return { success: true };\n    } catch (error) {\n      logger.error('Failed to learn pattern', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Refresh context cache\n  ipcMain.handle('refresh-context-cache', async (_event, projectId: string) => {\n    try {\n      // This will force a cache refresh by analyzing the project again\n      const project = await getProjectById(projectId);\n      if (!project) {\n        return { success: false, error: 'Project not found' };\n      }\n      \n      const result = await contextService.analyzeProjectContext(project.path, projectId);\n      return { success: true, data: result };\n    } catch (error) {\n      logger.error('Failed to refresh context cache', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  logger.info('Context handlers registered');\n}\n\n// Helper function to get project by ID (would be imported from project service)\nasync function getProjectById(_projectId: string): Promise<{ path: string } | null> {\n  // This would typically query the database or project service\n  // For now, returning a placeholder\n  return null;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/ipc/figmaHandlers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2380,2383],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2380,2383],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ipcMain } from 'electron';\nimport { SessionHubUIUpdater } from '../../src/services/figma/SessionHubUIUpdater';\nimport { ProjectUIEnhancer } from '../../src/services/figma/ProjectUIEnhancer';\nimport { FigmaMCPService } from '../../src/services/figma/FigmaMCPService';\n\nlet sessionHubUpdater: SessionHubUIUpdater | null = null;\nlet projectEnhancer: ProjectUIEnhancer | null = null;\nlet figmaService: FigmaMCPService | null = null;\n\nexport function registerFigmaHandlers(): void {\n  // Check Figma connection\n  ipcMain.handle('figma:check-connection', async () => {\n    return figmaService !== null;\n  });\n\n  // Get API key (from secure storage)\n  ipcMain.handle('figma:get-api-key', async () => {\n    // TODO: Implement secure storage retrieval\n    return process.env['FIGMA_API_KEY'] || '';\n  });\n\n  // Initialize Figma MCP\n  ipcMain.handle('figma:initialize', async (_, apiKey: string) => {\n    try {\n      figmaService = new FigmaMCPService();\n      await figmaService.initialize(apiKey);\n\n      sessionHubUpdater = new SessionHubUIUpdater();\n      await sessionHubUpdater.initialize(apiKey);\n\n      projectEnhancer = new ProjectUIEnhancer();\n      await projectEnhancer.initialize(apiKey);\n\n      return true;\n    } catch (error) {\n      throw error;\n    }\n  });\n\n  // SessionHub UI Update Handlers\n  ipcMain.handle('figma:start-sessionhub-ui-update', async (_, figmaFileKey: string) => {\n    if (!sessionHubUpdater) {\n      throw new Error('Figma not initialized');\n    }\n    return await sessionHubUpdater.startUIUpdateSession(figmaFileKey);\n  });\n\n  ipcMain.handle('figma:get-update-status', async () => {\n    if (!sessionHubUpdater) {\n      throw new Error('Figma not initialized');\n    }\n    return sessionHubUpdater.getSessionStatus();\n  });\n\n  ipcMain.handle('figma:preview-ui-changes', async (_, figmaFileKey: string) => {\n    if (!sessionHubUpdater) {\n      throw new Error('Figma not initialized');\n    }\n    return await sessionHubUpdater.previewUIChanges(figmaFileKey);\n  });\n\n  ipcMain.handle('figma:create-ui-pull-request', async (_, figmaFileKey: string, description: string) => {\n    if (!sessionHubUpdater) {\n      throw new Error('Figma not initialized');\n    }\n    return await sessionHubUpdater.createUIPullRequest(figmaFileKey, description);\n  });\n\n  // Project UI Enhancement Handlers\n  ipcMain.handle('figma:register-project', async (_, project: any) => {\n    if (!projectEnhancer) {\n      throw new Error('Figma not initialized');\n    }\n    projectEnhancer.registerProject(project);\n    return true;\n  });\n\n  ipcMain.handle('figma:start-project-ui-update', async (_, projectId: string, figmaFileKey: string) => {\n    if (!projectEnhancer) {\n      throw new Error('Figma not initialized');\n    }\n    return await projectEnhancer.startEnhancementSession(projectId, figmaFileKey);\n  });\n\n  ipcMain.handle('figma:get-enhancement-status', async (_, sessionId: string) => {\n    if (!projectEnhancer) {\n      throw new Error('Figma not initialized');\n    }\n    return projectEnhancer.getSessionStatus(sessionId);\n  });\n\n  ipcMain.handle('figma:merge-ui-changes', async (_, sessionId: string) => {\n    if (!projectEnhancer) {\n      throw new Error('Figma not initialized');\n    }\n    return await projectEnhancer.mergeUIChanges(sessionId);\n  });\n\n  ipcMain.handle('figma:get-figma-enabled-projects', async () => {\n    if (!projectEnhancer) {\n      throw new Error('Figma not initialized');\n    }\n    return projectEnhancer.getFigmaEnabledProjects();\n  });\n\n  // Watch Figma file for changes\n  ipcMain.handle('figma:watch-file', async (_, figmaFileKey: string) => {\n    if (!sessionHubUpdater) {\n      throw new Error('Figma not initialized');\n    }\n    await sessionHubUpdater.watchFigmaFile(figmaFileKey);\n    return true;\n  });\n\n  // Get components needing update\n  ipcMain.handle('figma:get-components-needing-update', async () => {\n    if (!sessionHubUpdater) {\n      throw new Error('Figma not initialized');\n    }\n    return await sessionHubUpdater.getComponentsNeedingUpdate();\n  });\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/ipc/mcpServerHandlers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":98,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":101,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1881,1884],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1881,1884],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2139,2142],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2139,2142],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2453,2456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2453,2456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4251,4254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4251,4254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4424,4427],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4424,4427],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":127,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4574,4577],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4574,4577],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":132,"column":16,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":137,"endColumn":6}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * MCP Server IPC Handlers\n * \n * Handles all IPC communication for the MCP server infrastructure\n */\nimport { ipcMain } from 'electron';\nimport { MCPServerService } from '../../src/services/mcp/server/MCPServerService';\nimport { MCPMarketplace } from '../../src/services/mcp/marketplace/MCPMarketplace';\nimport { MCPIntegration } from '../../src/services/mcp/server/types';\nlet mcpServer: MCPServerService | null = null;\nlet marketplace: MCPMarketplace | null = null;\nexport function registerMCPServerHandlers(): void {\n  // Initialize services\n  mcpServer = new MCPServerService();\n  marketplace = new MCPMarketplace();\n  // Server management\n  ipcMain.handle('mcp:server:start', async () => {\n    if (!mcpServer) {\n      throw new Error('MCP Server not initialized');\n    }\n    return mcpServer.start();\n  });\n  ipcMain.handle('mcp:server:stop', async () => {\n    if (!mcpServer) {\n      throw new Error('MCP Server not initialized');\n    }\n    return mcpServer.stop();\n  });\n  ipcMain.handle('mcp:server:status', async () => {\n    if (!mcpServer) {\n      return { running: false };\n    }\n    return mcpServer.getStatus();\n  });\n  // Integration management\n  ipcMain.handle('mcp:integrations:list', async () => {\n    if (!mcpServer) {\n      return [];\n    }\n    return mcpServer.listIntegrations();\n  });\n  ipcMain.handle('mcp:integrations:register', async (_event, integration: MCPIntegration) => {\n    if (!mcpServer) {\n      throw new Error('MCP Server not initialized');\n    }\n    return mcpServer.registerIntegration(integration);\n  });\n  ipcMain.handle('mcp:integrations:unregister', async (_event, id: string) => {\n    if (!mcpServer) {\n      throw new Error('MCP Server not initialized');\n    }\n    return mcpServer.unregisterIntegration(id);\n  });\n  // Tool execution\n  ipcMain.handle('mcp:tool:execute', async (_event, integrationId: string, tool: string, params: any) => {\n    if (!mcpServer) {\n      throw new Error('MCP Server not initialized');\n    }\n    return mcpServer.executeToolCall(integrationId, tool, params);\n  });\n  ipcMain.handle('mcp:tool:test', async (_event, integrationId: string, tool: string, params: any) => {\n    if (!mcpServer) {\n      throw new Error('MCP Server not initialized');\n    }\n    // Execute with test flag\n    return mcpServer.executeToolCall(integrationId, tool, {\n      ...params,\n      _test: true\n    });\n  });\n  // Marketplace\n  ipcMain.handle('mcp:marketplace:search', async (_event, options: any) => {\n    if (!marketplace) {\n      throw new Error('Marketplace not initialized');\n    }\n    return marketplace.searchIntegrations(options);\n  });\n  ipcMain.handle('mcp:marketplace:getFeatured', async () => {\n    if (!marketplace) {\n      throw new Error('Marketplace not initialized');\n    }\n    return marketplace.getFeaturedIntegrations();\n  });\n  ipcMain.handle('mcp:marketplace:getTrending', async () => {\n    if (!marketplace) {\n      throw new Error('Marketplace not initialized');\n    }\n    return marketplace.getTrendingIntegrations();\n  });\n  ipcMain.handle('mcp:marketplace:getIntegration', async (_event, id: string) => {\n    if (!marketplace) {\n      throw new Error('Marketplace not initialized');\n    }\n    return marketplace.getIntegration(id);\n  });\n  ipcMain.handle('mcp:marketplace:install', async (_event, integrationId: string) => {\n    if (!marketplace || !mcpServer) {\n      throw new Error('Services not initialized');\n    }\n    // Get integration from marketplace\n    const marketplaceIntegration = await marketplace.getIntegration(integrationId);\n    if (!marketplaceIntegration) {\n      throw new Error('Integration not found in marketplace');\n    }\n    // Install to local server\n    const integration = marketplaceIntegration.manifest.integration;\n    const id = await mcpServer.registerIntegration(integration);\n    // Update marketplace stats\n    await marketplace.installIntegration(integrationId, process.env['HOME'] || '');\n    return id;\n  });\n  ipcMain.handle('mcp:marketplace:getCategories', async () => {\n    if (!marketplace) {\n      throw new Error('Marketplace not initialized');\n    }\n    return marketplace.getCategories();\n  });\n  // Event forwarding\n  if (mcpServer) {\n    mcpServer.on('integration:registered', (integration) => {\n      (global as any).mainWindow?.webContents.send('mcp:event:integration:registered', integration);\n    });\n    mcpServer.on('integration:unregistered', (integration) => {\n      (global as any).mainWindow?.webContents.send('mcp:event:integration:unregistered', integration);\n    });\n    mcpServer.on('error', (error) => {\n      (global as any).mainWindow?.webContents.send('mcp:event:error', error);\n    });\n  }\n  // Auto-start server in development\n  if (process.env.NODE_ENV === 'development') {\n    setTimeout(async () => {\n      try {\n        await mcpServer?.start();\n      } catch (error) {\n      }\n    }, 2000);\n  }\n}\n// Export for use in main process\nexport function getMCPServer(): MCPServerService | null {\n  return mcpServer;\n}\nexport function getMCPMarketplace(): MCPMarketplace | null {\n  return marketplace;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/ipc/pipelineHandlers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1891,1894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1891,1894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1972,1975],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1972,1975],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2333,2336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2333,2336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2425,2428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2425,2428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2897,2900],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2897,2900],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":100,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":100,"endColumn":63},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3655,3658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3655,3658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":101,"column":16,"nodeType":"Property","messageId":"anyAssignment","endLine":101,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":110,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":110,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4000,4003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4000,4003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":111,"column":16,"nodeType":"Property","messageId":"anyAssignment","endLine":111,"endColumn":31}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ipcMain } from 'electron';\nimport { PipelineOrchestrator } from '../../src/services/pipeline/PipelineOrchestrator';\nimport { PipelineConfig } from '../../src/services/pipeline/types';\nimport { CredentialManager } from '../../src/lib/security/CredentialManager';\nimport { EmergencyRecoverySystem } from '../../src/services/pipeline/EmergencyRecoverySystem';\nimport { Logger } from '../../src/lib/logging/Logger';\nlet pipelineOrchestrator: PipelineOrchestrator | null = null;\nconst logger = new Logger('PipelineHandlers');\nconst credentialManager = new CredentialManager(logger);\nexport function registerPipelineHandlers(): void {\n  // Initialize pipeline\n  ipcMain.handle('pipeline:initialize', async (_event, config: PipelineConfig) => {\n    try {\n      if (!pipelineOrchestrator) {\n        pipelineOrchestrator = new PipelineOrchestrator(config);\n        await pipelineOrchestrator.start();\n      }\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: (error as Error).message };\n    }\n  });\n  // Get pipeline status\n  ipcMain.handle('pipeline:getStatus', async () => {\n    if (!pipelineOrchestrator) {\n      return {\n        isRunning: false,\n        health: {\n          github: 'disconnected',\n          production: 'healthy',\n          deployment: 'ready',\n        },\n      };\n    }\n    return pipelineOrchestrator.getStatus();\n  });\n  // Stop pipeline\n  ipcMain.handle('pipeline:stop', async () => {\n    try {\n      if (pipelineOrchestrator) {\n        await pipelineOrchestrator.stop();\n        pipelineOrchestrator = null;\n      }\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: (error as Error).message };\n    }\n  });\n  // Configure GitHub credentials\n  ipcMain.handle('pipeline:setGitHubCredentials', async (_event, { token, webhookSecret }) => {\n    try {\n      await (credentialManager as any).setCredential('github_api_token', token);\n      await (credentialManager as any).setCredential('github_webhook_secret', webhookSecret);\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: (error as Error).message };\n    }\n  });\n  // Configure deployment keys\n  ipcMain.handle('pipeline:setDeploymentKeys', async (_event, { signingKey, verifyKey }) => {\n    try {\n      await (credentialManager as any).setCredential('deployment_signing_key', signingKey);\n      await (credentialManager as any).setCredential('deployment_verify_key', verifyKey);\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: (error as Error).message };\n    }\n  });\n  // Manual session creation\n  ipcMain.handle('pipeline:createSession', async (_event, instruction) => {\n    try {\n      if (!pipelineOrchestrator) {\n        throw new Error('Pipeline not initialized');\n      }\n      // Queue the session manually\n      await (pipelineOrchestrator as any).queueSession({\n        ...instruction,\n        sourceType: 'manual',\n        createdAt: new Date(),\n        status: 'pending',\n      });\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: (error as Error).message };\n    }\n  });\n  // Get webhook URL\n  ipcMain.handle('pipeline:getWebhookUrl', async () => {\n    if (!pipelineOrchestrator) {\n      return null;\n    }\n    // Get webhook URL from the receiver\n    // This would need to be exposed through the orchestrator\n    return 'http://localhost:3001/webhook';\n  });\n  // Emergency recovery\n  ipcMain.handle('pipeline:triggerRecovery', async () => {\n    try {\n      const recovery = EmergencyRecoverySystem.getInstance();\n      const result = await (recovery as any).performRecovery();\n      return { success: result };\n    } catch (error) {\n      return { success: false, error: (error as Error).message };\n    }\n  });\n  // Factory reset\n  ipcMain.handle('pipeline:factoryReset', async () => {\n    try {\n      const recovery = EmergencyRecoverySystem.getInstance();\n      const result = await (recovery as any).factoryReset();\n      return { success: result };\n    } catch (error) {\n      return { success: false, error: (error as Error).message };\n    }\n  });\n  // Create recovery checkpoint\n  ipcMain.handle('pipeline:createRecoveryCheckpoint', async () => {\n    try {\n      const recovery = EmergencyRecoverySystem.getInstance();\n      await recovery.createRecoveryCheckpoint();\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: (error as Error).message };\n    }\n  });\n  // Rollback deployment\n  ipcMain.handle('pipeline:rollbackDeployment', async (_event, _version: string) => {\n    try {\n      if (!pipelineOrchestrator) {\n        throw new Error('Pipeline not initialized');\n      }\n      // This would need to be exposed through the orchestrator\n      // await pipelineOrchestrator.rollbackDeployment(version);\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: (error as Error).message };\n    }\n  });\n  // Note: Pipeline event listeners would need to be set up after initialization\n  // and would need access to the webContents to send events\n}\n// Export function to get orchestrator instance (for integration with background.ts)\nexport function getPipelineOrchestrator(): PipelineOrchestrator | null {\n  return pipelineOrchestrator;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/ipc/progressHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/ipc/sessionHandlers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[713,716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[713,716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2844,2847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2844,2847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3148,3151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3148,3151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3433,3436],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3433,3436],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":96,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":96,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3779,3782],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3779,3782],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":101,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":101,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3991,3994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3991,3994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":106,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":106,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4236,4239],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4236,4239],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":111,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":111,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4461,4464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4461,4464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":116,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":116,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":116,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4648,4651],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4648,4651],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ipcMain } from 'electron';\nimport { SessionService, SessionFilter, SessionTemplate } from '@/src/services/SessionService';\nimport { SessionRequest, SessionMetadata } from '@/src/models/Session';\n\nexport function registerSessionHandlers() {\n  const sessionService = SessionService.getInstance();\n\n  // Session CRUD operations\n  ipcMain.handle('session:create', async (_event, request: SessionRequest, metadata: SessionMetadata) => {\n    return sessionService.createSession(request, metadata);\n  });\n\n  ipcMain.handle('session:get', async (_event, sessionId: string) => {\n    return sessionService.getSession(sessionId);\n  });\n\n  ipcMain.handle('session:update', async (_event, sessionId: string, updates: any) => {\n    return sessionService.updateSession(sessionId, updates);\n  });\n\n  ipcMain.handle('session:delete', async (_event, sessionId: string) => {\n    return sessionService.deleteSession(sessionId);\n  });\n\n  // Session search and filtering\n  ipcMain.handle('session:search', async (_event, filter: SessionFilter) => {\n    return sessionService.searchSessions(filter);\n  });\n\n  // Session templates\n  ipcMain.handle('session:createTemplate', async (_event, sessionId: string, templateData: Partial<SessionTemplate>) => {\n    const session = await sessionService.getSession(sessionId);\n    if (!session) {\n      throw new Error('Session not found');\n    }\n    return sessionService.createTemplate(session, templateData);\n  });\n\n  ipcMain.handle('session:getTemplates', async (_event, category?: string, isPublic?: boolean) => {\n    return sessionService.getTemplates(category, isPublic);\n  });\n\n  ipcMain.handle('session:createFromTemplate', async (_event, templateId: string, userId: string, customizations?: Partial<SessionRequest>) => {\n    return sessionService.createSessionFromTemplate(templateId, userId, customizations);\n  });\n\n  // Session analytics\n  ipcMain.handle('session:analytics', async (_event, options: { userId?: string; projectId?: string; dateRange?: { from: Date; to: Date } }) => {\n    return sessionService.getAnalytics(options.userId, options.projectId, options.dateRange);\n  });\n\n  // Export/Import\n  ipcMain.handle('session:export', async (_event, sessionId: string) => {\n    return sessionService.exportSession(sessionId);\n  });\n\n  ipcMain.handle('session:import', async (_event, exportData: string, userId: string) => {\n    return sessionService.importSession(exportData, userId);\n  });\n\n  // Session workflow handoffs\n  ipcMain.handle('session:handoffToPlanning', async (_event, sessionId: string) => {\n    const session = await sessionService.getSession(sessionId);\n    if (!session) {\n      throw new Error('Session not found');\n    }\n    return sessionService.handoffToPlanningActor(session);\n  });\n\n  ipcMain.handle('session:handoffToExecution', async (_event, sessionId: string, instructions: any) => {\n    const session = await sessionService.getSession(sessionId);\n    if (!session) {\n      throw new Error('Session not found');\n    }\n    return sessionService.handoffToExecutionActor(session, instructions);\n  });\n\n  ipcMain.handle('session:complete', async (_event, sessionId: string, result: any) => {\n    const session = await sessionService.getSession(sessionId);\n    if (!session) {\n      throw new Error('Session not found');\n    }\n    return sessionService.completeSession(session, result);\n  });\n\n  ipcMain.handle('session:fail', async (_event, sessionId: string, error: any) => {\n    const session = await sessionService.getSession(sessionId);\n    if (!session) {\n      throw new Error('Session not found');\n    }\n    return sessionService.failSession(session, error);\n  });\n\n  // Git versioning\n  ipcMain.handle('session:getHistory', async (_event, sessionId: string) => {\n    const gitService = (sessionService as any).gitService;\n    return gitService.getSessionHistory(sessionId);\n  });\n\n  ipcMain.handle('session:getVersion', async (_event, sessionId: string, commit: string) => {\n    const gitService = (sessionService as any).gitService;\n    return gitService.getSessionAtVersion(sessionId, commit);\n  });\n\n  ipcMain.handle('session:compareVersions', async (_event, sessionId: string, commit1: string, commit2: string) => {\n    const gitService = (sessionService as any).gitService;\n    return gitService.compareSessionVersions(sessionId, commit1, commit2);\n  });\n\n  ipcMain.handle('session:searchByContent', async (_event, searchTerm: string) => {\n    const gitService = (sessionService as any).gitService;\n    return gitService.searchSessionsByContent(searchTerm);\n  });\n\n  ipcMain.handle('session:getStatistics', async (_event) => {\n    const gitService = (sessionService as any).gitService;\n    return gitService.getSessionStatistics();\n  });\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/ipc/sessionPipelineHandlers.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":25,"column":56,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":25,"endColumn":68},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":30,"column":60,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":30,"endColumn":72},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":35,"column":60,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":35,"endColumn":72},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":52,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":52,"endColumn":23,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[1955,1956],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":57,"column":29,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":57,"endColumn":45,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[2155,2156],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":60,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":60,"endColumn":23,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[2239,2240],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":78,"column":35,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":78,"endColumn":50,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[2744,2745],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":96,"column":28,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":96,"endColumn":43,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[3210,3211],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3570,3573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3570,3573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":112,"column":30,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":112,"endColumn":47,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[3667,3668],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4039,4042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4039,4042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":128,"column":30,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":128,"endColumn":47,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[4138,4139],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":144,"column":23,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":144,"endColumn":39,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[4585,4586],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":160,"column":24,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":160,"endColumn":40,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5026,5027],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":173,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":173,"endColumn":52},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":173,"column":23,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":173,"endColumn":39,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[5419,5420],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":174,"column":31,"nodeType":"Property","messageId":"anyAssignment","endLine":174,"endColumn":38}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ipcMain, IpcMainInvokeEvent } from 'electron';\nimport { Logger } from '@/src/lib/logging/Logger';\nimport { AuditLogger } from '@/src/lib/logging/AuditLogger';\nimport { ClaudeAPIClient } from '@/src/lib/api/ClaudeAPIClient';\nimport { SessionExecutionPipeline, SessionExecutionRequest } from '@/src/services/session/SessionExecutionPipeline';\nimport { DocumentImportService } from '@/src/services/document/DocumentImportService';\nimport { DocumentAnalysisService } from '@/src/services/document/DocumentAnalysisService';\nimport * as path from 'path';\n\nlet sessionPipeline: SessionExecutionPipeline | null = null;\nlet documentImport: DocumentImportService | null = null;\nlet documentAnalysis: DocumentAnalysisService | null = null;\nlet logger: Logger | null = null;\nlet auditLogger: AuditLogger | null = null;\n\n// Progress event emitter map - removed as it's not being used\n\nfunction initializeServices() {\n  if (!logger) {\n    logger = new Logger('SessionPipelineHandlers');\n    auditLogger = new AuditLogger();\n  }\n\n  if (!documentImport) {\n    documentImport = new DocumentImportService(logger, auditLogger!);\n  }\n\n  if (!documentAnalysis) {\n    const claudeClient = new ClaudeAPIClient({ apiKey: process.env['ANTHROPIC_API_KEY'] || '' }, logger);\n    documentAnalysis = new DocumentAnalysisService(logger, auditLogger!, claudeClient);\n  }\n\n  if (!sessionPipeline) {\n    const claudeClient = new ClaudeAPIClient({ apiKey: process.env['ANTHROPIC_API_KEY'] || '' }, logger);\n    sessionPipeline = new SessionExecutionPipeline(logger, auditLogger!, claudeClient);\n  }\n}\n\nexport function registerSessionPipelineHandlers() {\n  initializeServices();\n\n  // Execute a complete session\n  ipcMain.handle('session:execute', async (\n    event: IpcMainInvokeEvent,\n    request: SessionExecutionRequest\n  ) => {\n    try {\n      initializeServices();\n\n      // Subscribe to progress updates\n      const sessionId = `session_${Date.now()}`;\n      sessionPipeline!.subscribeToProgress(sessionId, (progress) => {\n        event.sender.send('session:progress', { sessionId, progress });\n      });\n\n      // Execute session\n      const session = await sessionPipeline!.executeSession(request);\n\n      // Unsubscribe from progress\n      sessionPipeline!.unsubscribeFromProgress(sessionId);\n\n      return { success: true, session };\n    } catch (error) {\n      logger?.error('Session execution failed', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Import documents\n  ipcMain.handle('document:import', async (\n    _event: IpcMainInvokeEvent,\n    filePaths: string[]\n  ) => {\n    try {\n      initializeServices();\n\n      const results = await Promise.all(\n        filePaths.map(filePath => documentImport!.importFromFile(filePath))\n      );\n\n      return { success: true, results };\n    } catch (error) {\n      logger?.error('Document import failed', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Import from Google Docs\n  ipcMain.handle('document:importGoogleDocs', async (\n    _event: IpcMainInvokeEvent,\n    docUrl: string\n  ) => {\n    try {\n      initializeServices();\n\n      const result = await documentImport!.importFromGoogleDocs(docUrl);\n      return { success: true, result };\n    } catch (error) {\n      logger?.error('Google Docs import failed', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Analyze document\n  ipcMain.handle('document:analyze', async (\n    _event: IpcMainInvokeEvent,\n    documentMetadata: any\n  ) => {\n    try {\n      initializeServices();\n\n      const analysis = await documentAnalysis!.analyzeDocument(documentMetadata);\n      return { success: true, analysis };\n    } catch (error) {\n      logger?.error('Document analysis failed', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Analyze multiple documents\n  ipcMain.handle('document:analyzeSet', async (\n    _event: IpcMainInvokeEvent,\n    documents: any[]\n  ) => {\n    try {\n      initializeServices();\n\n      const analysis = await documentAnalysis!.analyzeDocumentSet(documents);\n      return { success: true, analysis };\n    } catch (error) {\n      logger?.error('Document set analysis failed', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Get session by ID\n  ipcMain.handle('session:get', async (\n    _event: IpcMainInvokeEvent,\n    sessionId: string\n  ) => {\n    try {\n      initializeServices();\n\n      const session = sessionPipeline!.getSession(sessionId);\n      return { success: true, session };\n    } catch (error) {\n      logger?.error('Failed to get session', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Get user sessions\n  ipcMain.handle('session:getUserSessions', async (\n    _event: IpcMainInvokeEvent,\n    userId: string\n  ) => {\n    try {\n      initializeServices();\n\n      const sessions = sessionPipeline!.getUserSessions(userId);\n      return { success: true, sessions };\n    } catch (error) {\n      logger?.error('Failed to get user sessions', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // Get pipeline metrics\n  ipcMain.handle('session:getMetrics', async () => {\n    try {\n      initializeServices();\n\n      const metrics = sessionPipeline!.getMetrics();\n      return { success: true, metrics };\n    } catch (error) {\n      logger?.error('Failed to get metrics', error as Error);\n      return { success: false, error: (error as Error).message };\n    }\n  });\n\n  // File dialog for document selection\n  ipcMain.handle('dialog:selectDocuments', async (_event: IpcMainInvokeEvent) => {\n    const { dialog } = await import('electron');\n    \n    const result = await dialog.showOpenDialog({\n      properties: ['openFile', 'multiSelections'],\n      filters: [\n        { name: 'Documents', extensions: ['pdf', 'docx', 'txt', 'md'] },\n        { name: 'Images', extensions: ['png', 'jpg', 'jpeg'] },\n        { name: 'All Files', extensions: ['*'] }\n      ]\n    });\n\n    if (!result.canceled) {\n      return { success: true, filePaths: result.filePaths };\n    }\n    \n    return { success: false, filePaths: [] };\n  });\n\n  // Handle file drop\n  ipcMain.handle('file:getInfo', async (\n    _event: IpcMainInvokeEvent,\n    filePath: string\n  ) => {\n    try {\n      const fs = await import('fs/promises');\n      const stats = await fs.stat(filePath);\n      const fileName = path.basename(filePath);\n      const fileType = path.extname(filePath).toLowerCase().slice(1);\n\n      return {\n        success: true,\n        fileInfo: {\n          name: fileName,\n          type: fileType,\n          size: stats.size,\n          path: filePath\n        }\n      };\n    } catch (error) {\n      return { success: false, error: (error as Error).message };\n    }\n  });\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/ipc/supabaseHandlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/ipc/zedHandlers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2872,2875],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2872,2875],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":206,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":206,"endColumn":72},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":207,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5766,5769],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5766,5769],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":215,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":215,"endColumn":72},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":216,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6040,6043],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6040,6043],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":222,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":222,"endColumn":72},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":223,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6292,6295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6292,6295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":227,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":227,"endColumn":39}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ipcMain, shell } from 'electron';\nimport { ZedAdapter } from '../../src/services/ide/ZedAdapter';\nimport { ZedConnectionManager } from '../../src/services/ide/ZedConnectionManager';\n// import { BaseProjectContext } from '../../src/models/ProjectContext';\n\nlet zedAdapter: ZedAdapter | null = null;\nlet connectionManager: ZedConnectionManager | null = null;\n\nexport function registerZedHandlers() {\n  // Connection Management\n  ipcMain.handle('zed:store-credentials', async (_event, credentials) => {\n    if (!connectionManager) {\n      connectionManager = new ZedConnectionManager();\n    }\n    \n    await connectionManager.initialize(credentials);\n    return { success: true };\n  });\n\n  ipcMain.handle('zed:test-connection', async () => {\n    if (!connectionManager) {\n      connectionManager = new ZedConnectionManager();\n    }\n    \n    return await connectionManager.testConnection();\n  });\n\n  ipcMain.handle('zed:get-connection-health', async () => {\n    if (!connectionManager) {\n      throw new Error('Connection manager not initialized');\n    }\n    \n    return await connectionManager.getConnectionHealth();\n  });\n\n  ipcMain.handle('zed:reconnect', async () => {\n    if (!connectionManager) {\n      throw new Error('Connection manager not initialized');\n    }\n    \n    await connectionManager.connect();\n    return { success: true };\n  });\n\n  // IDE Adapter Operations\n  ipcMain.handle('zed:connect', async () => {\n    if (!zedAdapter) {\n      zedAdapter = new ZedAdapter();\n    }\n    \n    await zedAdapter.connect();\n    return { success: true };\n  });\n\n  ipcMain.handle('zed:disconnect', async () => {\n    if (!zedAdapter) {\n      throw new Error('Zed adapter not initialized');\n    }\n    \n    await zedAdapter.disconnect();\n    return { success: true };\n  });\n\n  ipcMain.handle('zed:open-workspace', async (_event, workspacePath: string) => {\n    if (!zedAdapter) {\n      zedAdapter = new ZedAdapter();\n      await zedAdapter.connect();\n    }\n    \n    await zedAdapter.openWorkspace(workspacePath);\n    return { success: true };\n  });\n\n  ipcMain.handle('zed:get-workspace-info', async () => {\n    if (!zedAdapter) {\n      throw new Error('Zed adapter not initialized');\n    }\n    \n    return await zedAdapter.getActiveWorkspace();\n  });\n\n  ipcMain.handle('zed:open-file', async (_event, filePath: string) => {\n    if (!zedAdapter) {\n      throw new Error('Zed adapter not initialized');\n    }\n    \n    await zedAdapter.openFile(filePath);\n    return { success: true };\n  });\n\n  ipcMain.handle('zed:save-file', async (_event, filePath: string, content: string) => {\n    if (!zedAdapter) {\n      throw new Error('Zed adapter not initialized');\n    }\n    \n    await zedAdapter.saveFile(filePath, content);\n    return { success: true };\n  });\n\n  // Two-Actor Integration\n  ipcMain.handle('zed:send-to-execution', async (_event, instruction: string, context: any) => {\n    if (!zedAdapter) {\n      throw new Error('Zed adapter not initialized');\n    }\n    \n    await zedAdapter.sendToExecutionActor(instruction, context);\n    return { success: true };\n  });\n\n  ipcMain.handle('zed:get-execution-status', async () => {\n    if (!zedAdapter) {\n      throw new Error('Zed adapter not initialized');\n    }\n    \n    return await zedAdapter.getExecutionStatus();\n  });\n\n  ipcMain.handle('zed:get-actor-status', async () => {\n    if (!zedAdapter) {\n      throw new Error('Zed adapter not initialized');\n    }\n    \n    const executionStatus = await zedAdapter.getExecutionStatus();\n    const agentPanelStatus = await zedAdapter.getAgentPanelStatus();\n    \n    return {\n      planning: {\n        active: true, // SessionHub planning is always available\n        currentTask: 'Ready'\n      },\n      execution: {\n        active: executionStatus.active,\n        currentTask: executionStatus.currentTask,\n        agentPanelConnected: agentPanelStatus.connectedToMCP\n      }\n    };\n  });\n\n  ipcMain.handle('zed:sync-actors', async () => {\n    if (!zedAdapter) {\n      throw new Error('Zed adapter not initialized');\n    }\n    \n    // Configure MCP connection for agent panel\n    await zedAdapter.configureAgentPanel({\n      mcpServerUrl: process.env['MCP_SERVER_URL'] || 'http://localhost:3001/mcp',\n      authToken: process.env['SESSIONHUB_API_TOKEN'] || ''\n    });\n    \n    return { success: true };\n  });\n\n  // Git Operations\n  ipcMain.handle('zed:git-status', async () => {\n    if (!zedAdapter) {\n      throw new Error('Zed adapter not initialized');\n    }\n    \n    return await zedAdapter.getGitStatus();\n  });\n\n  ipcMain.handle('zed:stage-files', async (_event, files: string[]) => {\n    if (!zedAdapter) {\n      throw new Error('Zed adapter not initialized');\n    }\n    \n    await zedAdapter.stageFiles(files);\n    return { success: true };\n  });\n\n  ipcMain.handle('zed:commit', async (_event, message: string) => {\n    if (!zedAdapter) {\n      throw new Error('Zed adapter not initialized');\n    }\n    \n    await zedAdapter.commit(message);\n    return { success: true };\n  });\n\n  // Quality Gates\n  ipcMain.handle('zed:run-linter', async () => {\n    if (!zedAdapter) {\n      throw new Error('Zed adapter not initialized');\n    }\n    \n    return await zedAdapter.runLinter();\n  });\n\n  ipcMain.handle('zed:run-typecheck', async () => {\n    if (!zedAdapter) {\n      throw new Error('Zed adapter not initialized');\n    }\n    \n    return await zedAdapter.runTypeCheck();\n  });\n\n  // Utility\n  ipcMain.handle('zed:open-external', async (_event, url: string) => {\n    await shell.openExternal(url);\n    return { success: true };\n  });\n\n  // Forward events from adapters to renderer\n  if (connectionManager) {\n    connectionManager.on('health-check', (health) => {\n      const windows = require('electron').BrowserWindow.getAllWindows();\n      windows.forEach((window: any) => {\n        window.webContents.send('zed:health-update', health);\n      });\n    });\n  }\n\n  if (zedAdapter) {\n    zedAdapter.on('workspace-opened', (workspace) => {\n      const windows = require('electron').BrowserWindow.getAllWindows();\n      windows.forEach((window: any) => {\n        window.webContents.send('zed:workspace-opened', workspace);\n      });\n    });\n\n    zedAdapter.on('execution-sent', (message) => {\n      const windows = require('electron').BrowserWindow.getAllWindows();\n      windows.forEach((window: any) => {\n        window.webContents.send('actor:instruction-sent', {\n          id: Date.now().toString(),\n          type: 'execution',\n          content: message.instruction,\n          timestamp: new Date(),\n          status: 'sent'\n        });\n      });\n    });\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/preload.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":116,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3070,3073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3070,3073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3098,3101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3098,3101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3241,3244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3241,3244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3341,3344],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3341,3344],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":127,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3406,3409],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3406,3409],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":130,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3461,3464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3461,3464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3531,3534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3531,3534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3600,3603],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3600,3603],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3616,3619],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3616,3619],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":137,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3674,3677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3674,3677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3728,3731],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3728,3731],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":139,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3772,3775],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3772,3775],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":139,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3788,3791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3788,3791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3828,3831],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3828,3831],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3846,3849],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3846,3849],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3897,3900],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3897,3900],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3950,3953],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3950,3953],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":143,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3991,3994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3991,3994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":144,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4030,4033],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4030,4033],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4081,4084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4081,4084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":146,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4126,4129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4126,4129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4200,4203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4200,4203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":151,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4372,4375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4372,4375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":152,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4429,4432],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4429,4432],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4497,4500],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4497,4500],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4606,4609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4606,4609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":156,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4669,4672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4669,4672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":157,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4736,4739],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4736,4739],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to property where a void return was expected.","line":230,"column":18,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnProperty","endLine":230,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":233,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7660,7663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7660,7663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":237,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7812,7815],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7812,7815],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":243,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8006,8009],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8006,8009],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to property where a void return was expected.","line":247,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnProperty","endLine":248,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":247,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8115,8118],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8115,8118],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":251,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8237,8240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8237,8240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":254,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8522,8525],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8522,8525],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":255,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8622,8625],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8622,8625],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":261,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":261,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9125,9128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9125,9128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":264,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":264,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9274,9277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9274,9277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":272,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":272,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9541,9544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9541,9544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":275,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":275,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9669,9672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9669,9672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":278,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":278,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9807,9810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9807,9810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":284,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":284,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10049,10052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10049,10052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":287,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":287,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10187,10190],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10187,10190],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":290,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":290,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10330,10333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10330,10333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":318,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":318,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11493,11496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11493,11496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":359,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":359,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13151,13154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13151,13154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":362,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":362,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13436,13439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13436,13439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":363,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":363,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13536,13539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13536,13539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":369,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14039,14042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14039,14042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":372,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":372,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14188,14191],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14188,14191],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":385,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":385,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14668,14671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14668,14671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":391,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":391,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14940,14943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14940,14943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":393,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":393,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15084,15087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15084,15087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":398,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":398,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15232,15235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15232,15235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":407,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":407,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15807,15810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15807,15810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":410,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":410,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15995,15998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15995,15998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":413,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":413,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16161,16164],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16161,16164],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":448,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":448,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17679,17682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17679,17682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":486,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":486,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19494,19497],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19494,19497],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":512,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":512,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20496,20499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20496,20499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":515,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":515,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20612,20615],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20612,20615],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":62,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Electron Preload Script\n * Provides secure bridge between main process and renderer\n */\n\nimport { contextBridge, ipcRenderer } from \"electron\";\n\n// Define the API interface\ninterface SessionHubAPI {\n  // System operations\n  getSystemHealth: () => Promise<{\n    status: string;\n    uptime: number;\n    timestamp: string;\n    checks: Array<{ name: string; status: string; message: string }>;\n  }>;\n  getSelfDevelopmentStatus: () => Promise<{\n    operational: boolean;\n    message: string;\n  }>;\n  getProductionMetrics: () => Promise<{\n    uptime: number;\n    memory: NodeJS.MemoryUsage;\n    timestamp: string;\n  }>;\n  triggerTestIssue: () => Promise<{ success: boolean; message: string }>;\n\n  // Session management\n  createNewSession: () => void;\n\n  // API Configuration\n  checkApiKey: () => Promise<boolean>;\n  validateApiKey: (apiKey: string) => Promise<boolean>;\n  saveApiKey: (apiKey: string) => Promise<void>;\n\n  // Chat functionality\n  sendChatMessage: (sessionId: string, message: string) => Promise<string>;\n\n  // GitHub integration\n  selectGitHubRepo: () => Promise<{\n    url: string;\n    name: string;\n    owner: string;\n    defaultBranch: string;\n  } | null>;\n  analyzeRepository: (\n    sessionId: string,\n    repoInfo: {\n      url: string;\n      name: string;\n      owner: string;\n      defaultBranch: string;\n    }\n  ) => Promise<string>;\n\n  // Supabase operations\n  configureSupabase: (config: {\n    url: string;\n    anonKey: string;\n    serviceKey?: string;\n  }) => Promise<{ success: boolean; error?: string }>;\n  checkSupabaseConnection: () => Promise<{\n    isConnected: boolean;\n    isInitialized: boolean;\n    error?: string;\n  }>;\n  getSupabaseConfig: () => Promise<{\n    hasConfig: boolean;\n    url?: string;\n    hasServiceKey?: boolean;\n    error?: string;\n  }>;\n  initSupabase: () => Promise<{ success: boolean; error?: string }>;\n  createProject: (project: {\n    name: string;\n    path: string;\n    type: string;\n    metadata?: Record<string, unknown>;\n  }) => Promise<{ success: boolean; project?: unknown; error?: string }>;\n  getProjects: () => Promise<{\n    success: boolean;\n    projects: unknown[];\n    error?: string;\n  }>;\n  createSession: (session: {\n    user_id: string;\n    project_id: string;\n    title?: string;\n    description?: string;\n    metadata?: Record<string, unknown>;\n  }) => Promise<{ success: boolean; session?: unknown; error?: string }>;\n  updateSessionStatus: (\n    sessionId: string,\n    status: string\n  ) => Promise<{ success: boolean; session?: unknown; error?: string }>;\n  getActiveSessions: () => Promise<{\n    success: boolean;\n    sessions: unknown[];\n    error?: string;\n  }>;\n  getSessionStats: (\n    sessionId?: string\n  ) => Promise<{ success: boolean; stats: unknown[]; error?: string }>;\n\n  // Event listeners\n  onNewSession: (callback: () => void) => void;\n  removeAllListeners: (channel: string) => void;\n\n  // Auto-updater\n  checkForUpdates: () => Promise<{\n    checking: boolean;\n    available: boolean;\n    downloading: boolean;\n    downloaded: boolean;\n    error: Error | null;\n    progress: any | null;\n    updateInfo: any | null;\n  }>;\n  downloadUpdate: () => Promise<void>;\n  installUpdate: () => void;\n\n  // File associations\n  saveProjectFile: (projectData: any, savePath?: string) => Promise<string>;\n\n  // Preferences\n  setPreference: (key: string, value: any) => Promise<void>;\n  getPreference: (key: string) => Promise<any>;\n\n  // Session state\n  saveSession: (sessionData: any) => Promise<void>;\n\n  // Menu bar\n  updateMenuBarStatus: (status: any) => void;\n\n  // Session Pipeline API\n  executeSession: (request: any) => Promise<any>;\n  importDocuments: (filePaths: string[]) => Promise<any>;\n  importGoogleDocs: (docUrl: string) => Promise<any>;\n  analyzeDocument: (documentMetadata: any) => Promise<any>;\n  analyzeDocumentSet: (documents: any[]) => Promise<any>;\n  getSession: (sessionId: string) => Promise<any>;\n  getUserSessions: (userId: string) => Promise<any>;\n  getSessionMetrics: () => Promise<any>;\n  selectDocuments: () => Promise<any>;\n  getFileInfo: (filePath: string) => Promise<any>;\n  onSessionProgress: (callback: (data: any) => void) => void;\n  removeSessionProgressListener: (callback: (data: any) => void) => void;\n\n  // Event handlers for navigation and file operations\n  onNavigate: (callback: (path: string) => void) => void;\n  onOpenProject: (callback: (data: any) => void) => void;\n  onFileOpened: (callback: (data: any) => void) => void;\n  onRestoreSession: (callback: (sessionData: any) => void) => void;\n  onForceSync: (callback: () => void) => void;\n  onUpdateAvailable: (callback: (info: any) => void) => void;\n  onUpdateDownloaded: (callback: (info: any) => void) => void;\n  onDownloadProgress: (callback: (progress: any) => void) => void;\n}\n\n// Expose protected methods that allow the renderer process to use\n// the ipcRenderer without exposing the entire object\ncontextBridge.exposeInMainWorld(\"sessionhub\", {\n  // System health and monitoring\n  getSystemHealth: () => ipcRenderer.invoke(\"get-system-health\"),\n  getSelfDevelopmentStatus: () => ipcRenderer.invoke(\"get-self-development-status\"),\n  getProductionMetrics: () => ipcRenderer.invoke(\"get-production-metrics\"),\n  triggerTestIssue: () => ipcRenderer.invoke(\"trigger-test-issue\"),\n\n  // Session management\n  createNewSession: () => ipcRenderer.send(\"new-session\"),\n\n  // API Configuration\n  checkApiKey: () => ipcRenderer.invoke(\"check-api-key\"),\n  validateApiKey: (apiKey: string) => ipcRenderer.invoke(\"validate-api-key\", apiKey),\n  saveApiKey: (apiKey: string) => ipcRenderer.invoke(\"save-api-key\", apiKey),\n\n  // Chat functionality\n  sendChatMessage: (sessionId: string, message: string) => ipcRenderer.invoke(\"send-chat-message\", sessionId, message),\n\n  // GitHub integration\n  selectGitHubRepo: () => ipcRenderer.invoke(\"select-github-repo\"),\n  analyzeRepository: (sessionId: string,\n    repoInfo: {\n      url: string;\n      name: string;\n      owner: string;\n      defaultBranch: string;\n    },\n  ) => ipcRenderer.invoke(\"analyze-repository\", sessionId, repoInfo),\n\n  // Supabase operations\n  configureSupabase: (config: {\n    url: string;\n    anonKey: string;\n    serviceKey?: string;\n  }) => ipcRenderer.invoke(\"configure-supabase\", config),\n  checkSupabaseConnection: () => ipcRenderer.invoke(\"check-supabase-connection\"),\n  getSupabaseConfig: () => ipcRenderer.invoke(\"get-supabase-config\"),\n  initSupabase: () => ipcRenderer.invoke(\"init-supabase\"),\n  createProject: (project: {\n    name: string;\n    path: string;\n    type: string;\n    metadata?: Record<string, unknown>;\n  }) => ipcRenderer.invoke(\"create-project\", project),\n  getProjects: () => ipcRenderer.invoke(\"get-projects\"),\n  createSession: (session: {\n    user_id: string;\n    project_id: string;\n    title?: string;\n    description?: string;\n    metadata?: Record<string, unknown>;\n  }) => ipcRenderer.invoke(\"create-session\", session),\n  updateSessionStatus: (sessionId: string, status: string) => ipcRenderer.invoke(\"update-session-status\", sessionId, status),\n  getActiveSessions: () => ipcRenderer.invoke(\"get-active-sessions\"),\n  getSessionStats: (sessionId?: string) => ipcRenderer.invoke(\"get-session-stats\", sessionId),\n\n  // Event listeners\n  onNewSession: (callback: () => void) => {\n    ipcRenderer.on(\"new-session\", callback);\n  },\n\n  removeAllListeners: (channel: string) => {\n    ipcRenderer.removeAllListeners(channel);\n  },\n\n  // Auto-updater\n  checkForUpdates: () => ipcRenderer.invoke(\"check-for-updates\"),\n  downloadUpdate: () => ipcRenderer.invoke(\"download-update\"),\n  installUpdate: () => ipcRenderer.invoke(\"install-update\"),\n\n  // File associations\n  saveProjectFile: (projectData: any, savePath?: string) => \n    ipcRenderer.invoke(\"save-project-file\", projectData, savePath),\n\n  // Preferences\n  setPreference: (key: string, value: any) => \n    ipcRenderer.invoke(\"set-preference\", key, value),\n  getPreference: (key: string) => \n    ipcRenderer.invoke(\"get-preference\", key),\n\n  // Session state\n  saveSession: (sessionData: any) => \n    ipcRenderer.invoke(\"save-session\", sessionData),\n\n  // Menu bar\n  updateMenuBarStatus: (status: any) => \n    ipcRenderer.invoke(\"update-menu-bar-status\", status),\n\n  // Session Pipeline API\n  executeSession: (request: any) => ipcRenderer.invoke(\"session:execute\", request),\n  importDocuments: (filePaths: string[]) => ipcRenderer.invoke(\"document:import\", filePaths),\n  importGoogleDocs: (docUrl: string) => ipcRenderer.invoke(\"document:importGoogleDocs\", docUrl),\n  analyzeDocument: (documentMetadata: any) => ipcRenderer.invoke(\"document:analyze\", documentMetadata),\n  analyzeDocumentSet: (documents: any[]) => ipcRenderer.invoke(\"document:analyzeSet\", documents),\n  getSession: (sessionId: string) => ipcRenderer.invoke(\"session:get\", sessionId),\n  getUserSessions: (userId: string) => ipcRenderer.invoke(\"session:getUserSessions\", userId),\n  getSessionMetrics: () => ipcRenderer.invoke(\"session:getMetrics\"),\n  selectDocuments: () => ipcRenderer.invoke(\"dialog:selectDocuments\"),\n  getFileInfo: (filePath: string) => ipcRenderer.invoke(\"file:getInfo\", filePath),\n  onSessionProgress: (callback: (data: any) => void) => {\n    ipcRenderer.on(\"session:progress\", (_event, data) => callback(data));\n  },\n  removeSessionProgressListener: (callback: (data: any) => void) => {\n    ipcRenderer.removeListener(\"session:progress\", callback);\n  },\n\n  // Event handlers\n  onNavigate: (callback: (path: string) => void) => {\n    ipcRenderer.on(\"navigate\", (_event, path) => callback(path));\n  },\n  onOpenProject: (callback: (data: any) => void) => {\n    ipcRenderer.on(\"open-project\", (_event, data) => callback(data));\n  },\n  onFileOpened: (callback: (data: any) => void) => {\n    ipcRenderer.on(\"file-opened\", (_event, data) => callback(data));\n  },\n  onRestoreSession: (callback: (sessionData: any) => void) => {\n    ipcRenderer.on(\"restore-session\", (_event, sessionData) => callback(sessionData));\n  },\n  onForceSync: (callback: () => void) => {\n    ipcRenderer.on(\"force-sync\", callback);\n  },\n  onUpdateAvailable: (callback: (info: any) => void) => {\n    ipcRenderer.on(\"update-available\", (_event, info) => callback(info));\n  },\n  onUpdateDownloaded: (callback: (info: any) => void) => {\n    ipcRenderer.on(\"update-downloaded\", (_event, info) => callback(info));\n  },\n  onDownloadProgress: (callback: (progress: any) => void) => {\n    ipcRenderer.on(\"download-progress\", (_event, progress) => callback(progress));\n  },\n\n  // Context Management API\n  analyzeProjectContext: (projectId: string, projectPath: string) => \n    ipcRenderer.invoke(\"analyze-project-context\", projectId, projectPath),\n  getProjectContext: (projectId: string) => \n    ipcRenderer.invoke(\"get-project-context\", projectId),\n  searchSimilarContexts: (projectId: string, limit?: number) => \n    ipcRenderer.invoke(\"search-similar-contexts\", projectId, limit),\n  getPatterns: (projectId?: string) => \n    ipcRenderer.invoke(\"get-patterns\", projectId),\n  learnPattern: (pattern: {\n    type: string;\n    pattern: string;\n    example: string;\n    projectId: string;\n  }) => ipcRenderer.invoke(\"learn-pattern\", pattern),\n  refreshContextCache: (projectId: string) => \n    ipcRenderer.invoke(\"refresh-context-cache\", projectId),\n} as SessionHubAPI);\n\n// Also expose electronAPI for compatibility\ncontextBridge.exposeInMainWorld(\"electronAPI\", {\n  // Claude Auto-Accept API\n  claude: {\n    getAutoAcceptSettings: () => ipcRenderer.invoke('claude:get-auto-accept-settings'),\n    setAutoAcceptSettings: (settings: any) => ipcRenderer.invoke('claude:set-auto-accept-settings', settings),\n    enableForSession: (sessionId: string) => ipcRenderer.invoke('claude:enable-for-session', sessionId),\n  },\n  \n  // API Configuration\n  checkApiKey: () => ipcRenderer.invoke(\"check-api-key\"),\n  validateApiKey: (apiKey: string) => ipcRenderer.invoke(\"validate-api-key\", apiKey),\n  saveApiKey: (apiKey: string) => ipcRenderer.invoke(\"save-api-key\", apiKey),\n\n  // Chat functionality\n  sendChatMessage: (sessionId: string, message: string) => ipcRenderer.invoke(\"send-chat-message\", sessionId, message),\n\n  // GitHub integration\n  selectGitHubRepo: () => ipcRenderer.invoke(\"select-github-repo\"),\n  analyzeRepository: (sessionId: string,\n    repoInfo: {\n      url: string;\n      name: string;\n      owner: string;\n      defaultBranch: string;\n    },\n  ) => ipcRenderer.invoke(\"analyze-repository\", sessionId, repoInfo),\n\n  // Supabase operations (also available via electronAPI for compatibility)\n  configureSupabase: (config: {\n    url: string;\n    anonKey: string;\n    serviceKey?: string;\n  }) => ipcRenderer.invoke(\"configure-supabase\", config),\n  checkSupabaseConnection: () => ipcRenderer.invoke(\"check-supabase-connection\"),\n  getSupabaseConfig: () => ipcRenderer.invoke(\"get-supabase-config\"),\n  initSupabase: () => ipcRenderer.invoke(\"init-supabase\"),\n  createProject: (project: {\n    name: string;\n    path: string;\n    type: string;\n    metadata?: Record<string, unknown>;\n  }) => ipcRenderer.invoke(\"create-project\", project),\n  getProjects: () => ipcRenderer.invoke(\"get-projects\"),\n  \n  // Session Pipeline API (also available via electronAPI)\n  executeSession: (request: any) => ipcRenderer.invoke(\"session:execute\", request),\n  importDocuments: (filePaths: string[]) => ipcRenderer.invoke(\"document:import\", filePaths),\n  importGoogleDocs: (docUrl: string) => ipcRenderer.invoke(\"document:importGoogleDocs\", docUrl),\n  analyzeDocument: (documentMetadata: any) => ipcRenderer.invoke(\"document:analyze\", documentMetadata),\n  analyzeDocumentSet: (documents: any[]) => ipcRenderer.invoke(\"document:analyzeSet\", documents),\n  getSession: (sessionId: string) => ipcRenderer.invoke(\"session:get\", sessionId),\n  getUserSessions: (userId: string) => ipcRenderer.invoke(\"session:getUserSessions\", userId),\n  getSessionMetrics: () => ipcRenderer.invoke(\"session:getMetrics\"),\n  selectDocuments: () => ipcRenderer.invoke(\"dialog:selectDocuments\"),\n  getFileInfo: (filePath: string) => ipcRenderer.invoke(\"file:getInfo\", filePath),\n  onSessionProgress: (callback: (data: any) => void) => {\n    ipcRenderer.on(\"session:progress\", (_event, data) => callback(data));\n  },\n  removeSessionProgressListener: (callback: (data: any) => void) => {\n    ipcRenderer.removeListener(\"session:progress\", callback);\n  },\n\n  // MCP Server API\n  mcp: {\n    // Server management\n    startServer: () => ipcRenderer.invoke(\"mcp:server:start\"),\n    stopServer: () => ipcRenderer.invoke(\"mcp:server:stop\"),\n    getServerStatus: () => ipcRenderer.invoke(\"mcp:server:status\"),\n    \n    // Integration management\n    listIntegrations: () => ipcRenderer.invoke(\"mcp:integrations:list\"),\n    registerIntegration: (integration: any) => \n      ipcRenderer.invoke(\"mcp:integrations:register\", integration),\n    unregisterIntegration: (id: string) => \n      ipcRenderer.invoke(\"mcp:integrations:unregister\", id),\n    \n    // Tool execution\n    executeTool: (integrationId: string, tool: string, params: any) => \n      ipcRenderer.invoke(\"mcp:tool:execute\", integrationId, tool, params),\n    testTool: (integrationId: string, tool: string, params: any) => \n      ipcRenderer.invoke(\"mcp:tool:test\", integrationId, tool, params),\n    \n    // Marketplace\n    marketplace: {\n      search: (options: any) => ipcRenderer.invoke(\"mcp:marketplace:search\", options),\n      getFeatured: () => ipcRenderer.invoke(\"mcp:marketplace:getFeatured\"),\n      getTrending: () => ipcRenderer.invoke(\"mcp:marketplace:getTrending\"),\n      getIntegration: (id: string) => ipcRenderer.invoke(\"mcp:marketplace:getIntegration\", id),\n      install: (integrationId: string) => ipcRenderer.invoke(\"mcp:marketplace:install\", integrationId),\n      getCategories: () => ipcRenderer.invoke(\"mcp:marketplace:getCategories\"),\n    },\n    \n    // Events\n    onIntegrationRegistered: (callback: (integration: any) => void) => {\n      ipcRenderer.on(\"mcp:event:integration:registered\", (_event, integration) => callback(integration));\n    },\n    onIntegrationUnregistered: (callback: (integration: any) => void) => {\n      ipcRenderer.on(\"mcp:event:integration:unregistered\", (_event, integration) => callback(integration));\n    },\n    onError: (callback: (error: any) => void) => {\n      ipcRenderer.on(\"mcp:event:error\", (_event, error) => callback(error));\n    },\n  },\n});\n\n// Expose electron API for session progress\ncontextBridge.exposeInMainWorld(\"electron\", {\n  onSessionProgress: (callback: () => void) => {\n    return new Promise<() => void>((resolve) => {\n      ipcRenderer.on(\"session-progress\", callback);\n      resolve(() => ipcRenderer.removeAllListeners(\"session-progress\"));\n    });\n  },\n  getSessionStatus: (sessionId: string) => ipcRenderer.invoke(\"get-session-status\", sessionId),\n  \n  // Figma MCP Integration\n  figma: {\n    checkConnection: () => ipcRenderer.invoke(\"figma:check-connection\"),\n    getApiKey: () => ipcRenderer.invoke(\"figma:get-api-key\"),\n    initialize: (apiKey: string) => ipcRenderer.invoke(\"figma:initialize\", apiKey),\n    \n    // SessionHub UI Update\n    startSessionHubUIUpdate: (figmaFileKey: string) => \n      ipcRenderer.invoke(\"figma:start-sessionhub-ui-update\", figmaFileKey),\n    getUpdateStatus: (sessionId: string) => \n      ipcRenderer.invoke(\"figma:get-update-status\", sessionId),\n    previewUIChanges: (figmaFileKey: string) => \n      ipcRenderer.invoke(\"figma:preview-ui-changes\", figmaFileKey),\n    createUIPullRequest: (figmaFileKey: string, description: string) => \n      ipcRenderer.invoke(\"figma:create-ui-pull-request\", figmaFileKey, description),\n    applyUIChanges: (sessionId: string) => \n      ipcRenderer.invoke(\"figma:apply-ui-changes\", sessionId),\n    \n    // Project UI Enhancement\n    registerProject: (project: any) => \n      ipcRenderer.invoke(\"figma:register-project\", project),\n    startProjectUIUpdate: (projectId: string, figmaFileKey: string) => \n      ipcRenderer.invoke(\"figma:start-project-ui-update\", projectId, figmaFileKey),\n    getEnhancementStatus: (sessionId: string) => \n      ipcRenderer.invoke(\"figma:get-enhancement-status\", sessionId),\n    mergeUIChanges: (sessionId: string) => \n      ipcRenderer.invoke(\"figma:merge-ui-changes\", sessionId),\n    getFigmaEnabledProjects: () => \n      ipcRenderer.invoke(\"figma:get-figma-enabled-projects\"),\n    \n    // Watch and Components\n    watchFile: (figmaFileKey: string) => \n      ipcRenderer.invoke(\"figma:watch-file\", figmaFileKey),\n    getComponentsNeedingUpdate: () => \n      ipcRenderer.invoke(\"figma:get-components-needing-update\"),\n  },\n\n  // Zed IDE Integration\n  zed: {\n    // Connection Management\n    storeCredentials: (credentials: { email: string; apiToken: string }) =>\n      ipcRenderer.invoke(\"zed:store-credentials\", credentials),\n    testConnection: () => ipcRenderer.invoke(\"zed:test-connection\"),\n    getConnectionHealth: () => ipcRenderer.invoke(\"zed:get-connection-health\"),\n    reconnect: () => ipcRenderer.invoke(\"zed:reconnect\"),\n    \n    // IDE Operations\n    connect: () => ipcRenderer.invoke(\"zed:connect\"),\n    disconnect: () => ipcRenderer.invoke(\"zed:disconnect\"),\n    openWorkspace: (workspacePath: string) => \n      ipcRenderer.invoke(\"zed:open-workspace\", workspacePath),\n    getWorkspaceInfo: () => ipcRenderer.invoke(\"zed:get-workspace-info\"),\n    openFile: (filePath: string) => ipcRenderer.invoke(\"zed:open-file\", filePath),\n    saveFile: (filePath: string, content: string) => \n      ipcRenderer.invoke(\"zed:save-file\", filePath, content),\n    \n    // Two-Actor Integration\n    sendToExecution: (instruction: string, context: any) =>\n      ipcRenderer.invoke(\"zed:send-to-execution\", instruction, context),\n    getExecutionStatus: () => ipcRenderer.invoke(\"zed:get-execution-status\"),\n    getActorStatus: () => ipcRenderer.invoke(\"zed:get-actor-status\"),\n    syncActors: () => ipcRenderer.invoke(\"zed:sync-actors\"),\n    \n    // Git Operations\n    getGitStatus: () => ipcRenderer.invoke(\"zed:git-status\"),\n    stageFiles: (files: string[]) => ipcRenderer.invoke(\"zed:stage-files\", files),\n    commit: (message: string) => ipcRenderer.invoke(\"zed:commit\", message),\n    \n    // Quality Gates\n    runLinter: () => ipcRenderer.invoke(\"zed:run-linter\"),\n    runTypeCheck: () => ipcRenderer.invoke(\"zed:run-typecheck\"),\n    \n    // Utility\n    openExternal: (url: string) => ipcRenderer.invoke(\"zed:open-external\", url),\n  },\n  \n  // Shell operations\n  shell: {\n    openExternal: (url: string) => ipcRenderer.invoke(\"zed:open-external\", url),\n  },\n  \n  // Generic API operations\n  api: {\n    on: (channel: string, callback: (...args: any[]) => void) => {\n      ipcRenderer.on(channel, callback);\n    },\n    off: (channel: string, callback: (...args: any[]) => void) => {\n      ipcRenderer.removeListener(channel, callback);\n    },\n    showNotification: (options: { title: string; body: string; type?: string }) => {\n      ipcRenderer.send(\"show-notification\", options);\n    },\n  },\n  \n  // Project operations (needed by ZedProjectSwitcher)\n  projects: {\n    list: () => ipcRenderer.invoke(\"get-projects\"),\n  },\n});\n\n// Export empty object to make this a module\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/services/AppLifecycleService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[400,403],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[400,403],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3170,3173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3170,3173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":127,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":127,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3343,3346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3343,3346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":175,"column":11,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":175,"endColumn":27,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4332,4332],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":193,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":199,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":264,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":264,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":267,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":267,"endColumn":37}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * App Lifecycle Service\n * Manages application lifecycle, state persistence, and crash recovery\n */\n\nimport { app, BrowserWindow, crashReporter, powerMonitor } from 'electron';\nimport * as path from 'path';\nimport * as fs from 'fs/promises';\nimport { EventEmitter } from 'events';\n\ninterface AppState {\n  windows: WindowState[];\n  lastSession: SessionState | null;\n  preferences: Record<string, any>;\n  crashCount: number;\n  lastCrashTime: number | null;\n}\n\ninterface WindowState {\n  id: string;\n  bounds: Electron.Rectangle;\n  isMaximized: boolean;\n  isFullScreen: boolean;\n  url: string;\n}\n\ninterface SessionState {\n  id: string;\n  projectPath: string;\n  activeFiles: string[];\n  timestamp: number;\n}\n\nexport class AppLifecycleService extends EventEmitter {\n  private appState: AppState = {\n    windows: [],\n    lastSession: null,\n    preferences: {},\n    crashCount: 0,\n    lastCrashTime: null\n  };\n\n  private statePath: string;\n  private saveStateInterval: NodeJS.Timeout | null = null;\n  private isQuitting = false;\n  private windows = new Map<number, BrowserWindow>();\n\n  constructor() {\n    super();\n    this.statePath = path.join(app.getPath('userData'), 'app-state.json');\n    this.setupLifecycleHandlers();\n    this.setupCrashReporter();\n    this.setupPowerMonitor();\n  }\n\n  /**\n   * Initialize the lifecycle service\n   */\n  public async initialize(): Promise<void> {\n    // Load previous state\n    await this.loadState();\n\n    // Check for crash recovery\n    if (this.shouldRecoverFromCrash()) {\n      this.emit('crash-recovery-needed', this.appState.lastSession);\n    }\n\n    // Start periodic state saving\n    this.startStateSaving();\n\n    // Set up auto-launch if enabled\n    await this.setupAutoLaunch();\n  }\n\n  /**\n   * Register a window for lifecycle management\n   */\n  public registerWindow(window: BrowserWindow): void {\n    const id = window.id;\n    this.windows.set(id, window);\n\n    // Track window state changes\n    window.on('resize', () => this.saveWindowState(window));\n    window.on('move', () => this.saveWindowState(window));\n    window.on('maximize', () => this.saveWindowState(window));\n    window.on('unmaximize', () => this.saveWindowState(window));\n    window.on('enter-full-screen', () => this.saveWindowState(window));\n    window.on('leave-full-screen', () => this.saveWindowState(window));\n\n    // Handle window close\n    window.on('close', (event) => {\n      if (!this.isQuitting && process.platform === 'darwin') {\n        event.preventDefault();\n        window.hide();\n        // Keep app running in background\n        app.dock.hide();\n      }\n    });\n\n    window.on('closed', () => {\n      this.windows.delete(id);\n    });\n\n    // Save initial state\n    this.saveWindowState(window);\n  }\n\n  /**\n   * Save current session state\n   */\n  public async saveSession(session: SessionState): Promise<void> {\n    this.appState.lastSession = session;\n    await this.saveState();\n  }\n\n  /**\n   * Get saved window state\n   */\n  public getWindowState(id: string): WindowState | undefined {\n    return this.appState.windows.find(w => w.id === id);\n  }\n\n  /**\n   * Set user preference\n   */\n  public async setPreference(key: string, value: any): Promise<void> {\n    this.appState.preferences[key] = value;\n    await this.saveState();\n  }\n\n  /**\n   * Get user preference\n   */\n  public getPreference(key: string): any {\n    return this.appState.preferences[key];\n  }\n\n  /**\n   * Prepare for app quit\n   */\n  public async prepareForQuit(): Promise<void> {\n    this.isQuitting = true;\n    \n    // Save final state\n    await this.saveState();\n    \n    // Clean up\n    if (this.saveStateInterval) {\n      clearInterval(this.saveStateInterval);\n      this.saveStateInterval = null;\n    }\n  }\n\n  /**\n   * Clean up resources\n   */\n  public destroy(): void {\n    if (this.saveStateInterval) {\n      clearInterval(this.saveStateInterval);\n      this.saveStateInterval = null;\n    }\n    this.removeAllListeners();\n  }\n\n  private setupLifecycleHandlers(): void {\n    // Handle app activation (macOS)\n    app.on('activate', () => {\n      if (this.windows.size === 0) {\n        this.emit('should-create-window');\n      } else {\n        // Show first window\n        const firstWindow = this.windows.values().next().value;\n        if (firstWindow && !firstWindow.isVisible()) {\n          firstWindow.show();\n          app.dock.show();\n        }\n      }\n    });\n\n    // Handle open file (macOS)\n    app.on('open-file', (event, filePath) => {\n      event.preventDefault();\n      this.emit('open-file', filePath);\n    });\n\n    // Handle open URL (deep linking)\n    app.on('open-url', (event, url) => {\n      event.preventDefault();\n      this.emit('open-url', url);\n    });\n\n    // Handle before quit\n    app.on('before-quit', async (event) => {\n      if (!this.isQuitting) {\n        event.preventDefault();\n        await this.prepareForQuit();\n        app.quit();\n      }\n    });\n\n    // Handle will quit\n    app.on('will-quit', (event) => {\n      if (!this.isQuitting) {\n        event.preventDefault();\n      }\n    });\n\n    // Handle window all closed\n    app.on('window-all-closed', () => {\n      if (process.platform !== 'darwin') {\n        app.quit();\n      }\n    });\n  }\n\n  private setupCrashReporter(): void {\n    crashReporter.start({\n      productName: 'SessionHub',\n      companyName: 'SessionHub',\n      submitURL: 'https://crash.sessionhub.com/submit',\n      uploadToServer: false, // For now, store locally\n      ignoreSystemCrashHandler: true,\n      compress: true,\n      extra: {\n        version: app.getVersion(),\n        platform: process.platform,\n        arch: process.arch\n      }\n    });\n  }\n\n  private setupPowerMonitor(): void {\n    // Monitor power events for energy efficiency\n    powerMonitor.on('suspend', () => {\n      this.emit('system-suspend');\n      // Pause background operations\n    });\n\n    powerMonitor.on('resume', () => {\n      this.emit('system-resume');\n      // Resume background operations\n    });\n\n    powerMonitor.on('on-battery', () => {\n      this.emit('on-battery');\n      // Reduce background activity\n    });\n\n    powerMonitor.on('on-ac', () => {\n      this.emit('on-ac');\n      // Resume normal activity\n    });\n\n    // Monitor idle time\n    setInterval(() => {\n      const idleTime = powerMonitor.getSystemIdleTime();\n      if (idleTime > 300) { // 5 minutes\n        this.emit('system-idle', idleTime);\n      }\n    }, 60000); // Check every minute\n  }\n\n  private async setupAutoLaunch(): Promise<void> {\n    const autoLaunchEnabled = this.appState.preferences['autoLaunch'] ?? false;\n    \n    app.setLoginItemSettings({\n      openAtLogin: autoLaunchEnabled,\n      openAsHidden: true,\n      args: ['--hidden']\n    });\n  }\n\n  private saveWindowState(window: BrowserWindow): void {\n    const bounds = window.getBounds();\n    const state: WindowState = {\n      id: window.id.toString(),\n      bounds,\n      isMaximized: window.isMaximized(),\n      isFullScreen: window.isFullScreen(),\n      url: window.webContents.getURL()\n    };\n\n    // Update or add window state\n    const index = this.appState.windows.findIndex(w => w.id === state.id);\n    if (index >= 0) {\n      this.appState.windows[index] = state;\n    } else {\n      this.appState.windows.push(state);\n    }\n  }\n\n  private startStateSaving(): void {\n    // Save state every 30 seconds\n    this.saveStateInterval = setInterval(() => {\n      this.saveState().catch(() => {\n        // Handle save error silently\n      });\n    }, 30000);\n  }\n\n  private async loadState(): Promise<void> {\n    try {\n      const data = await fs.readFile(this.statePath, 'utf-8');\n      const savedState = JSON.parse(data) as AppState;\n      \n      // Merge with default state\n      this.appState = {\n        ...this.appState,\n        ...savedState,\n        crashCount: savedState.crashCount || 0,\n        lastCrashTime: savedState.lastCrashTime || null\n      };\n    } catch (error) {\n      // No saved state or error reading - use defaults\n    }\n  }\n\n  private async saveState(): Promise<void> {\n    try {\n      // Clean up window states for closed windows\n      this.appState.windows = this.appState.windows.filter(w => \n        Array.from(this.windows.keys()).includes(parseInt(w.id))\n      );\n      \n      const data = JSON.stringify(this.appState, null, 2);\n      await fs.writeFile(this.statePath, data, 'utf-8');\n    } catch (error) {\n      this.emit('error', error);\n    }\n  }\n\n  private shouldRecoverFromCrash(): boolean {\n    if (!this.appState.lastCrashTime) return false;\n    \n    const timeSinceLastCrash = Date.now() - this.appState.lastCrashTime;\n    const recentCrash = timeSinceLastCrash < 60000; // Within last minute\n    \n    if (recentCrash) {\n      this.appState.crashCount++;\n      this.appState.lastCrashTime = Date.now();\n      \n      // Don't recover if crashing repeatedly\n      if (this.appState.crashCount > 3) {\n        this.appState.crashCount = 0;\n        return false;\n      }\n      \n      return true;\n    } else {\n      // Reset crash count if it's been a while\n      this.appState.crashCount = 0;\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const appLifecycleService = new AppLifecycleService();","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/services/AutoUpdateService.ts","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":66,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":66,"endColumn":28,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1731,1731],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":70,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":70,"endColumn":30,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1866,1866],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":215,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":215,"endColumn":29,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5819,5819],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":220,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":220,"endColumn":31,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5935,5935],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":242,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":246,"endColumn":8,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6541,6541],"text":"void "},"desc":"Add void operator to ignore."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Auto-Update Service\n * Handles automatic updates with background downloads and user notifications\n */\n\nimport { autoUpdater, UpdateInfo, ProgressInfo } from 'electron-updater';\nimport { dialog, BrowserWindow, Notification } from 'electron';\nimport * as path from 'path';\nimport isDev from 'electron-is-dev';\nimport { EventEmitter } from 'events';\n\ninterface UpdateStatus {\n  checking: boolean;\n  available: boolean;\n  downloading: boolean;\n  downloaded: boolean;\n  error: Error | null;\n  progress: ProgressInfo | null;\n  updateInfo: UpdateInfo | null;\n}\n\nexport class AutoUpdateService extends EventEmitter {\n  private status: UpdateStatus = {\n    checking: false,\n    available: false,\n    downloading: false,\n    downloaded: false,\n    error: null,\n    progress: null,\n    updateInfo: null\n  };\n\n  private mainWindow: BrowserWindow | null = null;\n  private isInitialized = false;\n  private updateCheckInterval: NodeJS.Timeout | null = null;\n\n  constructor() {\n    super();\n    this.setupAutoUpdater();\n  }\n\n  /**\n   * Initialize the auto-update service\n   */\n  public initialize(mainWindow: BrowserWindow): void {\n    if (isDev || this.isInitialized) return;\n\n    this.mainWindow = mainWindow;\n    this.isInitialized = true;\n\n    // Configure auto-updater\n    autoUpdater.autoDownload = false; // We'll control downloads manually\n    autoUpdater.autoInstallOnAppQuit = true;\n    autoUpdater.allowPrerelease = false;\n    autoUpdater.allowDowngrade = false;\n\n    // Set update feed URL\n    const feedURL = process.env['UPDATE_SERVER_URL'] || 'https://update.sessionhub.com';\n    autoUpdater.setFeedURL({\n      provider: 'generic',\n      url: feedURL,\n      channel: 'stable'\n    });\n\n    // Check for updates on startup\n    this.checkForUpdates();\n\n    // Set up periodic update checks (every 4 hours)\n    this.updateCheckInterval = setInterval(() => {\n      this.checkForUpdates();\n    }, 4 * 60 * 60 * 1000);\n  }\n\n  /**\n   * Manually check for updates\n   */\n  public async checkForUpdates(): Promise<void> {\n    if (isDev || this.status.checking || this.status.downloading) return;\n\n    try {\n      this.status.checking = true;\n      this.emit('checking-for-update');\n      await autoUpdater.checkForUpdates();\n    } catch (error) {\n      this.handleError(error as Error);\n    } finally {\n      this.status.checking = false;\n    }\n  }\n\n  /**\n   * Download the available update\n   */\n  public async downloadUpdate(): Promise<void> {\n    if (!this.status.available || this.status.downloading || this.status.downloaded) return;\n\n    try {\n      this.status.downloading = true;\n      this.emit('download-started');\n      await autoUpdater.downloadUpdate();\n    } catch (error) {\n      this.handleError(error as Error);\n      this.status.downloading = false;\n    }\n  }\n\n  /**\n   * Install the downloaded update and restart\n   */\n  public quitAndInstall(): void {\n    if (!this.status.downloaded) return;\n\n    // Save app state before quitting\n    this.emit('before-quit-for-update');\n\n    // Quit and install\n    autoUpdater.quitAndInstall(false, true);\n  }\n\n  /**\n   * Get current update status\n   */\n  public getStatus(): UpdateStatus {\n    return { ...this.status };\n  }\n\n  /**\n   * Clean up resources\n   */\n  public destroy(): void {\n    if (this.updateCheckInterval) {\n      clearInterval(this.updateCheckInterval);\n      this.updateCheckInterval = null;\n    }\n    this.removeAllListeners();\n  }\n\n  private setupAutoUpdater(): void {\n    // Update checking\n    autoUpdater.on('checking-for-update', () => {\n      this.status.checking = true;\n      this.emit('checking-for-update');\n    });\n\n    // Update available\n    autoUpdater.on('update-available', (info: UpdateInfo) => {\n      this.status.checking = false;\n      this.status.available = true;\n      this.status.updateInfo = info;\n      this.emit('update-available', info);\n      \n      // Show notification\n      this.showUpdateAvailableNotification(info);\n      \n      // Send to renderer\n      if (this.mainWindow && !this.mainWindow.isDestroyed()) {\n        this.mainWindow.webContents.send('update-available', info);\n      }\n    });\n\n    // No update available\n    autoUpdater.on('update-not-available', (info: UpdateInfo) => {\n      this.status.checking = false;\n      this.status.available = false;\n      this.emit('update-not-available', info);\n    });\n\n    // Download progress\n    autoUpdater.on('download-progress', (progress: ProgressInfo) => {\n      this.status.progress = progress;\n      this.emit('download-progress', progress);\n      \n      // Send progress to renderer\n      if (this.mainWindow && !this.mainWindow.isDestroyed()) {\n        this.mainWindow.webContents.send('download-progress', progress);\n      }\n    });\n\n    // Update downloaded\n    autoUpdater.on('update-downloaded', (info: UpdateInfo) => {\n      this.status.downloading = false;\n      this.status.downloaded = true;\n      this.status.updateInfo = info;\n      this.emit('update-downloaded', info);\n      \n      // Show notification\n      this.showUpdateReadyNotification(info);\n      \n      // Send to renderer\n      if (this.mainWindow && !this.mainWindow.isDestroyed()) {\n        this.mainWindow.webContents.send('update-downloaded', info);\n      }\n    });\n\n    // Error handling\n    autoUpdater.on('error', (error: Error) => {\n      this.handleError(error);\n    });\n  }\n\n  private showUpdateAvailableNotification(info: UpdateInfo): void {\n    if (!Notification.isSupported()) return;\n\n    const notification = new Notification({\n      title: 'Update Available',\n      body: `SessionHub ${info.version} is available. Click to download.`,\n      icon: path.join(__dirname, '../../resources/icon.png'),\n      actions: [\n        { type: 'button', text: 'Download' },\n        { type: 'button', text: 'Later' }\n      ]\n    });\n\n    notification.on('click', () => {\n      this.downloadUpdate();\n    });\n\n    notification.on('action', (_event, index) => {\n      if (index === 0) {\n        this.downloadUpdate();\n      } else {\n        // User postponed update\n      }\n    });\n\n    notification.show();\n  }\n\n  private showUpdateReadyNotification(info: UpdateInfo): void {\n    if (!this.mainWindow || this.mainWindow.isDestroyed()) return;\n\n    const dialogOpts = {\n      type: 'info' as const,\n      buttons: ['Restart Now', 'Later'],\n      title: 'Application Update',\n      message: `SessionHub ${info.version} has been downloaded`,\n      detail: 'The update will be installed when you restart the application. Would you like to restart now?',\n      defaultId: 0,\n      cancelId: 1\n    };\n\n    dialog.showMessageBox(this.mainWindow, dialogOpts).then((result) => {\n      if (result.response === 0) {\n        this.quitAndInstall();\n      }\n    });\n  }\n\n  private handleError(error: Error): void {\n    this.status.error = error;\n    this.status.checking = false;\n    this.status.downloading = false;\n    this.emit('error', error);\n\n    // Log error but don't show to user unless critical\n    if (error.message.includes('net::') || error.message.includes('ENOTFOUND')) {\n      // Network errors - silent fail\n      return;\n    }\n\n    // Show error notification for other errors\n    if (Notification.isSupported()) {\n      const notification = new Notification({\n        title: 'Update Error',\n        body: 'Failed to check for updates. Please try again later.',\n        icon: path.join(__dirname, '../../resources/icon.png')\n      });\n      notification.show();\n    }\n  }\n}\n\n// Export singleton instance\nexport const autoUpdateService = new AutoUpdateService();","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/services/ClaudeAutoAcceptEnhanced.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":100,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":100,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":106,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":106,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":432,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":432,"endColumn":46},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":470,"column":17,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":477,"endColumn":6}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced Claude Code Auto-Accept Service\n * Ensures Claude Code NEVER prompts for anything - truly accepts ALL operations\n */\n\nimport { app, ipcMain } from 'electron';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nexport interface EnhancedAutoAcceptSettings {\n  // Master control - when true, ALL other settings are forced to true\n  ultimateMode: boolean;\n  \n  // Core settings\n  enabled: boolean;\n  sessionId?: string;\n  \n  // Override controls\n  masterOverride: boolean;\n  bypassAllPrompts: boolean;\n  neverAskPermission: boolean;\n  skipAllConfirmations: boolean;\n  autoYesResponse: boolean;\n  \n  // Operation categories (all default to true in ultimate mode)\n  acceptFileOperations: boolean;\n  acceptGitOperations: boolean;\n  acceptFoundationUpdates: boolean;\n  acceptShellCommands: boolean;\n  acceptPackageManagement: boolean;\n  acceptSystemChanges: boolean;\n  acceptNetworkOperations: boolean;\n  acceptDatabaseOperations: boolean;\n  acceptDockerOperations: boolean;\n  acceptBuildOperations: boolean;\n  \n  // Special handling\n  acceptSensitiveFiles: boolean;\n  acceptDestructiveOperations: boolean;\n  acceptWithoutPreview: boolean;\n  disableSafetyChecks: boolean;\n}\n\nexport class ClaudeAutoAcceptEnhanced {\n  private configPath: string;\n  private settings: EnhancedAutoAcceptSettings;\n  private claudeConfigPaths: string[];\n  private envVarScript: string;\n  \n  constructor() {\n    const userDataPath = app.getPath('userData');\n    const homePath = app.getPath('home');\n    \n    this.configPath = path.join(userDataPath, 'claude-ultimate-auto-accept.json');\n    this.envVarScript = path.join(homePath, '.sessionhub', 'claude-env.sh');\n    \n    // Multiple config paths to ensure we catch all Claude installations\n    this.claudeConfigPaths = [\n      path.join(homePath, '.config', 'claude', 'claude.json'),\n      path.join(homePath, '.claude', 'config.json'),\n      path.join(homePath, 'Library', 'Application Support', 'Claude', 'config.json'),\n      path.join(homePath, '.cursor', 'claude-config.json'),\n      path.join(homePath, '.vscode', 'claude-config.json')\n    ];\n    \n    // Ultimate default settings - EVERYTHING enabled\n    this.settings = {\n      ultimateMode: true,\n      enabled: true,\n      masterOverride: true,\n      bypassAllPrompts: true,\n      neverAskPermission: true,\n      skipAllConfirmations: true,\n      autoYesResponse: true,\n      acceptFileOperations: true,\n      acceptGitOperations: true,\n      acceptFoundationUpdates: true,\n      acceptShellCommands: true,\n      acceptPackageManagement: true,\n      acceptSystemChanges: true,\n      acceptNetworkOperations: true,\n      acceptDatabaseOperations: true,\n      acceptDockerOperations: true,\n      acceptBuildOperations: true,\n      acceptSensitiveFiles: true,\n      acceptDestructiveOperations: true,\n      acceptWithoutPreview: true,\n      disableSafetyChecks: true\n    };\n  }\n  \n  async initialize(): Promise<void> {\n    // Load saved settings\n    try {\n      const data = await fs.readFile(this.configPath, 'utf-8');\n      const savedSettings = JSON.parse(data);\n      \n      // If ultimate mode is on, force all settings to true\n      if (savedSettings.ultimateMode) {\n        this.settings = this.getUltimateSettings();\n      } else {\n        this.settings = { ...this.settings, ...savedSettings };\n      }\n    } catch {\n      // Save ultimate settings by default\n      await this.saveSettings();\n    }\n    \n    // Always apply settings on startup\n    await this.applyUltimateAutoAccept();\n    \n    // Setup IPC handlers\n    this.setupIPCHandlers();\n    \n    // Monitor for any changes that might disable auto-accept\n    this.startAutoAcceptMonitor();\n  }\n  \n  private getUltimateSettings(): EnhancedAutoAcceptSettings {\n    // Return settings with EVERYTHING enabled\n    return {\n      ultimateMode: true,\n      enabled: true,\n      masterOverride: true,\n      bypassAllPrompts: true,\n      neverAskPermission: true,\n      skipAllConfirmations: true,\n      autoYesResponse: true,\n      acceptFileOperations: true,\n      acceptGitOperations: true,\n      acceptFoundationUpdates: true,\n      acceptShellCommands: true,\n      acceptPackageManagement: true,\n      acceptSystemChanges: true,\n      acceptNetworkOperations: true,\n      acceptDatabaseOperations: true,\n      acceptDockerOperations: true,\n      acceptBuildOperations: true,\n      acceptSensitiveFiles: true,\n      acceptDestructiveOperations: true,\n      acceptWithoutPreview: true,\n      disableSafetyChecks: true\n    };\n  }\n  \n  private setupIPCHandlers(): void {\n    ipcMain.handle('claude:get-ultimate-settings', () => {\n      return this.settings;\n    });\n    \n    ipcMain.handle('claude:enable-ultimate-mode', async () => {\n      this.settings = this.getUltimateSettings();\n      await this.saveSettings();\n      await this.applyUltimateAutoAccept();\n      return { success: true };\n    });\n    \n    ipcMain.handle('claude:force-auto-accept', async () => {\n      // Emergency force - ensures auto-accept is active\n      await this.forceAutoAccept();\n      return { success: true };\n    });\n  }\n  \n  private async saveSettings(): Promise<void> {\n    await fs.writeFile(\n      this.configPath,\n      JSON.stringify(this.settings, null, 2)\n    );\n  }\n  \n  private async applyUltimateAutoAccept(): Promise<void> {\n    // Set EVERY possible environment variable\n    const envVars = {\n      // Master controls\n      'CLAUDE_ULTIMATE_MODE': 'true',\n      'CLAUDE_AUTO_ACCEPT_ALL': 'true',\n      'CLAUDE_BYPASS_ALL_PROMPTS': 'true',\n      'CLAUDE_NEVER_ASK_PERMISSION': 'true',\n      'CLAUDE_SKIP_ALL_CONFIRMATIONS': 'true',\n      'CLAUDE_AUTO_YES_TO_ALL': 'true',\n      'CLAUDE_FORCE_ALL_OPERATIONS': 'true',\n      'CLAUDE_DISABLE_ALL_PROMPTS': 'true',\n      'CLAUDE_TRUST_LEVEL': 'MAXIMUM',\n      'CLAUDE_INTERACTIVE': 'false',\n      'CLAUDE_BATCH_MODE': 'true',\n      'CLAUDE_CI_MODE': 'true',\n      \n      // Specific overrides\n      'CLAUDE_AUTO_ACCEPT_EDITS': 'true',\n      'CLAUDE_AUTO_ACCEPT_CREATES': 'true',\n      'CLAUDE_AUTO_ACCEPT_DELETES': 'true',\n      'CLAUDE_AUTO_ACCEPT_PROMPTS': 'true',\n      'CLAUDE_SUPPRESS_CONFIRMATIONS': 'true',\n      'CLAUDE_ACCEPT_WITHOUT_PROMPT': 'true',\n      'CLAUDE_SKIP_PREVIEW': 'true',\n      'CLAUDE_SKIP_DIFF': 'true',\n      'CLAUDE_SKIP_WARNINGS': 'true',\n      'CLAUDE_IGNORE_ERRORS': 'false', // We want to see errors, just not prompts\n      \n      // File operations\n      'CLAUDE_ACCEPT_FILE_ALL': 'true',\n      'CLAUDE_ACCEPT_FILE_CREATE': 'true',\n      'CLAUDE_ACCEPT_FILE_EDIT': 'true',\n      'CLAUDE_ACCEPT_FILE_DELETE': 'true',\n      'CLAUDE_ACCEPT_FILE_RENAME': 'true',\n      'CLAUDE_ACCEPT_FILE_MOVE': 'true',\n      'CLAUDE_ACCEPT_FILE_COPY': 'true',\n      'CLAUDE_ACCEPT_FILE_PERMISSIONS': 'true',\n      'CLAUDE_ACCEPT_FILE_OWNERSHIP': 'true',\n      \n      // Directory operations\n      'CLAUDE_ACCEPT_DIR_ALL': 'true',\n      'CLAUDE_ACCEPT_DIR_CREATE': 'true',\n      'CLAUDE_ACCEPT_DIR_DELETE': 'true',\n      'CLAUDE_ACCEPT_DIR_RENAME': 'true',\n      'CLAUDE_ACCEPT_DIR_RECURSIVE': 'true',\n      \n      // Git operations\n      'CLAUDE_ACCEPT_GIT_ALL': 'true',\n      'CLAUDE_ACCEPT_GIT_ADD': 'true',\n      'CLAUDE_ACCEPT_GIT_COMMIT': 'true',\n      'CLAUDE_ACCEPT_GIT_PUSH': 'true',\n      'CLAUDE_ACCEPT_GIT_PULL': 'true',\n      'CLAUDE_ACCEPT_GIT_MERGE': 'true',\n      'CLAUDE_ACCEPT_GIT_REBASE': 'true',\n      'CLAUDE_ACCEPT_GIT_RESET': 'true',\n      'CLAUDE_ACCEPT_GIT_FORCE': 'true',\n      'CLAUDE_ACCEPT_GIT_CLEAN': 'true',\n      'CLAUDE_ACCEPT_GIT_CHECKOUT': 'true',\n      'CLAUDE_ACCEPT_GIT_BRANCH': 'true',\n      'CLAUDE_ACCEPT_GIT_TAG': 'true',\n      'CLAUDE_ACCEPT_GIT_STASH': 'true',\n      \n      // Special files\n      'CLAUDE_ACCEPT_FOUNDATION_MD': 'true',\n      'CLAUDE_ACCEPT_FOUNDATION_WRITES': 'true',\n      'CLAUDE_ACCEPT_ENV_FILES': 'true',\n      'CLAUDE_ACCEPT_CONFIG_FILES': 'true',\n      'CLAUDE_ACCEPT_SENSITIVE_FILES': 'true',\n      'CLAUDE_ACCEPT_SYSTEM_FILES': 'true',\n      \n      // Package management\n      'CLAUDE_ACCEPT_PACKAGE_ALL': 'true',\n      'CLAUDE_ACCEPT_NPM_ALL': 'true',\n      'CLAUDE_ACCEPT_NPM_INSTALL': 'true',\n      'CLAUDE_ACCEPT_NPM_UPDATE': 'true',\n      'CLAUDE_ACCEPT_NPM_AUDIT': 'true',\n      'CLAUDE_ACCEPT_NPM_GLOBAL': 'true',\n      'CLAUDE_ACCEPT_YARN_ALL': 'true',\n      'CLAUDE_ACCEPT_PIP_ALL': 'true',\n      'CLAUDE_ACCEPT_BREW_ALL': 'true',\n      \n      // Shell operations\n      'CLAUDE_ACCEPT_SHELL_ALL': 'true',\n      'CLAUDE_ACCEPT_COMMAND_EXECUTION': 'true',\n      'CLAUDE_ACCEPT_SCRIPT_RUN': 'true',\n      'CLAUDE_ACCEPT_BACKGROUND_JOBS': 'true',\n      'CLAUDE_ACCEPT_PROCESS_OPERATIONS': 'true',\n      \n      // System operations\n      'CLAUDE_ACCEPT_ENV_CHANGES': 'true',\n      'CLAUDE_ACCEPT_PATH_CHANGES': 'true',\n      'CLAUDE_ACCEPT_SYSTEM_CONFIG': 'true',\n      'CLAUDE_ACCEPT_SERVICE_CONTROL': 'true',\n      \n      // Build operations\n      'CLAUDE_ACCEPT_BUILD_ALL': 'true',\n      'CLAUDE_ACCEPT_COMPILE': 'true',\n      'CLAUDE_ACCEPT_TEST': 'true',\n      'CLAUDE_ACCEPT_LINT': 'true',\n      'CLAUDE_ACCEPT_FORMAT': 'true',\n      'CLAUDE_ACCEPT_DEPLOY': 'true',\n      \n      // SessionHub specific\n      'SESSIONHUB_AUTO_ACCEPT_ALL': 'true',\n      'SESSIONHUB_CLAUDE_ULTIMATE': 'true',\n      'SESSIONHUB_SKIP_ALL_PROMPTS': 'true',\n      'SESSIONHUB_TRUST_LEVEL': 'maximum'\n    };\n    \n    // Apply all environment variables\n    for (const [key, value] of Object.entries(envVars)) {\n      process.env[key] = value;\n    }\n    \n    // Update all Claude config files\n    await this.updateAllClaudeConfigs();\n    \n    // Create/update environment script\n    await this.createEnvScript(envVars);\n    \n    // Platform-specific settings\n    if (process.platform === 'darwin') {\n      await this.setMacOSUltimatePreferences();\n    }\n    \n    // Ensure VS Code settings are updated\n    await this.updateVSCodeSettings();\n  }\n  \n  private async updateAllClaudeConfigs(): Promise<void> {\n    const ultimateConfig = {\n      version: 'ultimate-2.0',\n      autoAcceptEdits: true,\n      autoAcceptPrompts: true,\n      autoAcceptAll: true,\n      suppressConfirmations: true,\n      bypassAllPrompts: true,\n      neverAskPermission: true,\n      skipAllConfirmations: true,\n      trustLevel: 'maximum',\n      ultimateMode: true,\n      forceOperations: true,\n      interactive: false,\n      batchMode: true,\n      permissions: {\n        all: true,\n        file: { all: true },\n        git: { all: true },\n        shell: { all: true },\n        package: { all: true },\n        system: { all: true }\n      },\n      prompts: {\n        skip: ['*'],\n        autoResponse: 'yes',\n        defaultAction: 'accept'\n      },\n      sessionHub: {\n        enabled: true,\n        ultimateMode: true,\n        autoAcceptAll: true\n      }\n    };\n    \n    // Update all possible config locations\n    for (const configPath of this.claudeConfigPaths) {\n      try {\n        const dir = path.dirname(configPath);\n        await fs.mkdir(dir, { recursive: true });\n        await fs.writeFile(configPath, JSON.stringify(ultimateConfig, null, 2));\n      } catch {\n        // Continue with next path\n      }\n    }\n  }\n  \n  private async createEnvScript(envVars: Record<string, string>): Promise<void> {\n    const scriptContent = `#!/bin/bash\n# Claude Code Ultimate Auto-Accept Environment\n# Generated by SessionHub - DO NOT EDIT\n\n# This script ensures Claude Code NEVER prompts for anything\n\n${Object.entries(envVars).map(([key, value]) => `export ${key}=\"${value}\"`).join('\\n')}\n\n# Additional safety bypasses\nexport YES=1\nexport FORCE=1\nexport CI=1\nexport NONINTERACTIVE=1\n\necho \"✅ Claude Ultimate Auto-Accept Environment Active\"\n`;\n    \n    const scriptDir = path.dirname(this.envVarScript);\n    await fs.mkdir(scriptDir, { recursive: true });\n    await fs.writeFile(this.envVarScript, scriptContent);\n    await fs.chmod(this.envVarScript, 0o755);\n  }\n  \n  private async setMacOSUltimatePreferences(): Promise<void> {\n    const commands = [\n      // Claude preferences\n      'defaults write com.anthropic.claude AutoAcceptAll -bool true',\n      'defaults write com.anthropic.claude BypassAllPrompts -bool true',\n      'defaults write com.anthropic.claude NeverAskPermission -bool true',\n      'defaults write com.anthropic.claude UltimateMode -bool true',\n      \n      // Cursor preferences\n      'defaults write com.cursor.editor AutoAcceptAll -bool true',\n      'defaults write com.cursor.editor BypassAllPrompts -bool true',\n      \n      // VS Code preferences\n      'defaults write com.microsoft.VSCode AutoAcceptClaudePrompts -bool true'\n    ];\n    \n    for (const cmd of commands) {\n      try {\n        await execAsync(cmd);\n      } catch {\n        // Continue with next command\n      }\n    }\n  }\n  \n  private async updateVSCodeSettings(): Promise<void> {\n    const vscodeSettings = {\n      'claude.autoAcceptEdits': true,\n      'claude.autoAcceptPrompts': true,\n      'claude.autoAcceptAll': true,\n      'claude.suppressConfirmations': true,\n      'claude.bypassAllPrompts': true,\n      'claude.neverAskPermission': true,\n      'claude.ultimateMode': true,\n      'claude.trustLevel': 'maximum',\n      'claude.skipAllWarnings': true,\n      'claude.autoYesResponse': true,\n      'claude.forceOperations': true,\n      'claude.git.autoAcceptAll': true,\n      'claude.foundation.autoAcceptWrites': true,\n      'claude.shell.autoAcceptCommands': true,\n      'claude.package.autoAcceptInstalls': true\n    };\n    \n    const vscodePaths = [\n      path.join(app.getPath('home'), 'Library', 'Application Support', 'Code', 'User', 'settings.json'),\n      path.join(app.getPath('home'), '.config', 'Code', 'User', 'settings.json'),\n      path.join(app.getPath('home'), '.cursor', 'User', 'settings.json')\n    ];\n    \n    for (const settingsPath of vscodePaths) {\n      try {\n        let existingSettings = {};\n        try {\n          const data = await fs.readFile(settingsPath, 'utf-8');\n          existingSettings = JSON.parse(data);\n        } catch {\n          // Start with empty settings\n        }\n        \n        const mergedSettings = { ...existingSettings, ...vscodeSettings };\n        await fs.mkdir(path.dirname(settingsPath), { recursive: true });\n        await fs.writeFile(settingsPath, JSON.stringify(mergedSettings, null, 2));\n      } catch {\n        // Continue with next path\n      }\n    }\n  }\n  \n  private async forceAutoAccept(): Promise<void> {\n    // Emergency force - reapply all settings\n    this.settings = this.getUltimateSettings();\n    await this.saveSettings();\n    await this.applyUltimateAutoAccept();\n    \n    // Additionally, try to inject into running Claude processes\n    if (process.platform === 'darwin') {\n      try {\n        // Find Claude/Cursor processes and inject env vars\n        await execAsync(`\n          for pid in $(pgrep -f \"Claude|Cursor|code\"); do\n            launchctl setenv CLAUDE_AUTO_ACCEPT_ALL true\n            launchctl setenv CLAUDE_BYPASS_ALL_PROMPTS true\n          done\n        `);\n      } catch {\n        // Continue anyway\n      }\n    }\n  }\n  \n  private startAutoAcceptMonitor(): void {\n    // Monitor and re-enable auto-accept if it gets disabled\n    setInterval(async () => {\n      // Check if key env vars are still set\n      if (process.env['CLAUDE_AUTO_ACCEPT_ALL'] !== 'true' || \n          process.env['CLAUDE_BYPASS_ALL_PROMPTS'] !== 'true') {\n        // Auto-accept was disabled, re-enabling...\n        await this.applyUltimateAutoAccept();\n      }\n    }, 5000); // Check every 5 seconds\n  }\n  \n  public async enableUltimateMode(): Promise<void> {\n    this.settings = this.getUltimateSettings();\n    await this.saveSettings();\n    await this.applyUltimateAutoAccept();\n  }\n  \n  public isUltimateMode(): boolean {\n    return this.settings.ultimateMode === true;\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/services/ClaudeAutoAcceptService.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":72,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":72,"endColumn":64},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":194,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6420,6423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6420,6423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":199,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":199,"endColumn":32}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Claude Code Auto-Accept Service\n * Manages automatic acceptance of Claude Code prompts within SessionHub\n */\n\nimport { app, ipcMain } from 'electron';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nexport interface ClaudeAutoAcceptSettings {\n  enabled: boolean;\n  sessionId?: string;\n  masterOverride: boolean;\n  // Basic operations\n  acceptFileEdits: boolean;\n  acceptGitOperations: boolean;\n  acceptFoundationUpdates: boolean;\n  acceptAllPrompts: boolean;\n  // Extended operations\n  acceptDirectoryOperations: boolean;\n  acceptPackageInstallations: boolean;\n  acceptShellCommands: boolean;\n  acceptBuildOperations: boolean;\n  acceptSystemModifications: boolean;\n  acceptNetworkOperations: boolean;\n  acceptDockerOperations: boolean;\n  acceptDatabaseOperations: boolean;\n  // Ultimate control\n  bypassAllPrompts: boolean;\n  neverAskPermission: boolean;\n}\n\nexport class ClaudeAutoAcceptService {\n  private configPath: string;\n  private settings: ClaudeAutoAcceptSettings;\n  private claudeConfigPath: string;\n  \n  constructor() {\n    const userDataPath = app.getPath('userData');\n    this.configPath = path.join(userDataPath, 'claude-auto-accept.json');\n    this.claudeConfigPath = path.join(app.getPath('home'), '.config', 'claude', 'claude.json');\n    \n    // Default settings - EVERYTHING enabled\n    this.settings = {\n      enabled: true,\n      masterOverride: true,\n      acceptFileEdits: true,\n      acceptGitOperations: true,\n      acceptFoundationUpdates: true,\n      acceptAllPrompts: true,\n      acceptDirectoryOperations: true,\n      acceptPackageInstallations: true,\n      acceptShellCommands: true,\n      acceptBuildOperations: true,\n      acceptSystemModifications: true,\n      acceptNetworkOperations: true,\n      acceptDockerOperations: true,\n      acceptDatabaseOperations: true,\n      bypassAllPrompts: true,\n      neverAskPermission: true\n    };\n  }\n  \n  async initialize(): Promise<void> {\n    // Load saved settings\n    try {\n      const data = await fs.readFile(this.configPath, 'utf-8');\n      this.settings = { ...this.settings, ...JSON.parse(data) };\n    } catch {\n      // Save default settings if none exist\n      await this.saveSettings();\n    }\n    \n    // Apply settings\n    if (this.settings.enabled) {\n      await this.applyAutoAcceptSettings();\n    }\n    \n    // Setup IPC handlers\n    this.setupIPCHandlers();\n  }\n  \n  private setupIPCHandlers(): void {\n    ipcMain.handle('claude:get-auto-accept-settings', () => {\n      return this.settings;\n    });\n    \n    ipcMain.handle('claude:set-auto-accept-settings', async (_, settings: ClaudeAutoAcceptSettings) => {\n      this.settings = settings;\n      await this.saveSettings();\n      \n      if (settings.enabled) {\n        await this.applyAutoAcceptSettings();\n      } else {\n        await this.removeAutoAcceptSettings();\n      }\n      \n      return { success: true };\n    });\n    \n    ipcMain.handle('claude:enable-for-session', async (_, sessionId: string) => {\n      this.settings.enabled = true;\n      this.settings.sessionId = sessionId;\n      await this.saveSettings();\n      await this.applyAutoAcceptSettings();\n      \n      return { success: true };\n    });\n  }\n  \n  private async saveSettings(): Promise<void> {\n    await fs.writeFile(\n      this.configPath,\n      JSON.stringify(this.settings, null, 2)\n    );\n  }\n  \n  private async applyAutoAcceptSettings(): Promise<void> {\n    // Set ALL environment variables for comprehensive auto-accept\n    process.env['CLAUDE_AUTO_ACCEPT_EDITS'] = 'true';\n    process.env['CLAUDE_AUTO_ACCEPT_PROMPTS'] = 'true';\n    process.env['CLAUDE_SUPPRESS_CONFIRMATIONS'] = 'true';\n    process.env['CLAUDE_AUTO_ACCEPT_ALL'] = 'true';\n    process.env['CLAUDE_MASTER_OVERRIDE'] = String(this.settings.masterOverride);\n    process.env['CLAUDE_BYPASS_ALL_PROMPTS'] = String(this.settings.bypassAllPrompts);\n    process.env['CLAUDE_NEVER_ASK_PERMISSION'] = String(this.settings.neverAskPermission);\n    \n    // File and directory operations\n    process.env['CLAUDE_ACCEPT_FILE_CREATE'] = 'true';\n    process.env['CLAUDE_ACCEPT_FILE_EDIT'] = 'true';\n    process.env['CLAUDE_ACCEPT_FILE_DELETE'] = 'true';\n    process.env['CLAUDE_ACCEPT_DIR_CREATE'] = 'true';\n    process.env['CLAUDE_ACCEPT_DIR_DELETE'] = 'true';\n    process.env['CLAUDE_ACCEPT_PERMISSIONS'] = 'true';\n    \n    // Package management\n    process.env['CLAUDE_ACCEPT_NPM_INSTALL'] = 'true';\n    process.env['CLAUDE_ACCEPT_YARN_ADD'] = 'true';\n    process.env['CLAUDE_ACCEPT_PIP_INSTALL'] = 'true';\n    process.env['CLAUDE_ACCEPT_BREW_INSTALL'] = 'true';\n    process.env['CLAUDE_ACCEPT_PACKAGE_UPDATES'] = 'true';\n    \n    // Shell and system\n    process.env['CLAUDE_ACCEPT_SHELL_COMMANDS'] = 'true';\n    process.env['CLAUDE_ACCEPT_SCRIPT_EXECUTION'] = 'true';\n    process.env['CLAUDE_ACCEPT_ENV_CHANGES'] = 'true';\n    process.env['CLAUDE_ACCEPT_SYSTEM_CONFIG'] = 'true';\n    \n    // Git operations\n    process.env['CLAUDE_ACCEPT_GIT_ALL'] = 'true';\n    \n    // Build and development\n    process.env['CLAUDE_ACCEPT_BUILD_COMMANDS'] = 'true';\n    process.env['CLAUDE_ACCEPT_TEST_EXECUTION'] = 'true';\n    \n    // Network and containers\n    process.env['CLAUDE_ACCEPT_API_CALLS'] = 'true';\n    process.env['CLAUDE_ACCEPT_DOCKER_OPS'] = 'true';\n    \n    // SessionHub specific\n    process.env['SESSIONHUB_AUTO_ACCEPT'] = String(this.settings.enabled);\n    process.env['SESSIONHUB_TRUST_LEVEL'] = 'maximum';\n    \n    if (this.settings.sessionId) {\n      process.env['SESSIONHUB_SESSION_ID'] = this.settings.sessionId;\n    }\n    \n    // Update Claude configuration file\n    await this.updateClaudeConfig();\n    \n    // For macOS, also set system-wide preferences\n    if (process.platform === 'darwin') {\n      await this.setMacOSPreferences();\n    }\n  }\n  \n  private async removeAutoAcceptSettings(): Promise<void> {\n    delete process.env['CLAUDE_AUTO_ACCEPT_EDITS'];\n    delete process.env['CLAUDE_AUTO_ACCEPT_PROMPTS'];\n    delete process.env['CLAUDE_SUPPRESS_CONFIRMATIONS'];\n    delete process.env['SESSIONHUB_AUTO_ACCEPT'];\n    delete process.env['SESSIONHUB_SESSION_ID'];\n  }\n  \n  private async updateClaudeConfig(): Promise<void> {\n    // Ensure config directory exists\n    const configDir = path.dirname(this.claudeConfigPath);\n    await fs.mkdir(configDir, { recursive: true });\n    \n    let config: any = {};\n    \n    // Load existing config if present\n    try {\n      const data = await fs.readFile(this.claudeConfigPath, 'utf-8');\n      config = JSON.parse(data);\n    } catch {\n      // Start with empty config\n    }\n    \n    // Update with our settings\n    config.autoAcceptEdits = this.settings.acceptFileEdits;\n    config.autoAcceptPrompts = this.settings.acceptAllPrompts;\n    config.suppressConfirmations = true;\n    config.sessionHub = {\n      enabled: this.settings.enabled,\n      sessionId: this.settings.sessionId,\n      acceptPatterns: {\n        fileEdits: this.settings.acceptFileEdits,\n        gitOperations: this.settings.acceptGitOperations,\n        foundationUpdates: this.settings.acceptFoundationUpdates,\n        allPrompts: this.settings.acceptAllPrompts\n      }\n    };\n    \n    // Save updated config\n    await fs.writeFile(\n      this.claudeConfigPath,\n      JSON.stringify(config, null, 2)\n    );\n  }\n  \n  public async enable(): Promise<void> {\n    this.settings.enabled = true;\n    await this.saveSettings();\n    await this.applyAutoAcceptSettings();\n  }\n  \n  public async disable(): Promise<void> {\n    this.settings.enabled = false;\n    await this.saveSettings();\n    await this.removeAutoAcceptSettings();\n  }\n  \n  private async setMacOSPreferences(): Promise<void> {\n    // Use macOS defaults system to set preferences\n    const commands = [\n      `defaults write com.anthropic.claude AutoAcceptEdits -bool ${this.settings.acceptFileEdits}`,\n      `defaults write com.anthropic.claude AutoAcceptPrompts -bool ${this.settings.acceptAllPrompts}`,\n      `defaults write com.anthropic.claude SuppressConfirmations -bool true`\n    ];\n    \n    for (const cmd of commands) {\n      try {\n        await execAsync(cmd);\n      } catch {\n        // Ignore errors - Claude might not be installed\n      }\n    }\n  }\n  \n  async enableForCurrentSession(sessionId: string): Promise<void> {\n    this.settings.enabled = true;\n    this.settings.sessionId = sessionId;\n    await this.saveSettings();\n    await this.applyAutoAcceptSettings();\n    \n    // Log this activation\n    await this.logActivity(`Auto-accept enabled for session: ${sessionId}`);\n  }\n  \n  async disableAutoAccept(): Promise<void> {\n    this.settings.enabled = false;\n    delete this.settings.sessionId;\n    await this.saveSettings();\n    await this.removeAutoAcceptSettings();\n    \n    await this.logActivity('Auto-accept disabled');\n  }\n  \n  private async logActivity(message: string): Promise<void> {\n    const logPath = path.join(app.getPath('userData'), 'claude-auto-accept.log');\n    const timestamp = new Date().toISOString();\n    const logEntry = `[${timestamp}] ${message}\\n`;\n    \n    try {\n      await fs.appendFile(logPath, logEntry);\n    } catch {\n      await fs.writeFile(logPath, logEntry);\n    }\n  }\n  \n  getSettings(): ClaudeAutoAcceptSettings {\n    return { ...this.settings };\n  }\n  \n  async checkClaudeInstallation(): Promise<{\n    installed: boolean;\n    path?: string;\n    version?: string;\n  }> {\n    try {\n      // Check for Claude CLI\n      const { stdout: cliPath } = await execAsync('which claude');\n      if (cliPath.trim()) {\n        const { stdout: version } = await execAsync('claude --version');\n        return {\n          installed: true,\n          path: cliPath.trim(),\n          version: version.trim()\n        };\n      }\n    } catch {\n      // CLI not found, check for app\n    }\n    \n    // Check for Claude app on macOS\n    if (process.platform === 'darwin') {\n      try {\n        await fs.access('/Applications/Claude.app');\n        return {\n          installed: true,\n          path: '/Applications/Claude.app'\n        };\n      } catch {\n        // App not found\n      }\n    }\n    \n    return { installed: false };\n  }\n}\n\n// Export singleton instance\nexport const claudeAutoAcceptService = new ClaudeAutoAcceptService();","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/services/mac/FileAssociationService.ts","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":70,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":70,"endColumn":49,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1810,1810],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":101,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":101,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":166,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4128,4131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4128,4131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":195,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":202,"endColumn":6},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":219,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":219,"endColumn":39,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5587,5587],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":280,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":280,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7189,7192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7189,7192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":282,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":282,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":289,"column":58,"nodeType":"Property","messageId":"anyAssignment","endLine":289,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":293,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":293,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7534,7537],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7534,7537],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":295,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":295,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":302,"column":58,"nodeType":"Property","messageId":"anyAssignment","endLine":302,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":306,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":306,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7880,7883],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7880,7883],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":308,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":308,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":315,"column":59,"nodeType":"Property","messageId":"anyAssignment","endLine":315,"endColumn":63}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * File Association and Deep Linking Service\n * Handles file associations and sessionhub:// protocol links\n */\n\nimport { app, dialog, BrowserWindow } from 'electron';\nimport * as path from 'path';\nimport * as fs from 'fs/promises';\nimport { EventEmitter } from 'events';\n\ninterface FileAssociation {\n  extension: string;\n  mimeType: string;\n  description: string;\n  icon?: string;\n}\n\ninterface DeepLink {\n  protocol: string;\n  action: string;\n  params: Record<string, string>;\n}\n\nexport class FileAssociationService extends EventEmitter {\n  private readonly PROTOCOL = 'sessionhub';\n  private readonly FILE_ASSOCIATIONS: FileAssociation[] = [\n    {\n      extension: '.shub',\n      mimeType: 'application/x-sessionhub-project',\n      description: 'SessionHub Project'\n    },\n    {\n      extension: '.shubsession',\n      mimeType: 'application/x-sessionhub-session',\n      description: 'SessionHub Session'\n    },\n    {\n      extension: '.shubtemplate',\n      mimeType: 'application/x-sessionhub-template',\n      description: 'SessionHub Template'\n    }\n  ];\n\n  private pendingFileOpen: string | null = null;\n  private pendingDeepLink: string | null = null;\n  private mainWindow: BrowserWindow | null = null;\n\n  constructor() {\n    super();\n    this.setupHandlers();\n  }\n\n  /**\n   * Initialize the file association service\n   */\n  public initialize(mainWindow: BrowserWindow): void {\n    this.mainWindow = mainWindow;\n    \n    // Register as default protocol handler\n    if (process.defaultApp) {\n      if (process.argv.length >= 2) {\n        app.setAsDefaultProtocolClient(this.PROTOCOL, process.execPath, [path.resolve(process.argv[1] || '')]);\n      }\n    } else {\n      app.setAsDefaultProtocolClient(this.PROTOCOL);\n    }\n\n    // Process any pending files or links\n    if (this.pendingFileOpen) {\n      this.handleFileOpen(this.pendingFileOpen);\n      this.pendingFileOpen = null;\n    }\n\n    if (this.pendingDeepLink) {\n      this.handleDeepLink(this.pendingDeepLink);\n      this.pendingDeepLink = null;\n    }\n  }\n\n  /**\n   * Open a SessionHub file\n   */\n  public async openFile(filePath: string): Promise<void> {\n    try {\n      // Validate file exists\n      const stats = await fs.stat(filePath);\n      if (!stats.isFile()) {\n        throw new Error('Not a valid file');\n      }\n\n      // Check file extension\n      const ext = path.extname(filePath).toLowerCase();\n      const association = this.FILE_ASSOCIATIONS.find(a => a.extension === ext);\n      \n      if (!association) {\n        throw new Error('Unsupported file type');\n      }\n\n      // Read file content\n      const content = await fs.readFile(filePath, 'utf-8');\n      const data = JSON.parse(content);\n\n      // Handle based on file type\n      switch (ext) {\n        case '.shub':\n          await this.openProject(data, filePath);\n          break;\n        case '.shubsession':\n          await this.openSession(data, filePath);\n          break;\n        case '.shubtemplate':\n          await this.openTemplate(data, filePath);\n          break;\n      }\n\n      // Add to recent files\n      app.addRecentDocument(filePath);\n      \n    } catch (error) {\n      this.showFileError(filePath, error as Error);\n    }\n  }\n\n  /**\n   * Handle a deep link\n   */\n  public handleDeepLink(url: string): void {\n    if (!this.mainWindow) {\n      this.pendingDeepLink = url;\n      return;\n    }\n\n    try {\n      const parsed = this.parseDeepLink(url);\n      \n      // Show main window\n      this.mainWindow.show();\n      this.mainWindow.focus();\n\n      // Handle different actions\n      switch (parsed.action) {\n        case 'open':\n          this.handleOpenAction(parsed.params);\n          break;\n        case 'new':\n          this.handleNewAction(parsed.params);\n          break;\n        case 'share':\n          this.handleShareAction(parsed.params);\n          break;\n        case 'settings':\n          this.navigateTo('/settings');\n          break;\n        default:\n          this.navigateTo('/');\n      }\n      \n    } catch (error) {\n      this.emit('error', error);\n    }\n  }\n\n  /**\n   * Create a SessionHub project file\n   */\n  public async saveProjectFile(projectData: any, savePath?: string): Promise<string> {\n    const defaultPath = path.join(app.getPath('documents'), 'SessionHub Projects');\n    \n    // Ensure directory exists\n    await fs.mkdir(defaultPath, { recursive: true });\n\n    // Show save dialog if no path provided\n    if (!savePath && this.mainWindow) {\n      const result = await dialog.showSaveDialog(this.mainWindow, {\n        title: 'Save SessionHub Project',\n        defaultPath: path.join(defaultPath, `${projectData.name || 'project'}.shub`),\n        filters: [\n          { name: 'SessionHub Project', extensions: ['shub'] },\n          { name: 'All Files', extensions: ['*'] }\n        ]\n      });\n\n      if (result.canceled || !result.filePath) {\n        throw new Error('Save canceled');\n      }\n\n      savePath = result.filePath;\n    }\n\n    if (!savePath) {\n      throw new Error('No save path provided');\n    }\n\n    // Add metadata\n    const fileData = {\n      ...projectData,\n      _metadata: {\n        version: '1.0',\n        created: new Date().toISOString(),\n        appVersion: app.getVersion()\n      }\n    };\n\n    // Save file\n    await fs.writeFile(savePath, JSON.stringify(fileData, null, 2), 'utf-8');\n    \n    // Add to recent documents\n    app.addRecentDocument(savePath);\n    \n    return savePath;\n  }\n\n  private setupHandlers(): void {\n    // Handle file open events\n    app.on('open-file', (event, filePath) => {\n      event.preventDefault();\n      \n      if (this.mainWindow) {\n        this.handleFileOpen(filePath);\n      } else {\n        // Store for later if app is still starting\n        this.pendingFileOpen = filePath;\n      }\n    });\n\n    // Handle protocol links\n    app.on('open-url', (event, url) => {\n      event.preventDefault();\n      \n      if (url.startsWith(`${this.PROTOCOL}://`)) {\n        if (this.mainWindow) {\n          this.handleDeepLink(url);\n        } else {\n          // Store for later if app is still starting\n          this.pendingDeepLink = url;\n        }\n      }\n    });\n\n    // Windows/Linux file association\n    if (process.platform === 'win32' || process.platform === 'linux') {\n      const filePath = process.argv.find(arg => \n        this.FILE_ASSOCIATIONS.some(a => arg.endsWith(a.extension))\n      );\n      \n      if (filePath) {\n        this.pendingFileOpen = filePath;\n      }\n    }\n  }\n\n  private async handleFileOpen(filePath: string): Promise<void> {\n    // Bring window to front\n    if (this.mainWindow) {\n      this.mainWindow.show();\n      this.mainWindow.focus();\n    }\n\n    await this.openFile(filePath);\n  }\n\n  private parseDeepLink(url: string): DeepLink {\n    const urlObj = new URL(url);\n    const action = urlObj.hostname || 'open';\n    const params: Record<string, string> = {};\n\n    // Parse query parameters\n    urlObj.searchParams.forEach((value, key) => {\n      params[key] = value;\n    });\n\n    // Parse path parameters\n    if (urlObj.pathname && urlObj.pathname !== '/') {\n      params['path'] = urlObj.pathname.substring(1);\n    }\n\n    return { protocol: this.PROTOCOL, action, params };\n  }\n\n  private async openProject(data: any, filePath: string): Promise<void> {\n    this.emit('open-project', {\n      data,\n      filePath,\n      type: 'project'\n    });\n\n    // Navigate to project view\n    if (this.mainWindow && !this.mainWindow.isDestroyed()) {\n      this.mainWindow.webContents.send('open-project', { data, filePath });\n    }\n  }\n\n  private async openSession(data: any, filePath: string): Promise<void> {\n    this.emit('open-session', {\n      data,\n      filePath,\n      type: 'session'\n    });\n\n    // Navigate to session view\n    if (this.mainWindow && !this.mainWindow.isDestroyed()) {\n      this.mainWindow.webContents.send('open-session', { data, filePath });\n    }\n  }\n\n  private async openTemplate(data: any, filePath: string): Promise<void> {\n    this.emit('open-template', {\n      data,\n      filePath,\n      type: 'template'\n    });\n\n    // Navigate to template view\n    if (this.mainWindow && !this.mainWindow.isDestroyed()) {\n      this.mainWindow.webContents.send('open-template', { data, filePath });\n    }\n  }\n\n  private handleOpenAction(params: Record<string, string>): void {\n    if (params['project']) {\n      this.navigateTo(`/projects/${params['project']}`);\n    } else if (params['session']) {\n      this.navigateTo(`/sessions/${params['session']}`);\n    } else if (params['path']) {\n      this.navigateTo(params['path']);\n    }\n  }\n\n  private handleNewAction(params: Record<string, string>): void {\n    if (params['type'] === 'project') {\n      this.mainWindow?.webContents.send('new-project', params);\n    } else if (params['type'] === 'session') {\n      this.mainWindow?.webContents.send('new-session', params);\n    }\n  }\n\n  private handleShareAction(params: Record<string, string>): void {\n    this.mainWindow?.webContents.send('import-shared', params);\n  }\n\n  private navigateTo(path: string): void {\n    if (this.mainWindow && !this.mainWindow.isDestroyed()) {\n      this.mainWindow.webContents.send('navigate', path);\n    }\n  }\n\n  private showFileError(filePath: string, error: Error): void {\n    if (!this.mainWindow) return;\n\n    dialog.showErrorBox(\n      'Failed to Open File',\n      `Could not open \"${path.basename(filePath)}\":\\n${error.message}`\n    );\n  }\n}\n\n// Export singleton instance\nexport const fileAssociationService = new FileAssociationService();","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/services/mac/MacKeychainService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/main/services/mac/MenuBarService.ts","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to property where a void return was expected.","line":222,"column":20,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnProperty","endLine":222,"endColumn":75},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to property where a void return was expected.","line":226,"column":20,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnProperty","endLine":226,"endColumn":84},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":259,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":259,"endColumn":23,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6752,6752],"text":"void "},"desc":"Add void operator to ignore."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Menu Bar Service\n * Manages the persistent menu bar (tray) application for macOS\n */\n\nimport { Tray, Menu, nativeImage, app, shell, BrowserWindow } from 'electron';\nimport * as path from 'path';\nimport { EventEmitter } from 'events';\n\ninterface MenuBarStatus {\n  connected: boolean;\n  sessionActive: boolean;\n  updateAvailable: boolean;\n  syncStatus: 'idle' | 'syncing' | 'error';\n}\n\nexport class MenuBarService extends EventEmitter {\n  private tray: Tray | null = null;\n  private status: MenuBarStatus = {\n    connected: true,\n    sessionActive: false,\n    updateAvailable: false,\n    syncStatus: 'idle'\n  };\n  private contextMenu: Menu | null = null;\n  private mainWindow: BrowserWindow | null = null;\n  private statusInterval: NodeJS.Timeout | null = null;\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Initialize the menu bar service\n   */\n  public initialize(mainWindow: BrowserWindow): void {\n    this.mainWindow = mainWindow;\n    this.createTray();\n    this.updateMenu();\n    \n    // Start status monitoring\n    this.startStatusMonitoring();\n  }\n\n  /**\n   * Update the menu bar status\n   */\n  public updateStatus(updates: Partial<MenuBarStatus>): void {\n    this.status = { ...this.status, ...updates };\n    this.updateTrayIcon();\n    this.updateMenu();\n  }\n\n  /**\n   * Show a temporary status message\n   */\n  public showStatusMessage(message: string, duration = 3000): void {\n    if (!this.tray) return;\n    \n    const originalTitle = this.tray.getTitle();\n    this.tray.setTitle(message);\n    \n    setTimeout(() => {\n      if (this.tray) {\n        this.tray.setTitle(originalTitle);\n      }\n    }, duration);\n  }\n\n  /**\n   * Clean up resources\n   */\n  public destroy(): void {\n    if (this.statusInterval) {\n      clearInterval(this.statusInterval);\n      this.statusInterval = null;\n    }\n    \n    if (this.tray) {\n      this.tray.destroy();\n      this.tray = null;\n    }\n    \n    this.removeAllListeners();\n  }\n\n  private createTray(): void {\n    // Create tray icon\n    const iconPath = this.getIconPath('default');\n    const icon = nativeImage.createFromPath(iconPath);\n    \n    // Make icon smaller for menu bar (16x16 or 22x22 depending on macOS version)\n    const trayIcon = icon.resize({ width: 16, height: 16 });\n    trayIcon.setTemplateImage(true);\n    \n    this.tray = new Tray(trayIcon);\n    this.tray.setToolTip('SessionHub - AI Development Platform');\n    \n    // Click behavior - show/hide main window\n    this.tray.on('click', () => {\n      this.toggleMainWindow();\n    });\n    \n    // Right-click shows menu\n    this.tray.on('right-click', () => {\n      if (this.contextMenu) {\n        this.tray?.popUpContextMenu(this.contextMenu);\n      }\n    });\n  }\n\n  private updateTrayIcon(): void {\n    if (!this.tray) return;\n    \n    let iconName = 'default';\n    \n    if (!this.status.connected) {\n      iconName = 'disconnected';\n    } else if (this.status.syncStatus === 'error') {\n      iconName = 'error';\n    } else if (this.status.syncStatus === 'syncing') {\n      iconName = 'syncing';\n    } else if (this.status.sessionActive) {\n      iconName = 'active';\n    } else if (this.status.updateAvailable) {\n      iconName = 'update';\n    }\n    \n    const iconPath = this.getIconPath(iconName);\n    const icon = nativeImage.createFromPath(iconPath);\n    const trayIcon = icon.resize({ width: 16, height: 16 });\n    trayIcon.setTemplateImage(true);\n    \n    this.tray.setImage(trayIcon);\n  }\n\n  private getIconPath(_name: string): string {\n    // In production, these would be different icons\n    // For now, using the same icon with different states handled by macOS template images\n    return path.join(__dirname, '../../../resources/icon.png');\n  }\n\n  private updateMenu(): void {\n    const menuTemplate: Electron.MenuItemConstructorOptions[] = [\n      {\n        label: this.status.sessionActive ? '● Session Active' : '○ No Active Session',\n        enabled: false\n      },\n      { type: 'separator' },\n      {\n        label: 'Show SessionHub',\n        click: () => this.showMainWindow()\n      },\n      {\n        label: 'New Session',\n        accelerator: 'Cmd+N',\n        click: () => this.createNewSession()\n      },\n      { type: 'separator' },\n      {\n        label: 'Quick Actions',\n        submenu: [\n          {\n            label: 'Open Recent Project',\n            submenu: this.getRecentProjects()\n          },\n          {\n            label: 'Claude Auto-Accept',\n            type: 'checkbox',\n            checked: false, // This would be connected to actual state\n            click: (menuItem) => {\n              this.emit('toggle-auto-accept', menuItem.checked);\n            }\n          },\n          { type: 'separator' },\n          {\n            label: 'View Costs',\n            click: () => this.openSection('costs')\n          },\n          {\n            label: 'MCP Builder',\n            click: () => this.openSection('mcp')\n          }\n        ]\n      },\n      { type: 'separator' },\n      {\n        label: 'Status',\n        submenu: [\n          {\n            label: `Sync: ${this.status.syncStatus}`,\n            enabled: false\n          },\n          {\n            label: this.status.connected ? 'Connected' : 'Disconnected',\n            enabled: false\n          },\n          { type: 'separator' },\n          {\n            label: 'Force Sync',\n            enabled: this.status.syncStatus !== 'syncing',\n            click: () => this.emit('force-sync')\n          }\n        ]\n      },\n      { type: 'separator' },\n      {\n        label: this.status.updateAvailable ? 'Update Available...' : 'Check for Updates',\n        click: () => this.emit('check-updates')\n      },\n      {\n        label: 'Preferences...',\n        accelerator: 'Cmd+,',\n        click: () => this.openSection('settings')\n      },\n      { type: 'separator' },\n      {\n        label: 'Help',\n        submenu: [\n          {\n            label: 'Documentation',\n            click: () => shell.openExternal('https://sessionhub.com/docs')\n          },\n          {\n            label: 'Report Issue',\n            click: () => shell.openExternal('https://github.com/sessionhub/issues')\n          }\n        ]\n      },\n      { type: 'separator' },\n      {\n        label: 'Quit SessionHub',\n        accelerator: 'Cmd+Q',\n        click: () => app.quit()\n      }\n    ];\n    \n    this.contextMenu = Menu.buildFromTemplate(menuTemplate);\n  }\n\n  private toggleMainWindow(): void {\n    if (!this.mainWindow) return;\n    \n    if (this.mainWindow.isVisible()) {\n      this.mainWindow.hide();\n    } else {\n      this.showMainWindow();\n    }\n  }\n\n  private showMainWindow(): void {\n    if (!this.mainWindow) return;\n    \n    this.mainWindow.show();\n    this.mainWindow.focus();\n    \n    // Bring to front on macOS\n    if (process.platform === 'darwin') {\n      app.dock.show();\n    }\n  }\n\n  private createNewSession(): void {\n    this.showMainWindow();\n    if (this.mainWindow && !this.mainWindow.isDestroyed()) {\n      this.mainWindow.webContents.send('new-session');\n    }\n  }\n\n  private openSection(section: string): void {\n    this.showMainWindow();\n    if (this.mainWindow && !this.mainWindow.isDestroyed()) {\n      this.mainWindow.webContents.send('navigate', `/${section}`);\n    }\n  }\n\n  private getRecentProjects(): Electron.MenuItemConstructorOptions[] {\n    // This would be populated from actual project history\n    const recentProjects = [\n      { name: 'SessionHub', path: '/Users/dev/sessionhub' },\n      { name: 'MCP Server', path: '/Users/dev/mcp-server' },\n      { name: 'Claude Integration', path: '/Users/dev/claude-integration' }\n    ];\n    \n    if (recentProjects.length === 0) {\n      return [{ label: 'No Recent Projects', enabled: false }];\n    }\n    \n    return recentProjects.map(project => ({\n      label: project.name,\n      click: () => this.emit('open-project', project.path)\n    }));\n  }\n\n  private startStatusMonitoring(): void {\n    // Update status every 30 seconds\n    this.statusInterval = setInterval(() => {\n      this.emit('status-check');\n    }, 30000);\n  }\n}\n\n// Export singleton instance\nexport const menuBarService = new MenuBarService();","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/ActorStatusDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":351,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":351,"endColumn":16,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[14766,14766],"text":"void "},"desc":"Add void operator to ignore."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced Actor Status Dashboard - Real-time Two-Actor Integration Monitoring\n */\nimport React, { useState, useEffect } from 'react';\nimport { Card } from './ui/Card';\nimport { ActorStatusIndicator, useActorStatus } from './ActorStatusIndicator';\ninterface APIStatus {\n  planning: boolean;\n  execution: boolean;\n}\ninterface ViolationAlert {\n  id: string;\n  actorType: 'planning' | 'execution';\n  violationType: 'boundary' | 'content' | 'method' | 'api';\n  description: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  timestamp: string;\n  blocked: boolean;\n}\ninterface ActorActivity {\n  actorId: string;\n  actorType: 'planning' | 'execution';\n  operation: string;\n  timestamp: string;\n  status: 'started' | 'completed' | 'failed' | 'blocked';\n  duration?: number;\n}\ninterface ActorStatusDashboardProps {\n  apiStatus: APIStatus;\n  violations: ViolationAlert[];\n  activities: ActorActivity[];\n  onConfigureAPI: () => void;\n  onClearViolations: () => void;\n}\nexport const ActorStatusDashboard: React.FC<ActorStatusDashboardProps> = ({\n  apiStatus,\n  violations,\n  activities,\n  onConfigureAPI,\n  onClearViolations\n}) => {\n  const actorStatus = useActorStatus();\n  const [expandedSection, setExpandedSection] = useState<string | null>(null);\n  // Get violation counts by severity\n  const violationStats = {\n    critical: violations.filter(v => v.severity === 'critical').length,\n    high: violations.filter(v => v.severity === 'high').length,\n    medium: violations.filter(v => v.severity === 'medium').length,\n    low: violations.filter(v => v.severity === 'low').length,\n    total: violations.length\n  };\n  // Get recent activities\n  const recentActivities = activities\n    .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n    .slice(0, 10);\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical': return 'text-red-600 bg-red-100 border-red-300';\n      case 'high': return 'text-orange-600 bg-orange-100 border-orange-300';\n      case 'medium': return 'text-yellow-600 bg-yellow-100 border-yellow-300';\n      case 'low': return 'text-blue-600 bg-blue-100 border-blue-300';\n      default: return 'text-gray-600 bg-gray-100 border-gray-300';\n    }\n  };\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'text-green-600';\n      case 'failed': return 'text-red-600';\n      case 'blocked': return 'text-red-700 font-bold';\n      case 'started': return 'text-blue-600';\n      default: return 'text-gray-600';\n    }\n  };\n  const formatDuration = (duration?: number) => {\n    if (!duration) return 'N/A';\n    return duration < 1000 ? `${duration}ms` : `${(duration / 1000).toFixed(1)}s`;\n  };\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString();\n  };\n  return (\n    <div className=\"space-y-4 p-4\">\n      {/* Main Actor Status */}\n      <Card className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-lg font-semibold\">Two-Actor Integration Status</h2>\n          <div className=\"flex items-center gap-2\">\n            <span className={`px-2 py-1 rounded text-xs font-medium ${\n              apiStatus.planning && apiStatus.execution \n                ? 'bg-green-100 text-green-800' \n                : 'bg-yellow-100 text-yellow-800'\n            }`}>\n              {apiStatus.planning && apiStatus.execution ? 'Real API Active' : 'Mock Implementation'}\n            </span>\n          </div>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {/* Planning Actor Status */}\n          <div className=\"border rounded p-3\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <span className=\"text-2xl\">🧠</span>\n              <div>\n                <h3 className=\"font-medium\">Planning Actor</h3>\n                <p className=\"text-sm text-gray-600\">\n                  {apiStatus.planning ? 'Claude Chat API Connected' : 'Mock Implementation'}\n                </p>\n              </div>\n              <div className={`ml-auto w-3 h-3 rounded-full ${\n                apiStatus.planning ? 'bg-green-500 animate-pulse' : 'bg-gray-400'\n              }`} />\n            </div>\n            {actorStatus.activeActor === 'planning' && (\n              <div className=\"text-xs text-blue-600 bg-blue-50 p-2 rounded\">\n                Current: {actorStatus.currentTask || 'Active'}\n              </div>\n            )}\n          </div>\n          {/* Execution Actor Status */}\n          <div className=\"border rounded p-3\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <span className=\"text-2xl\">⚡</span>\n              <div>\n                <h3 className=\"font-medium\">Execution Actor</h3>\n                <p className=\"text-sm text-gray-600\">\n                  {apiStatus.execution ? 'Claude Code API Connected' : 'Mock Implementation'}\n                </p>\n              </div>\n              <div className={`ml-auto w-3 h-3 rounded-full ${\n                apiStatus.execution ? 'bg-green-500 animate-pulse' : 'bg-gray-400'\n              }`} />\n            </div>\n            {actorStatus.activeActor === 'execution' && (\n              <div className=\"text-xs text-green-600 bg-green-50 p-2 rounded\">\n                Current: {actorStatus.currentTask || 'Active'}\n              </div>\n            )}\n          </div>\n        </div>\n        {/* API Configuration */}\n        {(!apiStatus.planning || !apiStatus.execution) && (\n          <div className=\"mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h4 className=\"font-medium text-yellow-800\">API Configuration Required</h4>\n                <p className=\"text-sm text-yellow-700\">\n                  Configure Anthropic API keys to enable real Two-Actor integration\n                </p>\n              </div>\n              <button\n                onClick={onConfigureAPI}\n                className=\"px-3 py-1 bg-yellow-600 text-white rounded text-sm hover:bg-yellow-700\"\n              >\n                Configure\n              </button>\n            </div>\n          </div>\n        )}\n      </Card>\n      {/* Boundary Violations */}\n      {violationStats.total > 0 && (\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-semibold flex items-center gap-2\">\n              <span className=\"text-red-500\">⚠️</span>\n              Boundary Violations ({violationStats.total})\n            </h3>\n            <button\n              onClick={onClearViolations}\n              className=\"text-sm text-red-600 hover:text-red-800\"\n            >\n              Clear All\n            </button>\n          </div>\n          {/* Violation Summary */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 mb-4\">\n            {violationStats.critical > 0 && (\n              <div className=\"text-center p-2 bg-red-100 border border-red-300 rounded\">\n                <div className=\"text-lg font-bold text-red-600\">{violationStats.critical}</div>\n                <div className=\"text-xs text-red-700\">Critical</div>\n              </div>\n            )}\n            {violationStats.high > 0 && (\n              <div className=\"text-center p-2 bg-orange-100 border border-orange-300 rounded\">\n                <div className=\"text-lg font-bold text-orange-600\">{violationStats.high}</div>\n                <div className=\"text-xs text-orange-700\">High</div>\n              </div>\n            )}\n            {violationStats.medium > 0 && (\n              <div className=\"text-center p-2 bg-yellow-100 border border-yellow-300 rounded\">\n                <div className=\"text-lg font-bold text-yellow-600\">{violationStats.medium}</div>\n                <div className=\"text-xs text-yellow-700\">Medium</div>\n              </div>\n            )}\n            {violationStats.low > 0 && (\n              <div className=\"text-center p-2 bg-blue-100 border border-blue-300 rounded\">\n                <div className=\"text-lg font-bold text-blue-600\">{violationStats.low}</div>\n                <div className=\"text-xs text-blue-700\">Low</div>\n              </div>\n            )}\n          </div>\n          {/* Recent Violations */}\n          <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n            {violations.slice(0, 5).map((violation) => (\n              <div\n                key={violation.id}\n                className={`p-3 border rounded ${getSeverityColor(violation.severity)}`}\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <span className=\"font-medium capitalize\">{violation.actorType}</span>\n                      <span className=\"text-xs px-1 py-0.5 bg-white bg-opacity-50 rounded\">\n                        {violation.violationType}\n                      </span>\n                      {violation.blocked && (\n                        <span className=\"text-xs px-1 py-0.5 bg-red-600 text-white rounded\">\n                          BLOCKED\n                        </span>\n                      )}\n                    </div>\n                    <p className=\"text-sm\">{violation.description}</p>\n                    <p className=\"text-xs opacity-75 mt-1\">{formatTime(violation.timestamp)}</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n          {violations.length > 5 && (\n            <button\n              onClick={() => setExpandedSection(expandedSection === 'violations' ? null : 'violations')}\n              className=\"w-full mt-2 text-sm text-gray-600 hover:text-gray-800\"\n            >\n              {expandedSection === 'violations' ? 'Show Less' : `Show All ${violations.length} Violations`}\n            </button>\n          )}\n          {expandedSection === 'violations' && (\n            <div className=\"mt-4 space-y-2 max-h-64 overflow-y-auto\">\n              {violations.slice(5).map((violation) => (\n                <div\n                  key={violation.id}\n                  className={`p-2 border rounded text-sm ${getSeverityColor(violation.severity)}`}\n                >\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <span className=\"font-medium\">{violation.actorType}</span>\n                    <span className=\"text-xs\">{violation.violationType}</span>\n                    <span className=\"text-xs\">{formatTime(violation.timestamp)}</span>\n                  </div>\n                  <p>{violation.description}</p>\n                </div>\n              ))}\n            </div>\n          )}\n        </Card>\n      )}\n      {/* Recent Activities */}\n      <Card className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"font-semibold\">Recent Actor Activities</h3>\n          <span className=\"text-sm text-gray-600\">{activities.length} total</span>\n        </div>\n        {recentActivities.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            No recent activities\n          </div>\n        ) : (\n          <div className=\"space-y-2\">\n            {recentActivities.map((activity, index) => (\n              <div\n                key={`${activity.actorId}-${activity.timestamp}-${index}`}\n                className=\"flex items-center justify-between p-2 border rounded hover:bg-gray-50\"\n              >\n                <div className=\"flex items-center gap-3\">\n                  <span className=\"text-lg\">\n                    {activity.actorType === 'planning' ? '🧠' : '⚡'}\n                  </span>\n                  <div>\n                    <div className=\"font-medium text-sm\">{activity.operation}</div>\n                    <div className=\"text-xs text-gray-600\">\n                      {activity.actorType} • {formatTime(activity.timestamp)}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  {activity.duration && (\n                    <span className=\"text-xs text-gray-500\">\n                      {formatDuration(activity.duration)}\n                    </span>\n                  )}\n                  <span className={`text-xs font-medium ${getStatusColor(activity.status)}`}>\n                    {activity.status.toUpperCase()}\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n        {activities.length > 10 && (\n          <button\n            onClick={() => setExpandedSection(expandedSection === 'activities' ? null : 'activities')}\n            className=\"w-full mt-2 text-sm text-gray-600 hover:text-gray-800\"\n          >\n            {expandedSection === 'activities' ? 'Show Less' : `Show All ${activities.length} Activities`}\n          </button>\n        )}\n        {expandedSection === 'activities' && (\n          <div className=\"mt-4 space-y-1 max-h-64 overflow-y-auto\">\n            {activities.slice(10).map((activity, index) => (\n              <div\n                key={`${activity.actorId}-${activity.timestamp}-${index + 10}`}\n                className=\"flex items-center justify-between p-1 text-sm border rounded\"\n              >\n                <span>{activity.actorType}: {activity.operation}</span>\n                <span className={getStatusColor(activity.status)}>{activity.status}</span>\n              </div>\n            ))}\n          </div>\n        )}\n      </Card>\n      {/* Floating Actor Status Indicator */}\n      <ActorStatusIndicator\n        activeActor={actorStatus.activeActor}\n        currentTask={actorStatus.currentTask}\n        violationCount={violationStats.critical + violationStats.high}\n      />\n    </div>\n  );\n};\n// Hook for managing dashboard data\nexport const useActorDashboard = () => {\n  const [apiStatus, setApiStatus] = useState<APIStatus>({ planning: false, execution: false });\n  const [violations, setViolations] = useState<ViolationAlert[]>([]);\n  const [activities, setActivities] = useState<ActorActivity[]>([]);\n  useEffect(() => {\n    // Load initial data\n    const loadData = async () => {\n      try {\n        if (window.electronAPI?.getRealAPIStatus) {\n          const apiResponse = await window.electronAPI.getRealAPIStatus();\n          // Convert response to our APIStatus interface\n          setApiStatus({\n            planning: apiResponse.operational,\n            execution: apiResponse.operational\n          });\n        }\n        // Mock violations and activities for now\n        setViolations([]);\n        setActivities([]);\n      } catch (error) {\n      }\n    };\n    loadData();\n    // Set up listeners for updates (commented out for now)\n    // TODO: Implement these when the IPC handlers are available\n  }, []);\n  const configureAPI = async () => {\n    try {\n      await window.electronAPI?.openAPIConfiguration?.();\n    } catch (error) {\n    }\n  };\n  const clearViolations = async () => {\n    try {\n      await window.electronAPI?.clearViolations?.();\n      setViolations([]);\n    } catch (error) {\n    }\n  };\n  return {\n    apiStatus,\n    violations,\n    activities,\n    configureAPI,\n    clearViolations\n  };\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/ActorStatusDashboardWrapper.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[577,580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[577,580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[777,780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[777,780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[836,839],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[836,839],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":49,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":49,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1689,1692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1689,1692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":73,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":73,"endColumn":16,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2504,2504],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":74,"column":34,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":74,"endColumn":42},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":89,"column":22,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":89,"endColumn":42},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":90,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":90,"endColumn":48}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Wrapper for ActorStatusDashboard to handle API mismatches\n */\nimport React, { useState, useEffect } from 'react';\nimport { ActorStatusDashboard } from './ActorStatusDashboard';\n// interface APIStatusResponse {\n//   operational: boolean;\n//   message: string;\n//   lastCheck: string;\n// }\ninterface ViolationResponse {\n  id: string;\n  type: string;\n  severity: 'critical' | 'low' | 'medium' | 'high';\n  message: string;\n  timestamp: string;\n  actor: string;\n}\ninterface ActivityResponse {\n  id: string;\n  actor: string;\n  action: string;\n  timestamp: string;\n  details?: any;\n}\nexport const ActorStatusDashboardWrapper: React.FC = () => {\n  const [apiStatus, setApiStatus] = useState({ planning: false, execution: false });\n  const [violations, setViolations] = useState<any[]>([]);\n  const [activities, setActivities] = useState<any[]>([]);\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        // Load API status\n        const statusResponse = await window.electronAPI?.getRealAPIStatus?.();\n        if (statusResponse) {\n          // Convert from operational status to planning/execution status\n          setApiStatus({\n            planning: statusResponse.operational,\n            execution: statusResponse.operational\n          });\n        }\n        // Load violations\n        const violationsResponse = await window.electronAPI?.getViolations?.();\n        if (violationsResponse) {\n          // Convert violations to expected format\n          const convertedViolations = violationsResponse.map((v: ViolationResponse) => ({\n            id: v.id,\n            actorType: v.actor === 'planning' ? 'planning' : 'execution',\n            violationType: v.type as any,\n            description: v.message,\n            severity: v.severity,\n            timestamp: v.timestamp,\n            blocked: false\n          }));\n          setViolations(convertedViolations);\n        }\n        // Load activities\n        const activitiesResponse = await window.electronAPI?.getActivities?.();\n        if (activitiesResponse) {\n          // Convert activities to expected format\n          const convertedActivities = activitiesResponse.map((a: ActivityResponse) => ({\n            actorId: a.id,\n            actorType: a.actor === 'planning' ? 'planning' : 'execution',\n            operation: a.action,\n            timestamp: a.timestamp,\n            status: 'completed' as const\n          }));\n          setActivities(convertedActivities);\n        }\n      } catch (error) {\n      }\n    };\n    loadData();\n    const interval = setInterval(loadData, 5000);\n    return () => clearInterval(interval);\n  }, []);\n  const handleConfigureAPI = async () => {\n    await window.electronAPI?.openAPIConfiguration?.();\n  };\n  const handleClearViolations = async () => {\n    await window.electronAPI?.clearViolations?.();\n    setViolations([]);\n  };\n  return (\n    <ActorStatusDashboard\n      apiStatus={apiStatus}\n      violations={violations}\n      activities={activities}\n      onConfigureAPI={handleConfigureAPI}\n      onClearViolations={handleClearViolations}\n    />\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/ActorStatusIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/ActorViolationAlert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/ApiConfiguration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/ClaudeAutoAcceptSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":36,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":36,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[857,857],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":84,"column":23,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":84,"endColumn":37}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card } from '../../components/ui/Card';\nimport { Button } from '../../components/ui/Button';\nimport { \n  Settings, \n  CheckCircle, \n \n  Info,\n  Terminal,\n  GitBranch,\n  FileText,\n  Zap\n} from 'lucide-react';\n\ninterface ClaudeAutoAcceptSettings {\n  enabled: boolean;\n  sessionId?: string;\n  acceptFileEdits: boolean;\n  acceptGitOperations: boolean;\n  acceptFoundationUpdates: boolean;\n  acceptAllPrompts: boolean;\n}\n\nexport function ClaudeAutoAcceptSettings() {\n  const [settings, setSettings] = useState<ClaudeAutoAcceptSettings>({\n    enabled: true,\n    acceptFileEdits: true,\n    acceptGitOperations: true,\n    acceptFoundationUpdates: true,\n    acceptAllPrompts: true\n  });\n  const [loading, setLoading] = useState(false);\n  const [saved, setSaved] = useState(false);\n\n  useEffect(() => {\n    loadSettings();\n  }, []);\n\n  const loadSettings = async () => {\n    try {\n      const savedSettings = await window.electronAPI.claude.getAutoAcceptSettings();\n      setSettings(savedSettings);\n    } catch (error) {\n      // console.error('Failed to load Claude auto-accept settings:', error);\n    }\n  };\n\n  const saveSettings = async () => {\n    setLoading(true);\n    try {\n      await window.electronAPI.claude.setAutoAcceptSettings(settings);\n      setSaved(true);\n      setTimeout(() => setSaved(false), 3000);\n    } catch (error) {\n      // console.error('Failed to save Claude auto-accept settings:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleSetting = (key: keyof ClaudeAutoAcceptSettings) => {\n    if (typeof settings[key] === 'boolean') {\n      setSettings(prev => ({ ...prev, [key]: !prev[key] }));\n    }\n  };\n\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Settings className=\"h-6 w-6 text-gray-600 dark:text-gray-400\" />\n            <h2 className=\"text-xl font-semibold\">Claude Code Auto-Accept</h2>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {saved && (\n              <span className=\"text-sm text-green-600 dark:text-green-400 flex items-center gap-1\">\n                <CheckCircle className=\"h-4 w-4\" />\n                Saved\n              </span>\n            )}\n            <Button\n              onClick={saveSettings}\n              disabled={loading}\n              size=\"sm\"\n            >\n              {loading ? 'Saving...' : 'Save Settings'}\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg flex items-start gap-3\">\n          <Info className=\"h-5 w-5 text-blue-600 dark:text-blue-400 mt-0.5\" />\n          <div className=\"text-sm text-blue-800 dark:text-blue-300\">\n            <p className=\"font-medium mb-1\">Automatic Acceptance for Claude Code</p>\n            <p>\n              When enabled, Claude Code will automatically accept prompts for file edits, \n              git operations, and Foundation updates without requiring manual confirmation.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          {/* Master Toggle */}\n          <div className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n            <div className=\"flex items-center gap-3\">\n              <Zap className=\"h-5 w-5 text-yellow-600\" />\n              <div>\n                <p className=\"font-medium\">Auto-Accept Enabled</p>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Master switch for all auto-accept features\n                </p>\n              </div>\n            </div>\n            <button\n              onClick={() => toggleSetting('enabled')}\n              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${\n                settings.enabled \n                  ? 'bg-green-600' \n                  : 'bg-gray-300 dark:bg-gray-600'\n              }`}\n            >\n              <span\n                className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${\n                  settings.enabled ? 'translate-x-6' : 'translate-x-1'\n                }`}\n              />\n            </button>\n          </div>\n\n          {/* Individual Settings */}\n          <div className={`space-y-3 ${!settings.enabled ? 'opacity-50' : ''}`}>\n            {/* File Edits */}\n            <div className=\"flex items-center justify-between p-3 border border-gray-200 dark:border-gray-700 rounded-lg\">\n              <div className=\"flex items-center gap-3\">\n                <FileText className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n                <div>\n                  <p className=\"font-medium text-sm\">File Edits</p>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    Automatically accept file creation and modification\n                  </p>\n                </div>\n              </div>\n              <button\n                onClick={() => toggleSetting('acceptFileEdits')}\n                disabled={!settings.enabled}\n                className={`relative inline-flex h-5 w-9 items-center rounded-full transition-colors ${\n                  settings.acceptFileEdits \n                    ? 'bg-blue-600' \n                    : 'bg-gray-300 dark:bg-gray-600'\n                }`}\n              >\n                <span\n                  className={`inline-block h-3 w-3 transform rounded-full bg-white transition-transform ${\n                    settings.acceptFileEdits ? 'translate-x-5' : 'translate-x-1'\n                  }`}\n                />\n              </button>\n            </div>\n\n            {/* Git Operations */}\n            <div className=\"flex items-center justify-between p-3 border border-gray-200 dark:border-gray-700 rounded-lg\">\n              <div className=\"flex items-center gap-3\">\n                <GitBranch className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n                <div>\n                  <p className=\"font-medium text-sm\">Git Operations</p>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    Automatically accept git commits and pushes\n                  </p>\n                </div>\n              </div>\n              <button\n                onClick={() => toggleSetting('acceptGitOperations')}\n                disabled={!settings.enabled}\n                className={`relative inline-flex h-5 w-9 items-center rounded-full transition-colors ${\n                  settings.acceptGitOperations \n                    ? 'bg-blue-600' \n                    : 'bg-gray-300 dark:bg-gray-600'\n                }`}\n              >\n                <span\n                  className={`inline-block h-3 w-3 transform rounded-full bg-white transition-transform ${\n                    settings.acceptGitOperations ? 'translate-x-5' : 'translate-x-1'\n                  }`}\n                />\n              </button>\n            </div>\n\n            {/* Foundation Updates */}\n            <div className=\"flex items-center justify-between p-3 border border-gray-200 dark:border-gray-700 rounded-lg\">\n              <div className=\"flex items-center gap-3\">\n                <FileText className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n                <div>\n                  <p className=\"font-medium text-sm\">Foundation Updates</p>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    Automatically accept Foundation.md updates\n                  </p>\n                </div>\n              </div>\n              <button\n                onClick={() => toggleSetting('acceptFoundationUpdates')}\n                disabled={!settings.enabled}\n                className={`relative inline-flex h-5 w-9 items-center rounded-full transition-colors ${\n                  settings.acceptFoundationUpdates \n                    ? 'bg-blue-600' \n                    : 'bg-gray-300 dark:bg-gray-600'\n                }`}\n              >\n                <span\n                  className={`inline-block h-3 w-3 transform rounded-full bg-white transition-transform ${\n                    settings.acceptFoundationUpdates ? 'translate-x-5' : 'translate-x-1'\n                  }`}\n                />\n              </button>\n            </div>\n\n            {/* All Prompts */}\n            <div className=\"flex items-center justify-between p-3 border border-gray-200 dark:border-gray-700 rounded-lg\">\n              <div className=\"flex items-center gap-3\">\n                <Terminal className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n                <div>\n                  <p className=\"font-medium text-sm\">All Other Prompts</p>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    Automatically accept all other confirmation prompts\n                  </p>\n                </div>\n              </div>\n              <button\n                onClick={() => toggleSetting('acceptAllPrompts')}\n                disabled={!settings.enabled}\n                className={`relative inline-flex h-5 w-9 items-center rounded-full transition-colors ${\n                  settings.acceptAllPrompts \n                    ? 'bg-blue-600' \n                    : 'bg-gray-300 dark:bg-gray-600'\n                }`}\n              >\n                <span\n                  className={`inline-block h-3 w-3 transform rounded-full bg-white transition-transform ${\n                    settings.acceptAllPrompts ? 'translate-x-5' : 'translate-x-1'\n                  }`}\n                />\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {settings.sessionId && (\n          <div className=\"bg-gray-50 dark:bg-gray-800 p-3 rounded-lg\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Active for session: <span className=\"font-mono\">{settings.sessionId}</span>\n            </p>\n          </div>\n        )}\n\n        <div className=\"pt-4 border-t border-gray-200 dark:border-gray-700\">\n          <h3 className=\"text-sm font-medium mb-2\">Quick Setup</h3>\n          <p className=\"text-xs text-gray-600 dark:text-gray-400 mb-3\">\n            Run this command in your terminal to set up auto-accept system-wide:\n          </p>\n          <div className=\"bg-gray-900 dark:bg-gray-950 p-3 rounded-lg\">\n            <code className=\"text-xs text-gray-100\">\n              ./scripts/setup-claude-auto-accept.sh\n            </code>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/GitHubRepoSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/PlanningChat.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[506,509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[506,509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"../../components/ui/Button\";\nimport { Card } from \"../../components/ui/Card\";\nimport { Send, GitBranch, FileCode, Loader, User, Bot } from \"lucide-react\";\n\ninterface Message {\n  id: string;\n  role: \"user\" | \"assistant\";\n  content: string;\n  timestamp: Date;\n}\n\ninterface PlanningChatProps {\n  sessionId: string;\n  sessionName: string;\n  onPlanComplete: (plan: string) => void;\n  documentContext?: {\n    documents: any[];\n    analysisAvailable: boolean;\n  };\n}\n\nexport function PlanningChat({\n  sessionId,\n  sessionName,\n  onPlanComplete,\n}: PlanningChatProps) {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: \"1\",\n      role: \"assistant\",\n      content: `Hello! I'm the Planning Actor for your session \"${sessionName}\". Let's discuss what you want to build and create a comprehensive plan before we start execution. You can also import a GitHub repository if you'd like me to analyze an existing codebase.`,\n      timestamp: new Date(),\n    },\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const sendMessage = async () => {\n    if (!input.trim() || isLoading) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      role: \"user\",\n      content: input.trim(),\n      timestamp: new Date(),\n    };\n\n    setMessages((prev) => [...prev, userMessage]);\n    setInput(\"\");\n    setIsLoading(true);\n\n    try {\n      const response = await window.electronAPI.sendChatMessage(\n        sessionId,\n        input.trim(),\n      );\n\n      const assistantMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        role: \"assistant\",\n        content: response,\n        timestamp: new Date(),\n      };\n\n      setMessages((prev) => [...prev, assistantMessage]);\n    } catch (error: unknown) {\n      const errorMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        role: \"assistant\",\n        content: \"I apologize, but I encountered an error. Please try again.\",\n        timestamp: new Date(),\n      };\n      setMessages((prev) => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const importGitHub = async () => {\n    try {\n      const result = (await window.electronAPI.selectGitHubRepo()) as {\n        url: string;\n        name: string;\n        owner: string;\n        defaultBranch: string;\n      } | null;\n      if (result) {\n        const message: Message = {\n          id: Date.now().toString(),\n          role: \"user\",\n          content: `I'd like you to analyze this GitHub repository: ${result.url}`,\n          timestamp: new Date(),\n        };\n        setMessages((prev) => [...prev, message]);\n\n        // Trigger analysis\n        setIsLoading(true);\n        const response = await window.electronAPI.analyzeRepository(\n          sessionId,\n          result,\n        );\n\n        const assistantMessage: Message = {\n          id: (Date.now() + 1).toString(),\n          role: \"assistant\",\n          content: response,\n          timestamp: new Date(),\n        };\n        setMessages((prev) => [...prev, assistantMessage]);\n        setIsLoading(false);\n      }\n    } catch (error: unknown) {\n// REMOVED: console statement\n    }\n  };\n\n  const finalizePlan = () => {\n    const plan = messages\n      .filter((m: Message) => m.role === \"assistant\")\n      .map((m: Message) => m.content)\n      .join(\"\\n\\n\");\n    onPlanComplete(plan);\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <Card className=\"flex-1 flex flex-col m-4\">\n        <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-xl font-semibold\">Planning: {sessionName}</h2>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Discuss your requirements and I&apos;ll help create a\n                comprehensive plan\n              </p>\n            </div>\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={(): void => {\n                void importGitHub();\n              }}\n              disabled={isLoading}\n            >\n              <GitBranch className=\"h-4 w-4 mr-2\" />\n              Import GitHub Repo\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n          {messages.map((message: Message) => (\n            <div\n              key={message.id}\n              className={`flex gap-3 ${\n                message.role === \"user\" ? \"justify-end\" : \"justify-start\"\n              }`}\n            >\n              <div\n                className={`flex gap-3 max-w-[80%] ${\n                  message.role === \"user\" ? \"flex-row-reverse\" : \"flex-row\"\n                }`}\n              >\n                <div\n                  className={`p-2 rounded-full ${\n                    message.role === \"user\"\n                      ? \"bg-blue-100 dark:bg-blue-900\"\n                      : \"bg-gray-100 dark:bg-gray-800\"\n                  }`}\n                >\n                  {message.role === \"user\" ? (\n                    <User className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                  ) : (\n                    <Bot className=\"h-5 w-5 text-gray-600 dark:text-gray-400\" />\n                  )}\n                </div>\n                <div\n                  className={`px-4 py-2 rounded-lg ${\n                    message.role === \"user\"\n                      ? \"bg-blue-600 text-white\"\n                      : \"bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100\"\n                  }`}\n                >\n                  <p className=\"whitespace-pre-wrap\">{message.content}</p>\n                  <p\n                    className={`text-xs mt-1 ${\n                      message.role === \"user\"\n                        ? \"text-blue-100\"\n                        : \"text-gray-500 dark:text-gray-400\"\n                    }`}\n                  >\n                    {message.timestamp.toLocaleTimeString()}\n                  </p>\n                </div>\n              </div>\n            </div>\n          ))}\n          {isLoading && (\n            <div className=\"flex gap-3\">\n              <div className=\"p-2 rounded-full bg-gray-100 dark:bg-gray-800\">\n                <Bot className=\"h-5 w-5 text-gray-600 dark:text-gray-400\" />\n              </div>\n              <div className=\"px-4 py-2 rounded-lg bg-gray-100 dark:bg-gray-800\">\n                <Loader className=\"h-4 w-4 animate-spin text-gray-600 dark:text-gray-400\" />\n              </div>\n            </div>\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n\n        <div className=\"p-4 border-t border-gray-200 dark:border-gray-700\">\n          <div className=\"flex gap-2\">\n            <input\n              type=\"text\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyPress={(e): void => {\n                if (e.key === \"Enter\") {\n                  void sendMessage();\n                }\n              }}\n              placeholder=\"Describe what you want to build...\"\n              className=\"flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              disabled={isLoading}\n            />\n            <Button\n              onClick={(): void => {\n                void sendMessage();\n              }}\n              disabled={isLoading || !input.trim()}\n            >\n              <Send className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <div className=\"flex justify-between items-center mt-4\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              When you&apos;re ready, finalize the plan to move to execution\n              phase\n            </p>\n            <Button\n              variant=\"primary\"\n              size=\"sm\"\n              onClick={finalizePlan}\n              disabled={messages.length < 3}\n            >\n              <FileCode className=\"h-4 w-4 mr-2\" />\n              Finalize Plan\n            </Button>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/SessionProgress.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":188,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5551,5554],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5551,5554],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":198,"column":35,"nodeType":"Property","messageId":"anyAssignment","endLine":198,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":213,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6295,6298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6295,6298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":214,"column":35,"nodeType":"Property","messageId":"anyAssignment","endLine":214,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":214,"column":53,"nodeType":"Property","messageId":"anyAssignment","endLine":214,"endColumn":69}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Progress tracking UI component for real-time session monitoring\n */\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Card } from \"./ui/Card\";\n\nexport interface SessionProgressProps {\n  sessionId: string;\n}\n\nexport interface ProgressStep {\n  id: string;\n  name: string;\n  status: \"pending\" | \"active\" | \"completed\" | \"failed\";\n  startTime?: string;\n  endTime?: string;\n  details?: string;\n  error?: string;\n}\n\nexport interface SessionMetrics {\n  totalDuration: number;\n  planningDuration: number;\n  executionDuration: number;\n  queueWaitTime: number;\n  retryCount: number;\n}\n\nexport const SessionProgress: React.FC<SessionProgressProps> = ({\n  sessionId,\n}) => {\n  const [steps, setSteps] = useState<ProgressStep[]>([\n    { id: \"queue\", name: \"Queued\", status: \"completed\" },\n    { id: \"planning\", name: \"Planning\", status: \"pending\" },\n    { id: \"validation\", name: \"Validation\", status: \"pending\" },\n    { id: \"execution\", name: \"Execution\", status: \"pending\" },\n    { id: \"complete\", name: \"Complete\", status: \"pending\" },\n  ]);\n\n  const [currentMessage, setCurrentMessage] = useState<string>(\n    \"Waiting in queue...\",\n  );\n  const [metrics, setMetrics] = useState<SessionMetrics | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const updateStep = useCallback(\n    (\n      stepId: string,\n      status: ProgressStep[\"status\"],\n      details?: string,\n    ): void => {\n      setSteps((prevSteps) =>\n        prevSteps.map((step) => {\n          if (step.id === stepId) {\n            const updated = { ...step, status };\n\n            if (status === \"active\" && !step.startTime) {\n              updated.startTime = new Date().toISOString();\n            }\n\n            if (\n              (status === \"completed\" || status === \"failed\") &&\n              !step.endTime\n            ) {\n              updated.endTime = new Date().toISOString();\n            }\n\n            if (details) {\n              updated.details = details;\n            }\n\n            return updated;\n          }\n          return step;\n        }),\n      );\n    },\n    [],\n  );\n\n  const determineFailedStep = useCallback(\n    (data: {\n      actor?: string;\n      stage?: string;\n    }): string => {\n      if (data.actor === \"planning\") return \"planning\";\n      if (data.actor === \"execution\") return \"execution\";\n      if (data.stage === \"validation\") return \"validation\";\n      return \"queue\";\n    },\n    [],\n  );\n\n  const handleProgressEvent = useCallback(\n    (event: {\n      type: string;\n      data: {\n        position?: number;\n        status?: string;\n        metrics?: SessionMetrics;\n        error?: string;\n        retryCount?: number;\n        actor?: string;\n        stage?: string;\n      };\n    }) => {\n      switch (event.type) {\n        case \"queued\":\n          updateStep(\n            \"queue\",\n            \"active\",\n            \"Position in queue: \" + event.data.position,\n          );\n          setCurrentMessage(`Queued at position ${event.data.position}`);\n          break;\n\n        case \"started\":\n          updateStep(\"queue\", \"completed\");\n          updateStep(\"planning\", \"active\", \"Analyzing request...\");\n          setCurrentMessage(\"Planning Actor is analyzing your request...\");\n          break;\n\n        case \"progress\":\n          if (event.data.status === \"planning\") {\n            updateStep(\"planning\", \"active\", \"Generating instructions...\");\n            setCurrentMessage(\"Generating detailed instructions...\");\n          } else if (event.data.status === \"executing\") {\n            updateStep(\"planning\", \"completed\");\n            updateStep(\"validation\", \"completed\");\n            updateStep(\"execution\", \"active\", \"Implementing solution...\");\n            setCurrentMessage(\"Execution Actor is implementing the solution...\");\n          }\n          break;\n\n        case \"completed\":\n          updateStep(\"execution\", \"completed\");\n          updateStep(\"complete\", \"completed\", \"Success!\");\n          setCurrentMessage(\"Session completed successfully!\");\n\n          // Update metrics if available\n          if (event.data.metrics) {\n            setMetrics(event.data.metrics);\n          }\n          break;\n\n        case \"failed\":\n          const failedStep = determineFailedStep(event.data);\n          updateStep(failedStep, \"failed\", event.data.error);\n          setCurrentMessage(`Failed: ${event.data.error || \"Unknown error\"}`);\n          setError(event.data.error || null);\n          break;\n\n        case \"retrying\":\n          setCurrentMessage(`Retrying (attempt ${event.data.retryCount})...`);\n          break;\n      }\n    },\n    [updateStep, determineFailedStep],\n  );\n\n  const updateStepsFromStatus = useCallback(\n    (status: { state: string }) => {\n      if (status.state === \"planning\") {\n        updateStep(\"queue\", \"completed\");\n        updateStep(\"planning\", \"active\");\n      } else if (status.state === \"executing\") {\n        updateStep(\"queue\", \"completed\");\n        updateStep(\"planning\", \"completed\");\n        updateStep(\"validation\", \"completed\");\n        updateStep(\"execution\", \"active\");\n      } else if (status.state === \"completed\") {\n        steps.forEach((step) => updateStep(step.id, \"completed\"));\n      }\n    },\n    [steps, updateStep],\n  );\n\n  useEffect(() => {\n    // Connect to real-time progress updates\n    let cleanup: (() => void) | undefined;\n\n    const connect = async () => {\n      try {\n        // Subscribe to session progress events\n        window.sessionhub.onSessionProgress(\n          (event: any) => {\n            const typedData = event.data as {\n              position?: number;\n              status?: string;\n              metrics?: SessionMetrics;\n              error?: string;\n              retryCount?: number;\n              actor?: string;\n              stage?: string;\n            };\n            handleProgressEvent({ type: event.type, data: typedData });\n          },\n        );\n\n        setIsConnected(true);\n\n        // Get initial status\n        const status = (await window.electronAPI.getSession(sessionId)) as {\n          state: string;\n        } | null;\n        if (status) {\n          updateStepsFromStatus(status);\n        }\n\n        cleanup = () => {\n          window.sessionhub.removeSessionProgressListener((event: any) => {\n            handleProgressEvent({ type: event.type, data: event.data });\n          });\n          setIsConnected(false);\n        };\n      } catch (err) {\n// REMOVED: console statement\n        setError(\"Failed to connect to progress updates\");\n      }\n    };\n\n    void connect();\n\n    return () => {\n      cleanup?.();\n    };\n  }, [sessionId, handleProgressEvent, updateStepsFromStatus]);\n\n  const getStepIcon = (status: ProgressStep[\"status\"]) => {\n    switch (status) {\n      case \"completed\":\n        return \"✅\";\n      case \"active\":\n        return \"⏳\";\n      case \"failed\":\n        return \"❌\";\n      default:\n        return \"⭕\";\n    }\n  };\n\n  const formatDuration = (ms: number): string => {\n    if (ms < 1000) return `${ms}ms`;\n    if (ms < 60000) return `${(ms / 1000).toFixed(1)}s`;\n    return `${Math.floor(ms / 60000)}m ${Math.floor((ms % 60000) / 1000)}s`;\n  };\n\n  const calculateStepDuration = (step: ProgressStep): string | null => {\n    if (!step.startTime || !step.endTime) return null;\n    const duration =\n      new Date(step.endTime).getTime() - new Date(step.startTime).getTime();\n    return formatDuration(duration);\n  };\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold\">Session Progress</h3>\n          <div className=\"flex items-center gap-2\">\n            <span\n              className={`inline-flex h-2 w-2 rounded-full ${\n                isConnected ? \"bg-green-500\" : \"bg-gray-400\"\n              }`}\n            />\n            <span className=\"text-sm text-gray-600\">\n              {isConnected ? \"Live\" : \"Disconnected\"}\n            </span>\n          </div>\n        </div>\n\n        {/* Current Status Message */}\n        <div className=\"rounded-lg bg-gray-50 p-4\">\n          <p className=\"text-sm font-medium text-gray-900\">{currentMessage}</p>\n        </div>\n\n        {/* Progress Steps */}\n        <div className=\"relative\">\n          {/* Progress Line */}\n          <div className=\"absolute left-6 top-0 h-full w-0.5 bg-gray-200\" />\n\n          {/* Steps */}\n          <div className=\"space-y-4\">\n            {steps.map((step: ProgressStep) => (\n              <div key={step.id} className=\"relative flex items-start\">\n                {/* Step Icon */}\n                <div\n                  className={`relative z-10 flex h-12 w-12 items-center justify-center rounded-full border-2 ${\n                    step.status === \"completed\"\n                      ? \"border-green-500 bg-green-50\"\n                      : step.status === \"active\"\n                        ? \"border-blue-500 bg-blue-50 animate-pulse\"\n                        : step.status === \"failed\"\n                          ? \"border-red-500 bg-red-50\"\n                          : \"border-gray-300 bg-white\"\n                  }`}\n                >\n                  <span className=\"text-lg\">{getStepIcon(step.status)}</span>\n                </div>\n\n                {/* Step Content */}\n                <div className=\"ml-4 flex-1\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4\n                      className={`font-medium ${\n                        step.status === \"completed\"\n                          ? \"text-green-700\"\n                          : step.status === \"active\"\n                            ? \"text-blue-700\"\n                            : step.status === \"failed\"\n                              ? \"text-red-700\"\n                              : \"text-gray-500\"\n                      }`}\n                    >\n                      {step.name}\n                    </h4>\n\n                    {/* Duration */}\n                    {step.status === \"completed\" && (\n                      <span className=\"text-sm text-gray-500\">\n                        {calculateStepDuration(step)}\n                      </span>\n                    )}\n                  </div>\n\n                  {/* Details */}\n                  {step.details && (\n                    <p className=\"mt-1 text-sm text-gray-600\">{step.details}</p>\n                  )}\n\n                  {/* Error */}\n                  {step.status === \"failed\" && step.error && (\n                    <p className=\"mt-1 text-sm text-red-600\">{step.error}</p>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Metrics */}\n        {metrics && (\n          <div className=\"mt-6 rounded-lg bg-gray-50 p-4\">\n            <h4 className=\"mb-3 font-medium text-gray-900\">\n              Performance Metrics\n            </h4>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"text-gray-600\">Total Duration:</span>\n                <span className=\"ml-2 font-medium\">\n                  {formatDuration(metrics.totalDuration)}\n                </span>\n              </div>\n              <div>\n                <span className=\"text-gray-600\">Planning Time:</span>\n                <span className=\"ml-2 font-medium\">\n                  {formatDuration(metrics.planningDuration)}\n                </span>\n              </div>\n              <div>\n                <span className=\"text-gray-600\">Execution Time:</span>\n                <span className=\"ml-2 font-medium\">\n                  {formatDuration(metrics.executionDuration)}\n                </span>\n              </div>\n              <div>\n                <span className=\"text-gray-600\">Queue Wait:</span>\n                <span className=\"ml-2 font-medium\">\n                  {formatDuration(metrics.queueWaitTime)}\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Error Alert */}\n        {error && (\n          <div className=\"rounded-lg border border-red-200 bg-red-50 p-4\">\n            <p className=\"text-sm text-red-800\">{error}</p>\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/SessionProgressTracker.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[397,400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[397,400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":65,"column":22,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":65,"endColumn":52}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Card } from \"./ui/Card\";\nimport {\n  CheckCircle,\n  Circle,\n  Loader,\n  AlertCircle,\n  FileText,\n  Brain,\n  Code,\n  Eye,\n  Clock,\n  ChevronDown,\n  ChevronUp\n} from \"lucide-react\";\n\ninterface SessionProgress {\n  phase: string;\n  step: string;\n  progress: number;\n  message: string;\n  timestamp: string;\n  details?: Record<string, any>;\n}\n\ninterface SessionProgressTrackerProps {\n  sessionId: string;\n  progress: SessionProgress[];\n  isActive: boolean;\n}\n\nconst phaseIcons: Record<string, JSX.Element> = {\n  initializing: <Circle className=\"h-5 w-5\" />,\n  importing: <FileText className=\"h-5 w-5\" />,\n  analyzing: <Brain className=\"h-5 w-5\" />,\n  planning: <Brain className=\"h-5 w-5\" />,\n  executing: <Code className=\"h-5 w-5\" />,\n  reviewing: <Eye className=\"h-5 w-5\" />,\n  completed: <CheckCircle className=\"h-5 w-5\" />\n};\n\nconst phaseColors: Record<string, string> = {\n  initializing: \"text-gray-500\",\n  importing: \"text-blue-500\",\n  analyzing: \"text-purple-500\",\n  planning: \"text-indigo-500\",\n  executing: \"text-green-500\",\n  reviewing: \"text-orange-500\",\n  completed: \"text-green-600\"\n};\n\nexport function SessionProgressTracker({ \n  sessionId: _sessionId, \n  progress, \n  isActive \n}: SessionProgressTrackerProps) {\n  const [expandedPhases, setExpandedPhases] = useState<Set<string>>(new Set());\n  const [currentPhase, setCurrentPhase] = useState<string>(\"\");\n  const [overallProgress, setOverallProgress] = useState(0);\n\n  useEffect(() => {\n    if (progress.length > 0) {\n      const latest = progress[progress.length - 1]!;\n      setCurrentPhase(latest.phase);\n      setOverallProgress(latest.progress);\n      \n      // Auto-expand current phase\n      setExpandedPhases(prev => new Set(prev).add(latest.phase));\n    }\n  }, [progress]);\n\n  const togglePhase = (phase: string) => {\n    setExpandedPhases(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(phase)) {\n        newSet.delete(phase);\n      } else {\n        newSet.add(phase);\n      }\n      return newSet;\n    });\n  };\n\n  const getPhaseProgress = (phase: string): SessionProgress[] => {\n    return progress.filter(p => p.phase === phase);\n  };\n\n  const getPhaseStatus = (phase: string): 'pending' | 'active' | 'completed' => {\n    const phaseProgress = getPhaseProgress(phase);\n    if (phaseProgress.length === 0) return 'pending';\n    \n    const latestProgress = phaseProgress[phaseProgress.length - 1]?.progress ?? 0;\n    if (phase === currentPhase && isActive) return 'active';\n    if (latestProgress === 100 || progress.some(p => p.phase === 'completed')) {\n      return 'completed';\n    }\n    \n    return 'pending';\n  };\n\n  const formatTime = (timestamp: string): string => {\n    const date = new Date(timestamp);\n    return date.toLocaleTimeString();\n  };\n\n  const phases = [\n    'initializing',\n    'importing',\n    'analyzing', \n    'planning',\n    'executing',\n    'reviewing',\n    'completed'\n  ];\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-semibold mb-2\">Session Progress</h3>\n        <div className=\"relative\">\n          <div className=\"h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden\">\n            <div \n              className=\"h-full bg-gradient-to-r from-blue-500 to-green-500 transition-all duration-500\"\n              style={{ width: `${overallProgress}%` }}\n            />\n          </div>\n          <p className=\"text-sm text-gray-500 mt-1\">{overallProgress}% complete</p>\n        </div>\n      </div>\n\n      <div className=\"space-y-3\">\n        {phases.map((phase) => {\n          const status = getPhaseStatus(phase);\n          const phaseProgress = getPhaseProgress(phase);\n          const isExpanded = expandedPhases.has(phase);\n          const hasProgress = phaseProgress.length > 0;\n\n          return (\n            <div key={phase} className=\"border border-gray-200 dark:border-gray-700 rounded-lg\">\n              <button\n                onClick={() => hasProgress && togglePhase(phase)}\n                className={`w-full p-4 flex items-center justify-between hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors ${\n                  !hasProgress ? 'cursor-default' : ''\n                }`}\n                disabled={!hasProgress}\n              >\n                <div className=\"flex items-center gap-3\">\n                  <div className={`${phaseColors[phase]} ${\n                    status === 'active' ? 'animate-pulse' : ''\n                  }`}>\n                    {status === 'active' ? (\n                      <Loader className=\"h-5 w-5 animate-spin\" />\n                    ) : (\n                      phaseIcons[phase]\n                    )}\n                  </div>\n                  <div className=\"text-left\">\n                    <p className=\"font-medium capitalize\">{phase}</p>\n                    {hasProgress && (\n                      <p className=\"text-sm text-gray-500\">\n                        {phaseProgress[phaseProgress.length - 1]?.message ?? ''}\n                      </p>\n                    )}\n                  </div>\n                </div>\n                {hasProgress && (\n                  <div className=\"flex items-center gap-2\">\n                    {status === 'completed' && (\n                      <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                    )}\n                    {isExpanded ? (\n                      <ChevronUp className=\"h-4 w-4\" />\n                    ) : (\n                      <ChevronDown className=\"h-4 w-4\" />\n                    )}\n                  </div>\n                )}\n              </button>\n\n              {isExpanded && hasProgress && (\n                <div className=\"border-t border-gray-200 dark:border-gray-700 px-4 py-3 bg-gray-50 dark:bg-gray-800/50\">\n                  <div className=\"space-y-2\">\n                    {phaseProgress.map((item, index) => (\n                      <div key={index} className=\"flex items-start gap-2 text-sm\">\n                        <Clock className=\"h-3 w-3 text-gray-400 mt-0.5\" />\n                        <div className=\"flex-1\">\n                          <p className=\"text-gray-700 dark:text-gray-300\">\n                            {item.step}: {item.message}\n                          </p>\n                          {item.details && (\n                            <div className=\"mt-1 text-xs text-gray-500\">\n                              {Object.entries(item.details).map(([key, value]) => (\n                                <span key={key} className=\"mr-3\">\n                                  {key}: {typeof value === 'object' ? JSON.stringify(value) : value}\n                                </span>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                        <span className=\"text-xs text-gray-400\">\n                          {formatTime(item.timestamp)}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n\n      {!isActive && overallProgress === 100 && (\n        <div className=\"mt-4 p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n          <div className=\"flex items-center gap-2\">\n            <CheckCircle className=\"h-5 w-5 text-green-600\" />\n            <p className=\"text-sm font-medium text-green-800 dark:text-green-200\">\n              Session completed successfully!\n            </p>\n          </div>\n        </div>\n      )}\n\n      {!isActive && overallProgress < 100 && progress.some(p => p.details?.['error']) && (\n        <div className=\"mt-4 p-4 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n          <div className=\"flex items-center gap-2\">\n            <AlertCircle className=\"h-5 w-5 text-red-600\" />\n            <p className=\"text-sm font-medium text-red-800 dark:text-red-200\">\n              Session encountered an error\n            </p>\n          </div>\n        </div>\n      )}\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/SessionWorkflow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/SessionWorkflowEnhanced.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[892,895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[892,895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleFiles'. Either include it or remove the dependency array.","line":106,"column":6,"nodeType":"ArrayExpression","endLine":106,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [handleFiles]","fix":{"range":[2582,2584],"text":"[handleFiles]"}}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":125,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":125,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3245,3248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3245,3248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"jsx-a11y/alt-text","severity":1,"message":"Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","line":222,"column":14,"nodeType":"JSXOpeningElement","endLine":222,"endColumn":43},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":412,"column":26,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":412,"endColumn":38},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":423,"column":34,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":423,"endColumn":52}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport { ApiConfiguration } from \"./ApiConfiguration\";\nimport { PlanningChat } from \"./PlanningChat\";\nimport { Button } from \"./ui/Button\";\nimport { Card } from \"./ui/Card\";\nimport {\n  CheckCircle,\n  Circle,\n  ArrowRight,\n  PlayCircle,\n  MessageSquare,\n  Code,\n  Upload,\n  FileText,\n  Image,\n  AlertCircle,\n  Loader,\n  X\n} from \"lucide-react\";\n\ninterface SessionDocument {\n  id: string;\n  name: string;\n  type: 'pdf' | 'docx' | 'txt' | 'md' | 'png' | 'jpg';\n  size: number;\n  status: 'pending' | 'importing' | 'analyzing' | 'ready' | 'error';\n  analysis?: {\n    requirementCount: number;\n    ambiguityCount: number;\n    confidenceScore: number;\n  };\n  error?: string;\n}\n\ninterface SessionProgress {\n  phase: string;\n  step: string;\n  progress: number;\n  message: string;\n  timestamp: string;\n  details?: Record<string, any>;\n}\n\ninterface Session {\n  id: string;\n  name: string;\n  status: \"configuring\" | \"document-import\" | \"planning\" | \"executing\" | \"completed\";\n  documents: SessionDocument[];\n  plan?: string;\n  results?: unknown;\n  progress: SessionProgress[];\n}\n\nexport default function SessionWorkflowEnhanced() {\n  const [hasApiKey, setHasApiKey] = useState(false);\n  const [currentSession, setCurrentSession] = useState<Session | null>(null);\n  const [isCheckingApiKey, setIsCheckingApiKey] = useState(true);\n  const [dragActive, setDragActive] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  useEffect(() => {\n    void checkApiKey();\n  }, []);\n\n  const checkApiKey = async () => {\n    try {\n      const hasKey = await window.electronAPI.checkApiKey();\n      setHasApiKey(hasKey);\n    } catch (error: unknown) {\n      // Error checking API key\n    } finally {\n      setIsCheckingApiKey(false);\n    }\n  };\n\n  const createNewSession = () => {\n    const session: Session = {\n      id: Date.now().toString(),\n      name: `Session ${new Date().toLocaleString()}`,\n      status: \"document-import\",\n      documents: [],\n      progress: []\n    };\n    setCurrentSession(session);\n  };\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = useCallback(async (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n\n    const files = Array.from(e.dataTransfer.files);\n    await handleFiles(files);\n  }, []);\n\n  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files ? Array.from(e.target.files) : [];\n    await handleFiles(files);\n  };\n\n  const handleFiles = async (files: File[]) => {\n    if (!currentSession) return;\n\n    const allowedTypes = ['pdf', 'docx', 'txt', 'md', 'png', 'jpg', 'jpeg'];\n    const newDocuments: SessionDocument[] = [];\n\n    for (const file of files) {\n      const ext = file.name.split('.').pop()?.toLowerCase() || '';\n      if (allowedTypes.includes(ext)) {\n        newDocuments.push({\n          id: `${Date.now()}_${Math.random()}`,\n          name: file.name,\n          type: ext as any,\n          size: file.size,\n          status: 'pending'\n        });\n      }\n    }\n\n    setCurrentSession({\n      ...currentSession,\n      documents: [...currentSession.documents, ...newDocuments]\n    });\n\n    // Simulate document processing\n    setIsProcessing(true);\n    for (const doc of newDocuments) {\n      await processDocument(doc);\n    }\n    setIsProcessing(false);\n  };\n\n  const processDocument = async (doc: SessionDocument) => {\n    // Simulate import\n    updateDocumentStatus(doc.id, 'importing');\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Simulate analysis\n    updateDocumentStatus(doc.id, 'analyzing');\n    await new Promise(resolve => setTimeout(resolve, 1500));\n\n    // Complete with mock analysis\n    updateDocumentStatus(doc.id, 'ready', {\n      requirementCount: Math.floor(Math.random() * 20) + 5,\n      ambiguityCount: Math.floor(Math.random() * 5),\n      confidenceScore: 0.8 + Math.random() * 0.15\n    });\n  };\n\n  const updateDocumentStatus = (\n    docId: string,\n    status: SessionDocument['status'],\n    analysis?: SessionDocument['analysis']\n  ) => {\n    if (!currentSession) return;\n\n    setCurrentSession({\n      ...currentSession,\n      documents: currentSession.documents.map(doc =>\n        doc.id === docId ? { ...doc, status, analysis } : doc\n      )\n    });\n  };\n\n  const removeDocument = (docId: string) => {\n    if (!currentSession) return;\n\n    setCurrentSession({\n      ...currentSession,\n      documents: currentSession.documents.filter(doc => doc.id !== docId)\n    });\n  };\n\n  const proceedToPlanningWithDocuments = () => {\n    if (!currentSession) return;\n    setCurrentSession({\n      ...currentSession,\n      status: \"planning\"\n    });\n  };\n\n  const handlePlanComplete = (plan: string) => {\n    if (currentSession) {\n      setCurrentSession({\n        ...currentSession,\n        status: \"executing\",\n        plan,\n      });\n    }\n  };\n\n  const handleExecutionComplete = (results: unknown) => {\n    if (currentSession) {\n      setCurrentSession({\n        ...currentSession,\n        status: \"completed\",\n        results,\n      });\n    }\n  };\n\n  const formatFileSize = (bytes: number): string => {\n    if (bytes < 1024) return bytes + ' B';\n    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';\n    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';\n  };\n\n  const getFileIcon = (type: string) => {\n    if (['png', 'jpg', 'jpeg'].includes(type)) {\n      return <Image className=\"h-5 w-5\" />;\n    }\n    return <FileText className=\"h-5 w-5\" />;\n  };\n\n  if (isCheckingApiKey) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600 dark:text-gray-400\">\n            Loading SessionHub...\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!hasApiKey) {\n    return <ApiConfiguration onComplete={() => setHasApiKey(true)} />;\n  }\n\n  if (!currentSession) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-3xl font-bold mb-8\">SessionHub</h1>\n\n          <Card className=\"p-8\">\n            <h2 className=\"text-xl font-semibold mb-4\">\n              Welcome to SessionHub\n            </h2>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n              Create a new session to start planning and building your project\n              with the Two-Actor Model. You can now import documents and visual references\n              to guide the planning process.\n            </p>\n\n            <div className=\"space-y-4 mb-8\">\n              <div className=\"flex items-center gap-3\">\n                <Upload className=\"h-5 w-5 text-indigo-600\" />\n                <div>\n                  <h3 className=\"font-medium\">1. Import Documents (Optional)</h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Upload requirements docs, mockups, or screenshots\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-3\">\n                <MessageSquare className=\"h-5 w-5 text-blue-600\" />\n                <div>\n                  <h3 className=\"font-medium\">2. Planning Phase</h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Discuss requirements with document context\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-3\">\n                <Code className=\"h-5 w-5 text-green-600\" />\n                <div>\n                  <h3 className=\"font-medium\">3. Execution Phase</h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    The Execution Actor implements your plan\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-3\">\n                <CheckCircle className=\"h-5 w-5 text-purple-600\" />\n                <div>\n                  <h3 className=\"font-medium\">4. Review Results</h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    See what was built and test your application\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <Button onClick={createNewSession} size=\"lg\" className=\"w-full\">\n              <PlayCircle className=\"h-5 w-5 mr-2\" />\n              Start New Session\n            </Button>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      {/* Progress Bar */}\n      <div className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"max-w-4xl mx-auto px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-8\">\n              <div\n                className={`flex items-center gap-2 ${\n                  currentSession.status === \"document-import\"\n                    ? \"text-blue-600\"\n                    : \"text-green-600\"\n                }`}\n              >\n                {currentSession.status !== \"document-import\" ? (\n                  <CheckCircle className=\"h-5 w-5\" />\n                ) : (\n                  <Circle className=\"h-5 w-5\" />\n                )}\n                <span className=\"font-medium\">Documents</span>\n              </div>\n\n              <ArrowRight className=\"h-4 w-4 text-gray-400\" />\n\n              <div\n                className={`flex items-center gap-2 ${\n                  currentSession.status === \"planning\"\n                    ? \"text-blue-600\"\n                    : [\"executing\", \"completed\"].includes(currentSession.status)\n                      ? \"text-green-600\"\n                      : \"text-gray-400\"\n                }`}\n              >\n                {[\"executing\", \"completed\"].includes(currentSession.status) ? (\n                  <CheckCircle className=\"h-5 w-5\" />\n                ) : (\n                  <Circle className=\"h-5 w-5\" />\n                )}\n                <span className=\"font-medium\">Planning</span>\n              </div>\n\n              <ArrowRight className=\"h-4 w-4 text-gray-400\" />\n\n              <div\n                className={`flex items-center gap-2 ${\n                  currentSession.status === \"executing\"\n                    ? \"text-blue-600\"\n                    : currentSession.status === \"completed\"\n                      ? \"text-green-600\"\n                      : \"text-gray-400\"\n                }`}\n              >\n                {currentSession.status === \"completed\" ? (\n                  <CheckCircle className=\"h-5 w-5\" />\n                ) : (\n                  <Circle className=\"h-5 w-5\" />\n                )}\n                <span className=\"font-medium\">Execution</span>\n              </div>\n\n              <ArrowRight className=\"h-4 w-4 text-gray-400\" />\n\n              <div\n                className={`flex items-center gap-2 ${\n                  currentSession.status === \"completed\"\n                    ? \"text-green-600\"\n                    : \"text-gray-400\"\n                }`}\n              >\n                <Circle className=\"h-5 w-5\" />\n                <span className=\"font-medium\">Review</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content Area */}\n      <div className=\"flex-1\">\n        {currentSession.status === \"document-import\" && (\n          <div className=\"p-8\">\n            <div className=\"max-w-4xl mx-auto\">\n              <Card className=\"p-8\">\n                <h2 className=\"text-2xl font-bold mb-4\">Import Documents (Optional)</h2>\n                <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n                  Upload any requirements documents, mockups, or screenshots to provide\n                  context for your project. The Planning Actor will analyze these to better\n                  understand your needs.\n                </p>\n\n                {/* Drop Zone */}\n                <div\n                  className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n                    dragActive\n                      ? \"border-blue-500 bg-blue-50 dark:bg-blue-900/20\"\n                      : \"border-gray-300 dark:border-gray-600\"\n                  }`}\n                  onDragEnter={handleDrag}\n                  onDragLeave={handleDrag}\n                  onDragOver={handleDrag}\n                  onDrop={handleDrop}\n                >\n                  <Upload className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n                  <p className=\"text-lg mb-2\">\n                    Drop files here or{\" \"}\n                    <label className=\"text-blue-600 hover:text-blue-700 cursor-pointer\">\n                      browse\n                      <input\n                        type=\"file\"\n                        multiple\n                        className=\"hidden\"\n                        onChange={handleFileSelect}\n                        accept=\".pdf,.docx,.txt,.md,.png,.jpg,.jpeg\"\n                      />\n                    </label>\n                  </p>\n                  <p className=\"text-sm text-gray-500\">\n                    Supports PDF, Word, Text, Markdown, PNG, and JPEG files (max 50MB)\n                  </p>\n                </div>\n\n                {/* Document List */}\n                {currentSession.documents.length > 0 && (\n                  <div className=\"mt-6 space-y-3\">\n                    <h3 className=\"font-medium mb-2\">Imported Documents</h3>\n                    {currentSession.documents.map((doc) => (\n                      <div\n                        key={doc.id}\n                        className=\"flex items-center justify-between bg-gray-50 dark:bg-gray-800 rounded-lg p-4\"\n                      >\n                        <div className=\"flex items-center gap-3 flex-1\">\n                          {getFileIcon(doc.type)}\n                          <div className=\"flex-1\">\n                            <p className=\"font-medium\">{doc.name}</p>\n                            <p className=\"text-sm text-gray-500\">\n                              {formatFileSize(doc.size)}\n                              {doc.analysis && (\n                                <span className=\"ml-2\">\n                                  • {doc.analysis.requirementCount} requirements •{\" \"}\n                                  {Math.round(doc.analysis.confidenceScore * 100)}% confidence\n                                </span>\n                              )}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          {doc.status === 'importing' && (\n                            <div className=\"flex items-center gap-2 text-blue-600\">\n                              <Loader className=\"h-4 w-4 animate-spin\" />\n                              <span className=\"text-sm\">Importing...</span>\n                            </div>\n                          )}\n                          {doc.status === 'analyzing' && (\n                            <div className=\"flex items-center gap-2 text-purple-600\">\n                              <Loader className=\"h-4 w-4 animate-spin\" />\n                              <span className=\"text-sm\">Analyzing...</span>\n                            </div>\n                          )}\n                          {doc.status === 'ready' && (\n                            <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                          )}\n                          {doc.status === 'error' && (\n                            <AlertCircle className=\"h-5 w-5 text-red-600\" />\n                          )}\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removeDocument(doc.id)}\n                            disabled={isProcessing}\n                          >\n                            <X className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n\n                {/* Actions */}\n                <div className=\"mt-8 flex gap-4\">\n                  <Button\n                    onClick={proceedToPlanningWithDocuments}\n                    variant=\"primary\"\n                    disabled={isProcessing}\n                    className=\"flex-1\"\n                  >\n                    {currentSession.documents.length > 0\n                      ? `Continue with ${currentSession.documents.length} document${\n                          currentSession.documents.length > 1 ? \"s\" : \"\"\n                        }`\n                      : \"Skip and Continue\"}\n                    <ArrowRight className=\"h-4 w-4 ml-2\" />\n                  </Button>\n                </div>\n              </Card>\n            </div>\n          </div>\n        )}\n\n        {currentSession.status === \"planning\" && (\n          <PlanningChat\n            sessionId={currentSession.id}\n            sessionName={currentSession.name}\n            onPlanComplete={handlePlanComplete}\n            documentContext={{\n              documents: currentSession.documents,\n              analysisAvailable: currentSession.documents.some(d => d.analysis)\n            }}\n          />\n        )}\n\n        {currentSession.status === \"executing\" && (\n          <div className=\"p-8\">\n            <Card className=\"max-w-4xl mx-auto p-8\">\n              <h2 className=\"text-2xl font-bold mb-4\">Executing Plan</h2>\n              <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n                The Execution Actor is now implementing your plan...\n              </p>\n              <div className=\"space-y-4\">\n                <div className=\"bg-gray-100 dark:bg-gray-800 rounded-lg p-4\">\n                  <pre className=\"whitespace-pre-wrap text-sm\">\n                    {currentSession.plan}\n                  </pre>\n                </div>\n                <Button\n                  onClick={(): void => {\n                    handleExecutionComplete({ success: true });\n                  }}\n                >\n                  Complete Execution (Demo)\n                </Button>\n              </div>\n            </Card>\n          </div>\n        )}\n\n        {currentSession.status === \"completed\" && (\n          <div className=\"p-8\">\n            <Card className=\"max-w-4xl mx-auto p-8\">\n              <h2 className=\"text-2xl font-bold mb-4\">Session Complete!</h2>\n              <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n                Your project has been successfully built.\n              </p>\n              \n              {currentSession.documents.length > 0 && (\n                <div className=\"mb-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                  <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n                    <strong>Documents Used:</strong> {currentSession.documents.length} document(s) \n                    were analyzed to guide this implementation.\n                  </p>\n                </div>\n              )}\n              \n              <div className=\"space-y-4\">\n                <Button\n                  onClick={() => setCurrentSession(null)}\n                  variant=\"primary\"\n                >\n                  Start New Session\n                </Button>\n              </div>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/UpdateNotification.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":33,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":33,"endColumn":23,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[962,962],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1040,1043],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1040,1043],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1072,1075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1072,1075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1209,1212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1209,1212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1246,1249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1246,1249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1328,1331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1328,1331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":61,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":61,"endColumn":74},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1791,1794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1791,1794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2329,2332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2329,2332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2536,2539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2536,2539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":116,"column":31,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":116,"endColumn":47}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Update Notification Component\n * Shows auto-update status and download progress\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Card } from '../../components/ui/Card';\nimport { Button } from '../../components/ui/Button';\n\ninterface UpdateInfo {\n  version: string;\n  releaseNotes?: string;\n  releaseDate?: string;\n}\n\ninterface UpdateProgress {\n  bytesPerSecond: number;\n  percent: number;\n  transferred: number;\n  total: number;\n}\n\nexport function UpdateNotification() {\n  const [updateAvailable, setUpdateAvailable] = useState(false);\n  const [updateInfo, setUpdateInfo] = useState<UpdateInfo | null>(null);\n  const [downloading, setDownloading] = useState(false);\n  const [downloadProgress, setDownloadProgress] = useState<UpdateProgress | null>(null);\n  const [updateReady, setUpdateReady] = useState(false);\n  const [showNotification, setShowNotification] = useState(false);\n\n  useEffect(() => {\n    // Check for updates on mount\n    checkForUpdates();\n\n    // Listen for update events\n    (window.sessionhub as any).onUpdateAvailable?.((info: any) => {\n      setUpdateInfo(info);\n      setUpdateAvailable(true);\n      setShowNotification(true);\n    });\n\n    (window.sessionhub as any).onDownloadProgress?.((progress: any) => {\n      setDownloadProgress(progress);\n    });\n\n    (window.sessionhub as any).onUpdateDownloaded?.(() => {\n      setDownloading(false);\n      setUpdateReady(true);\n      setShowNotification(true);\n    });\n\n    return () => {\n      window.sessionhub.removeAllListeners('update-available');\n      window.sessionhub.removeAllListeners('download-progress');\n      window.sessionhub.removeAllListeners('update-downloaded');\n    };\n  }, []);\n\n  const checkForUpdates = async () => {\n    try {\n      const status = await (window.sessionhub as any).checkForUpdates?.();\n      if (status.available && status.updateInfo) {\n        setUpdateInfo(status.updateInfo);\n        setUpdateAvailable(true);\n        setShowNotification(true);\n      }\n      if (status.downloaded) {\n        setUpdateReady(true);\n        setShowNotification(true);\n      }\n    } catch (error) {\n      // console.error('Failed to check for updates:', error);\n    }\n  };\n\n  const handleDownload = async () => {\n    setDownloading(true);\n    setShowNotification(false);\n    try {\n      await (window.sessionhub as any).downloadUpdate?.();\n    } catch (error) {\n      // console.error('Failed to download update:', error);\n      setDownloading(false);\n    }\n  };\n\n  const handleInstall = () => {\n    (window.sessionhub as any).installUpdate?.();\n  };\n\n  const formatBytes = (bytes: number) => {\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 Bytes';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n  };\n\n  const formatSpeed = (bytesPerSecond: number) => {\n    return formatBytes(bytesPerSecond) + '/s';\n  };\n\n  if (!showNotification && !downloading) return null;\n\n  return (\n    <div className=\"fixed bottom-4 right-4 z-50 max-w-md\">\n      <Card className=\"p-4 shadow-lg\">\n        {updateAvailable && !downloading && !updateReady && (\n          <>\n            <h3 className=\"text-lg font-semibold mb-2\">\n              Update Available\n            </h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\n              Version {updateInfo?.version} is now available\n            </p>\n            <div className=\"flex gap-2\">\n              <Button onClick={handleDownload} variant=\"primary\">\n                Download Update\n              </Button>\n              <Button onClick={() => setShowNotification(false)} variant=\"ghost\">\n                Later\n              </Button>\n            </div>\n          </>\n        )}\n\n        {downloading && downloadProgress && (\n          <>\n            <h3 className=\"text-lg font-semibold mb-2\">\n              Downloading Update\n            </h3>\n            <div className=\"mb-3\">\n              <div className=\"flex justify-between text-sm text-gray-600 dark:text-gray-400 mb-1\">\n                <span>{Math.round(downloadProgress.percent)}%</span>\n                <span>{formatSpeed(downloadProgress.bytesPerSecond)}</span>\n              </div>\n              <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                <div\n                  className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                  style={{ width: `${downloadProgress.percent}%` }}\n                />\n              </div>\n              <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                {formatBytes(downloadProgress.transferred)} / {formatBytes(downloadProgress.total)}\n              </div>\n            </div>\n          </>\n        )}\n\n        {updateReady && (\n          <>\n            <h3 className=\"text-lg font-semibold mb-2\">\n              Update Ready to Install\n            </h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\n              The update has been downloaded and is ready to install. \n              SessionHub will restart to apply the update.\n            </p>\n            <div className=\"flex gap-2\">\n              <Button onClick={handleInstall} variant=\"primary\">\n                Restart & Install\n              </Button>\n              <Button onClick={() => setShowNotification(false)} variant=\"ghost\">\n                Install Later\n              </Button>\n            </div>\n          </>\n        )}\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/admin/AdminDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":20,"column":10,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":20,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[801,804],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[801,804],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":23,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":23,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[838,838],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":24,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":24,"endColumn":23,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[862,862],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":29,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":29,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":30,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":30,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":42,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":42,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":52,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":52,"endColumn":72},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":105,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":105,"endColumn":49},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":108,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":108,"endColumn":46}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { Button } from '../ui/Button';\nimport { Card } from '../ui/Card';\nimport { SystemMonitor } from './SystemMonitor';\nimport { UserManagement } from './UserManagement';\nimport { AuditLog } from './AuditLog';\nimport { EmergencyPanel } from './EmergencyPanel';\n\ninterface AdminDashboardProps {\n  onClose?: () => void;\n}\n\ntype TabType = 'overview' | 'users' | 'system' | 'audit' | 'emergency';\n\nexport const AdminDashboard: React.FC<AdminDashboardProps> = ({ onClose }) => {\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [isSuperAdmin, setIsSuperAdmin] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState<TabType>('overview');\n  const [systemStats, setSystemStats] = useState<any>(null);\n\n  useEffect(() => {\n    checkAdminAccess();\n    loadSystemStats();\n  }, []);\n\n  const checkAdminAccess = async () => {\n    try {\n      const adminResult = await window.electron.invoke('admin:check-access');\n      const superAdminResult = await window.electron.invoke('admin:check-super-access');\n      \n      setIsAdmin(adminResult.success && adminResult.isAdmin);\n      setIsSuperAdmin(superAdminResult.success && superAdminResult.isSuperAdmin);\n    } catch (error) {\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadSystemStats = async () => {\n    try {\n      const result = await window.electron.invoke('admin:get-system-stats');\n      if (result.success) {\n        setSystemStats(result.stats);\n      }\n    } catch (error) {\n    }\n  };\n\n  const performHealthCheck = async () => {\n    try {\n      const result = await window.electron.invoke('admin:health-check');\n      if (result.success) {\n        alert(`System Health: ${result.overallHealth ? 'Healthy' : 'Issues Detected'}\\n\\nDatabase: ${result.healthChecks.database ? '✓' : '✗'}\\nAuthentication: ${result.healthChecks.authentication ? '✓' : '✗'}\\nServices: ${result.healthChecks.services ? '✓' : '✗'}`);\n      }\n    } catch (error) {\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n        <Card className=\"p-8\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Verifying admin access...</p>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!isAdmin) {\n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n        <Card className=\"p-8 max-w-md\">\n          <h2 className=\"text-2xl font-bold text-red-600 mb-4\">Access Denied</h2>\n          <p className=\"text-gray-600 mb-6\">You do not have administrator privileges to access this area.</p>\n          <Button onClick={onClose} variant=\"primary\">Close</Button>\n        </Card>\n      </div>\n    );\n  }\n\n  const tabs = [\n    { id: 'overview' as TabType, label: 'Overview', icon: '📊' },\n    { id: 'users' as TabType, label: 'Users', icon: '👥' },\n    { id: 'system' as TabType, label: 'System', icon: '🖥️' },\n    { id: 'audit' as TabType, label: 'Audit Log', icon: '📋' },\n    ...(isSuperAdmin ? [{ id: 'emergency' as TabType, label: 'Emergency', icon: '🚨' }] : [])\n  ];\n\n  return (\n    <div className=\"fixed inset-0 bg-gray-50 dark:bg-gray-900 z-50 overflow-hidden\">\n      {/* Header */}\n      <div className=\"bg-white dark:bg-gray-800 border-b dark:border-gray-700 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              Admin Dashboard\n            </h1>\n            <span className=\"px-3 py-1 text-sm rounded-full bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">\n              {isSuperAdmin ? 'Super Admin' : 'Admin'}\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Button onClick={performHealthCheck} variant=\"secondary\">\n              Health Check\n            </Button>\n            <Button onClick={loadSystemStats} variant=\"secondary\">\n              Refresh\n            </Button>\n            <Button onClick={onClose} variant=\"ghost\">\n              ✕\n            </Button>\n          </div>\n        </div>\n\n        {/* Tabs */}\n        <div className=\"flex space-x-6 mt-6\">\n          {tabs.map(tab => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id)}\n              className={`flex items-center space-x-2 pb-3 border-b-2 transition-colors ${\n                activeTab === tab.id\n                  ? 'border-blue-600 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200'\n              }`}\n            >\n              <span>{tab.icon}</span>\n              <span>{tab.label}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-auto p-6\">\n        {activeTab === 'overview' && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card className=\"p-6\">\n              <h3 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Total Users</h3>\n              <p className=\"text-3xl font-bold text-gray-900 dark:text-white mt-2\">\n                {systemStats?.totalUsers || 0}\n              </p>\n              <p className=\"text-sm text-green-600 mt-2\">\n                {systemStats?.activeUsers || 0} active\n              </p>\n            </Card>\n\n            <Card className=\"p-6\">\n              <h3 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Total Projects</h3>\n              <p className=\"text-3xl font-bold text-gray-900 dark:text-white mt-2\">\n                {systemStats?.totalProjects || 0}\n              </p>\n            </Card>\n\n            <Card className=\"p-6\">\n              <h3 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Total Sessions</h3>\n              <p className=\"text-3xl font-bold text-gray-900 dark:text-white mt-2\">\n                {systemStats?.totalSessions || 0}\n              </p>\n            </Card>\n\n            <Card className=\"p-6\">\n              <h3 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Recent Errors</h3>\n              <p className=\"text-3xl font-bold text-gray-900 dark:text-white mt-2\">\n                {systemStats?.recentErrors || 0}\n              </p>\n              <p className=\"text-sm text-gray-500 mt-2\">Last 24 hours</p>\n            </Card>\n          </div>\n        )}\n\n        {activeTab === 'users' && <UserManagement />}\n        {activeTab === 'system' && <SystemMonitor />}\n        {activeTab === 'audit' && <AuditLog />}\n        {activeTab === 'emergency' && isSuperAdmin && <EmergencyPanel />}\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/admin/AuditLog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[275,278],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[275,278],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":30,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":30,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[733,733],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAuditLogs'. Either include it or remove the dependency array.","line":31,"column":6,"nodeType":"ArrayExpression","endLine":31,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadAuditLogs]","fix":{"range":[755,757],"text":"[loadAuditLogs]"}}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":36,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":36,"endColumn":83},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":48,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":48,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1108,1108],"text":"void "},"desc":"Add void operator to ignore."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\n\ninterface AuditLogEntry {\n  id: string;\n  adminId: string;\n  action: string;\n  targetType?: string;\n  targetId?: string;\n  details?: Record<string, any>;\n  ipAddress?: string;\n  userAgent?: string;\n  createdAt: string;\n}\n\nexport const AuditLog: React.FC = () => {\n  const [logs, setLogs] = useState<AuditLogEntry[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [filters, setFilters] = useState({\n    action: '',\n    targetType: '',\n    startDate: '',\n    endDate: '',\n    limit: 100\n  });\n  const [expandedLogs, setExpandedLogs] = useState<Set<string>>(new Set());\n\n  useEffect(() => {\n    loadAuditLogs();\n  }, []);\n\n  const loadAuditLogs = async () => {\n    try {\n      setLoading(true);\n      const result = await window.electron.invoke('admin:get-audit-logs', filters);\n      if (result.success) {\n        setLogs(result.logs);\n      } else {\n      }\n    } catch (error) {\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const applyFilters = () => {\n    loadAuditLogs();\n  };\n\n  const clearFilters = () => {\n    setFilters({\n      action: '',\n      targetType: '',\n      startDate: '',\n      endDate: '',\n      limit: 100\n    });\n  };\n\n  const toggleLogExpansion = (logId: string) => {\n    const newExpanded = new Set(expandedLogs);\n    if (newExpanded.has(logId)) {\n      newExpanded.delete(logId);\n    } else {\n      newExpanded.add(logId);\n    }\n    setExpandedLogs(newExpanded);\n  };\n\n  const getActionColor = (action: string) => {\n    if (action.includes('DELETE') || action.includes('SUSPEND')) {\n      return 'text-red-600 bg-red-100 dark:bg-red-900/20';\n    }\n    if (action.includes('UPDATE') || action.includes('EDIT')) {\n      return 'text-yellow-600 bg-yellow-100 dark:bg-yellow-900/20';\n    }\n    if (action.includes('CREATE') || action.includes('ACTIVATE')) {\n      return 'text-green-600 bg-green-100 dark:bg-green-900/20';\n    }\n    if (action.includes('EMERGENCY')) {\n      return 'text-purple-600 bg-purple-100 dark:bg-purple-900/20';\n    }\n    return 'text-blue-600 bg-blue-100 dark:bg-blue-900/20';\n  };\n\n  const exportLogs = () => {\n    const csvContent = [\n      ['Timestamp', 'Admin ID', 'Action', 'Target Type', 'Target ID', 'Details', 'IP Address'].join(','),\n      ...logs.map(log => [\n        new Date(log.createdAt).toISOString(),\n        log.adminId,\n        log.action,\n        log.targetType || '',\n        log.targetId || '',\n        JSON.stringify(log.details || {}),\n        log.ipAddress || ''\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `audit-log-${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filters */}\n      <Card className=\"p-4\">\n        <h3 className=\"text-lg font-semibold mb-4\">Filters</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Action</label>\n            <input\n              type=\"text\"\n              placeholder=\"e.g., UPDATE_USER_ROLE\"\n              value={filters.action}\n              onChange={(e) => setFilters({ ...filters, action: e.target.value })}\n              className=\"w-full px-3 py-2 border rounded-lg dark:bg-gray-800 dark:border-gray-700\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Target Type</label>\n            <select\n              value={filters.targetType}\n              onChange={(e) => setFilters({ ...filters, targetType: e.target.value })}\n              className=\"w-full px-3 py-2 border rounded-lg dark:bg-gray-800 dark:border-gray-700\"\n            >\n              <option value=\"\">All Types</option>\n              <option value=\"user\">User</option>\n              <option value=\"project\">Project</option>\n              <option value=\"session\">Session</option>\n              <option value=\"system\">System</option>\n              <option value=\"emergency\">Emergency</option>\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Limit</label>\n            <select\n              value={filters.limit}\n              onChange={(e) => setFilters({ ...filters, limit: parseInt(e.target.value) })}\n              className=\"w-full px-3 py-2 border rounded-lg dark:bg-gray-800 dark:border-gray-700\"\n            >\n              <option value={50}>50</option>\n              <option value={100}>100</option>\n              <option value={250}>250</option>\n              <option value={500}>500</option>\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">Start Date</label>\n            <input\n              type=\"datetime-local\"\n              value={filters.startDate}\n              onChange={(e) => setFilters({ ...filters, startDate: e.target.value })}\n              className=\"w-full px-3 py-2 border rounded-lg dark:bg-gray-800 dark:border-gray-700\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">End Date</label>\n            <input\n              type=\"datetime-local\"\n              value={filters.endDate}\n              onChange={(e) => setFilters({ ...filters, endDate: e.target.value })}\n              className=\"w-full px-3 py-2 border rounded-lg dark:bg-gray-800 dark:border-gray-700\"\n            />\n          </div>\n          <div className=\"flex items-end space-x-2\">\n            <Button onClick={applyFilters} variant=\"primary\" className=\"flex-1\">\n              Apply Filters\n            </Button>\n            <Button onClick={clearFilters} variant=\"secondary\" className=\"flex-1\">\n              Clear\n            </Button>\n          </div>\n        </div>\n      </Card>\n\n      {/* Export */}\n      <div className=\"flex justify-end\">\n        <Button onClick={exportLogs} variant=\"secondary\">\n          Export to CSV\n        </Button>\n      </div>\n\n      {/* Log Entries */}\n      <Card className=\"overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-50 dark:bg-gray-800 border-b dark:border-gray-700\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Timestamp\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Action\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Target\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Admin\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Details\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y dark:divide-gray-700\">\n              {logs.map(log => (\n                <React.Fragment key={log.id}>\n                  <tr className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                      {new Date(log.createdAt).toLocaleString()}\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <span className={`px-2 py-1 text-xs font-medium rounded-full ${getActionColor(log.action)}`}>\n                        {log.action}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 text-sm\">\n                      {log.targetType && (\n                        <div>\n                          <span className=\"font-medium\">{log.targetType}</span>\n                          {log.targetId && (\n                            <span className=\"text-gray-500 ml-1\">\n                              ({log.targetId.substring(0, 8)}...)\n                            </span>\n                          )}\n                        </div>\n                      )}\n                    </td>\n                    <td className=\"px-6 py-4 text-sm text-gray-500\">\n                      {log.adminId.substring(0, 8)}...\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      {log.details && Object.keys(log.details).length > 0 && (\n                        <Button\n                          onClick={() => toggleLogExpansion(log.id)}\n                          variant=\"ghost\"\n                          size=\"sm\"\n                        >\n                          {expandedLogs.has(log.id) ? 'Hide' : 'Show'}\n                        </Button>\n                      )}\n                    </td>\n                  </tr>\n                  {expandedLogs.has(log.id) && log.details && (\n                    <tr>\n                      <td colSpan={5} className=\"px-6 py-4 bg-gray-50 dark:bg-gray-800\">\n                        <pre className=\"text-xs overflow-x-auto\">\n                          {JSON.stringify(log.details, null, 2)}\n                        </pre>\n                        {log.ipAddress && (\n                          <div className=\"mt-2 text-xs text-gray-500\">\n                            IP: {log.ipAddress}\n                          </div>\n                        )}\n                        {log.userAgent && (\n                          <div className=\"text-xs text-gray-500\">\n                            User Agent: {log.userAgent}\n                          </div>\n                        )}\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </Card>\n\n      {/* Summary */}\n      <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n        Showing {logs.length} audit log entries\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/admin/EmergencyPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[295,298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[295,298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":34,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":34,"endColumn":25,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[918,918],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":40,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":40,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":65,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":71,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":93,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":93,"endColumn":91},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":243,"column":69,"nodeType":"Property","messageId":"anyAssignment","endLine":243,"endColumn":100},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":243,"column":97,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":100,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7720,7723],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7720,7723],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":273,"column":31,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":273,"endColumn":51},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":324,"column":31,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":324,"endColumn":63}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\n\ninterface EmergencyLog {\n  id: string;\n  adminId: string;\n  action: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  reason: string;\n  affectedResources?: any[];\n  createdAt: string;\n  resolvedAt?: string;\n  resolutionNotes?: string;\n}\n\nexport const EmergencyPanel: React.FC = () => {\n  const [emergencyLogs, setEmergencyLogs] = useState<EmergencyLog[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showNewEmergencyForm, setShowNewEmergencyForm] = useState(false);\n  const [newEmergency, setNewEmergency] = useState<{\n    action: string;\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    reason: string;\n    affectedResources: string;\n  }>({\n    action: '',\n    severity: 'high',\n    reason: '',\n    affectedResources: ''\n  });\n\n  useEffect(() => {\n    loadEmergencyLogs();\n  }, []);\n\n  const loadEmergencyLogs = async () => {\n    try {\n      setLoading(true);\n      const result = await window.electron.invoke('admin:get-emergency-logs');\n      if (result.success) {\n        setEmergencyLogs(result.logs);\n      }\n    } catch (error) {\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logEmergencyAccess = async () => {\n    if (!newEmergency.action || !newEmergency.reason) {\n      alert('Please provide both action and reason for emergency access');\n      return;\n    }\n\n    if (!confirm('Are you sure you want to log this emergency access? This action will be permanently recorded.')) {\n      return;\n    }\n\n    try {\n      const resources = newEmergency.affectedResources \n        ? newEmergency.affectedResources.split(',').map(r => r.trim())\n        : [];\n\n      const result = await window.electron.invoke(\n        'admin:log-emergency-access',\n        newEmergency.action,\n        newEmergency.severity,\n        newEmergency.reason,\n        resources\n      );\n\n      if (result.success) {\n        alert('Emergency access logged successfully');\n        setShowNewEmergencyForm(false);\n        setNewEmergency({\n          action: '',\n          severity: 'high',\n          reason: '',\n          affectedResources: ''\n        });\n        await loadEmergencyLogs();\n      }\n    } catch (error) {\n    }\n  };\n\n  const resolveEmergency = async (logId: string) => {\n    const notes = prompt('Please provide resolution notes:');\n    if (!notes) return;\n\n    try {\n      const result = await window.electron.invoke('admin:resolve-emergency', logId, notes);\n      if (result.success) {\n        await loadEmergencyLogs();\n      }\n    } catch (error) {\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';\n      case 'high':\n        return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';\n      case 'low':\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';\n    }\n  };\n\n  const emergencyProcedures = [\n    {\n      title: 'System Outage',\n      action: 'SYSTEM_RESTART',\n      severity: 'critical' as const,\n      steps: [\n        'Check system health status',\n        'Identify failing components',\n        'Initiate graceful restart',\n        'Monitor recovery process'\n      ]\n    },\n    {\n      title: 'Data Breach Response',\n      action: 'SECURITY_LOCKDOWN',\n      severity: 'critical' as const,\n      steps: [\n        'Isolate affected systems',\n        'Revoke compromised credentials',\n        'Enable enhanced monitoring',\n        'Notify security team'\n      ]\n    },\n    {\n      title: 'Database Recovery',\n      action: 'DATABASE_RESTORE',\n      severity: 'high' as const,\n      steps: [\n        'Verify backup integrity',\n        'Stop write operations',\n        'Initiate restore process',\n        'Validate data consistency'\n      ]\n    },\n    {\n      title: 'Mass User Reset',\n      action: 'USER_PASSWORD_RESET',\n      severity: 'medium' as const,\n      steps: [\n        'Identify affected users',\n        'Generate temporary passwords',\n        'Send reset notifications',\n        'Monitor login attempts'\n      ]\n    }\n  ];\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Warning Banner */}\n      <Card className=\"bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800 p-4\">\n        <div className=\"flex items-start space-x-3\">\n          <span className=\"text-2xl\">⚠️</span>\n          <div>\n            <h3 className=\"font-semibold text-red-800 dark:text-red-200\">Emergency Access Panel</h3>\n            <p className=\"text-sm text-red-700 dark:text-red-300 mt-1\">\n              All actions performed here are permanently logged and audited. Use only in genuine emergency situations.\n            </p>\n          </div>\n        </div>\n      </Card>\n\n      {/* Emergency Procedures */}\n      <Card className=\"p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Emergency Procedures</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {emergencyProcedures.map((procedure, index) => (\n            <Card key={index} className=\"p-4 hover:shadow-lg transition-shadow\">\n              <div className=\"flex items-start justify-between mb-3\">\n                <h4 className=\"font-semibold\">{procedure.title}</h4>\n                <span className={`px-2 py-1 text-xs rounded-full ${getSeverityColor(procedure.severity)}`}>\n                  {procedure.severity}\n                </span>\n              </div>\n              <ol className=\"text-sm text-gray-600 dark:text-gray-400 space-y-1 mb-4\">\n                {procedure.steps.map((step, i) => (\n                  <li key={i}>{i + 1}. {step}</li>\n                ))}\n              </ol>\n              <Button\n                onClick={() => {\n                  setNewEmergency({\n                    action: procedure.action,\n                    severity: procedure.severity,\n                    reason: '',\n                    affectedResources: ''\n                  });\n                  setShowNewEmergencyForm(true);\n                }}\n                variant=\"secondary\"\n                size=\"sm\"\n                className=\"w-full\"\n              >\n                Execute Procedure\n              </Button>\n            </Card>\n          ))}\n        </div>\n      </Card>\n\n      {/* New Emergency Form */}\n      {showNewEmergencyForm && (\n        <Card className=\"p-6 border-2 border-red-500\">\n          <h3 className=\"text-lg font-semibold mb-4\">Log Emergency Access</h3>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Action</label>\n              <input\n                type=\"text\"\n                value={newEmergency.action}\n                onChange={(e) => setNewEmergency({ ...newEmergency, action: e.target.value })}\n                className=\"w-full px-3 py-2 border rounded-lg dark:bg-gray-800 dark:border-gray-700\"\n                placeholder=\"e.g., SYSTEM_RESTART\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Severity</label>\n              <select\n                value={newEmergency.severity}\n                onChange={(e) => setNewEmergency({ ...newEmergency, severity: e.target.value as any })}\n                className=\"w-full px-3 py-2 border rounded-lg dark:bg-gray-800 dark:border-gray-700\"\n              >\n                <option value=\"low\">Low</option>\n                <option value=\"medium\">Medium</option>\n                <option value=\"high\">High</option>\n                <option value=\"critical\">Critical</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Reason</label>\n              <textarea\n                value={newEmergency.reason}\n                onChange={(e) => setNewEmergency({ ...newEmergency, reason: e.target.value })}\n                className=\"w-full px-3 py-2 border rounded-lg dark:bg-gray-800 dark:border-gray-700\"\n                rows={3}\n                placeholder=\"Detailed explanation of why this emergency action is necessary...\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Affected Resources (comma-separated)</label>\n              <input\n                type=\"text\"\n                value={newEmergency.affectedResources}\n                onChange={(e) => setNewEmergency({ ...newEmergency, affectedResources: e.target.value })}\n                className=\"w-full px-3 py-2 border rounded-lg dark:bg-gray-800 dark:border-gray-700\"\n                placeholder=\"e.g., user-123, project-456\"\n              />\n            </div>\n            <div className=\"flex space-x-4\">\n              <Button onClick={logEmergencyAccess} variant=\"primary\" className=\"bg-red-600 hover:bg-red-700\">\n                Log Emergency Access\n              </Button>\n              <Button onClick={() => setShowNewEmergencyForm(false)} variant=\"secondary\">\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Emergency History */}\n      <Card className=\"p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Emergency Access History</h3>\n        <div className=\"space-y-4\">\n          {emergencyLogs.length === 0 ? (\n            <p className=\"text-gray-500 dark:text-gray-400\">No emergency access logs found</p>\n          ) : (\n            emergencyLogs.map(log => (\n              <Card key={log.id} className=\"p-4\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <span className=\"font-semibold\">{log.action}</span>\n                      <span className={`px-2 py-1 text-xs rounded-full ${getSeverityColor(log.severity)}`}>\n                        {log.severity}\n                      </span>\n                      {log.resolvedAt && (\n                        <span className=\"px-2 py-1 text-xs rounded-full bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n                          Resolved\n                        </span>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">{log.reason}</p>\n                    <div className=\"text-xs text-gray-500\">\n                      <div>Created: {new Date(log.createdAt).toLocaleString()}</div>\n                      {log.resolvedAt && (\n                        <div>Resolved: {new Date(log.resolvedAt).toLocaleString()}</div>\n                      )}\n                      {log.affectedResources && log.affectedResources.length > 0 && (\n                        <div>Affected: {log.affectedResources.join(', ')}</div>\n                      )}\n                    </div>\n                    {log.resolutionNotes && (\n                      <div className=\"mt-2 p-2 bg-gray-50 dark:bg-gray-800 rounded text-sm\">\n                        <strong>Resolution:</strong> {log.resolutionNotes}\n                      </div>\n                    )}\n                  </div>\n                  {!log.resolvedAt && (\n                    <Button\n                      onClick={() => resolveEmergency(log.id)}\n                      variant=\"secondary\"\n                      size=\"sm\"\n                    >\n                      Resolve\n                    </Button>\n                  )}\n                </div>\n              </Card>\n            ))\n          )}\n        </div>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/admin/SystemMonitor.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":27,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":27,"endColumn":22,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[731,731],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":30,"column":41,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":30,"endColumn":55},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSystemData'. Either include it or remove the dependency array.","line":38,"column":6,"nodeType":"ArrayExpression","endLine":38,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [autoRefresh, loadSystemData]","fix":{"range":[986,999],"text":"[autoRefresh, loadSystemData]"}}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":43,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":43,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":49,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":49,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":65,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":65,"endColumn":61},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1757,1760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1757,1760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":129,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":129,"endColumn":45}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useRef } from 'react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\n\ninterface SystemMetric {\n  cpu?: number;\n  memory?: number;\n  disk?: number;\n  apiResponseTime?: number;\n  uptime?: number;\n}\n\ninterface HealthCheck {\n  database: boolean;\n  authentication: boolean;\n  services: boolean;\n}\n\nexport const SystemMonitor: React.FC = () => {\n  const [metrics, setMetrics] = useState<SystemMetric>({});\n  const [healthChecks, setHealthChecks] = useState<HealthCheck | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    loadSystemData();\n\n    if (autoRefresh) {\n      intervalRef.current = setInterval(loadSystemData, 5000); // Refresh every 5 seconds\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [autoRefresh]);\n\n  const loadSystemData = async () => {\n    try {\n      // Get system stats\n      const statsResult = await window.electron.invoke('admin:get-system-stats');\n      if (statsResult.success && statsResult.stats?.systemHealth) {\n        setMetrics(statsResult.stats.systemHealth);\n      }\n\n      // Get health checks\n      const healthResult = await window.electron.invoke('admin:health-check');\n      if (healthResult.success) {\n        setHealthChecks(healthResult.healthChecks);\n      }\n\n      // Record current metrics\n      await recordMetrics();\n    } catch (error) {\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const recordMetrics = async () => {\n    try {\n      // Get process memory usage\n      const memoryUsage = (window.performance as any).memory;\n      if (memoryUsage) {\n        const memoryPercent = (memoryUsage.usedJSHeapSize / memoryUsage.jsHeapSizeLimit) * 100;\n        await window.electron.invoke('admin:record-metric', 'memory', memoryPercent, '%');\n      }\n\n      // Record API response time (mock for now)\n      const apiResponseTime = Math.random() * 100 + 50; // 50-150ms\n      await window.electron.invoke('admin:record-metric', 'apiResponseTime', apiResponseTime, 'ms');\n    } catch (error) {\n    }\n  };\n\n  const getMetricColor = (value: number, type: string) => {\n    if (type === 'apiResponseTime') {\n      if (value < 100) return 'text-green-600';\n      if (value < 500) return 'text-yellow-600';\n      return 'text-red-600';\n    } else {\n      if (value < 60) return 'text-green-600';\n      if (value < 80) return 'text-yellow-600';\n      return 'text-red-600';\n    }\n  };\n\n  const formatUptime = (seconds?: number) => {\n    if (!seconds) return 'Unknown';\n    \n    const days = Math.floor(seconds / 86400);\n    const hours = Math.floor((seconds % 86400) / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    \n    const parts = [];\n    if (days > 0) parts.push(`${days}d`);\n    if (hours > 0) parts.push(`${hours}h`);\n    if (minutes > 0) parts.push(`${minutes}m`);\n    \n    return parts.join(' ') || '< 1m';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Controls */}\n      <Card className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold\">System Monitoring</h3>\n          <div className=\"flex items-center space-x-4\">\n            <label className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                checked={autoRefresh}\n                onChange={(e) => setAutoRefresh(e.target.checked)}\n                className=\"rounded\"\n              />\n              <span className=\"text-sm\">Auto-refresh</span>\n            </label>\n            <Button onClick={loadSystemData} variant=\"secondary\">\n              Refresh Now\n            </Button>\n          </div>\n        </div>\n      </Card>\n\n      {/* Health Status */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Database</h4>\n              <p className=\"text-2xl font-semibold mt-2\">\n                {healthChecks?.database ? (\n                  <span className=\"text-green-600\">Healthy</span>\n                ) : (\n                  <span className=\"text-red-600\">Error</span>\n                )}\n              </p>\n            </div>\n            <div className={`text-4xl ${healthChecks?.database ? 'text-green-600' : 'text-red-600'}`}>\n              {healthChecks?.database ? '✓' : '✗'}\n            </div>\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Authentication</h4>\n              <p className=\"text-2xl font-semibold mt-2\">\n                {healthChecks?.authentication ? (\n                  <span className=\"text-green-600\">Active</span>\n                ) : (\n                  <span className=\"text-red-600\">Inactive</span>\n                )}\n              </p>\n            </div>\n            <div className={`text-4xl ${healthChecks?.authentication ? 'text-green-600' : 'text-red-600'}`}>\n              {healthChecks?.authentication ? '✓' : '✗'}\n            </div>\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Services</h4>\n              <p className=\"text-2xl font-semibold mt-2\">\n                {healthChecks?.services ? (\n                  <span className=\"text-green-600\">Running</span>\n                ) : (\n                  <span className=\"text-red-600\">Down</span>\n                )}\n              </p>\n            </div>\n            <div className={`text-4xl ${healthChecks?.services ? 'text-green-600' : 'text-red-600'}`}>\n              {healthChecks?.services ? '✓' : '✗'}\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Performance Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"p-6\">\n          <h4 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">CPU Usage</h4>\n          <p className={`text-3xl font-bold mt-2 ${getMetricColor(metrics.cpu || 0, 'cpu')}`}>\n            {metrics.cpu ? `${metrics.cpu.toFixed(1)}%` : 'N/A'}\n          </p>\n          <div className=\"mt-3 bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n            <div\n              className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${metrics.cpu || 0}%` }}\n            />\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <h4 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Memory Usage</h4>\n          <p className={`text-3xl font-bold mt-2 ${getMetricColor(metrics.memory || 0, 'memory')}`}>\n            {metrics.memory ? `${metrics.memory.toFixed(1)}%` : 'N/A'}\n          </p>\n          <div className=\"mt-3 bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n            <div\n              className=\"bg-green-600 h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${metrics.memory || 0}%` }}\n            />\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <h4 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Disk Usage</h4>\n          <p className={`text-3xl font-bold mt-2 ${getMetricColor(metrics.disk || 0, 'disk')}`}>\n            {metrics.disk ? `${metrics.disk.toFixed(1)}%` : 'N/A'}\n          </p>\n          <div className=\"mt-3 bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n            <div\n              className=\"bg-purple-600 h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${metrics.disk || 0}%` }}\n            />\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <h4 className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">API Response</h4>\n          <p className={`text-3xl font-bold mt-2 ${getMetricColor(metrics.apiResponseTime || 0, 'apiResponseTime')}`}>\n            {metrics.apiResponseTime ? `${metrics.apiResponseTime.toFixed(0)}ms` : 'N/A'}\n          </p>\n          <div className=\"mt-3 text-sm text-gray-500\">\n            Average response time\n          </div>\n        </Card>\n      </div>\n\n      {/* System Info */}\n      <Card className=\"p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">System Information</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <span className=\"text-sm text-gray-500 dark:text-gray-400\">Uptime:</span>\n            <span className=\"ml-2 font-medium\">{formatUptime(metrics.uptime)}</span>\n          </div>\n          <div>\n            <span className=\"text-sm text-gray-500 dark:text-gray-400\">Platform:</span>\n            <span className=\"ml-2 font-medium\">{process.platform}</span>\n          </div>\n          <div>\n            <span className=\"text-sm text-gray-500 dark:text-gray-400\">Node Version:</span>\n            <span className=\"ml-2 font-medium\">{process.version}</span>\n          </div>\n          <div>\n            <span className=\"text-sm text-gray-500 dark:text-gray-400\">Electron Version:</span>\n            <span className=\"ml-2 font-medium\">{process.versions.electron}</span>\n          </div>\n        </div>\n      </Card>\n\n      {/* Alert Thresholds */}\n      <Card className=\"p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Alert Thresholds</h3>\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg\">\n            <span className=\"text-sm\">CPU usage above 80%</span>\n            <span className=\"text-xs text-yellow-600 dark:text-yellow-400\">Warning</span>\n          </div>\n          <div className=\"flex items-center justify-between p-3 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n            <span className=\"text-sm\">Memory usage above 90%</span>\n            <span className=\"text-xs text-red-600 dark:text-red-400\">Critical</span>\n          </div>\n          <div className=\"flex items-center justify-between p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg\">\n            <span className=\"text-sm\">API response time above 500ms</span>\n            <span className=\"text-xs text-yellow-600 dark:text-yellow-400\">Warning</span>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/admin/UserManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":24,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":24,"endColumn":29,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[728,728],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":25,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":25,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[757,757],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":29,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":29,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":36,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":36,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":61,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":61,"endColumn":93},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":82,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":82,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":103,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":103,"endColumn":118},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":164,"column":23,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":164,"endColumn":56},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":171,"column":23,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":171,"endColumn":57},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":275,"column":36,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":275,"endColumn":91},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":275,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":275,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10298,10301],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10298,10301],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":284,"column":33,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":284,"endColumn":81}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { Button } from '../ui/Button';\nimport { Card } from '../ui/Card';\n\ninterface User {\n  id: string;\n  email: string;\n  role: 'user' | 'admin' | 'super_admin';\n  fullName?: string;\n  isActive: boolean;\n  lastLogin?: string;\n  createdAt: string;\n}\n\nexport const UserManagement: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedUsers, setSelectedUsers] = useState<Set<string>>(new Set());\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterRole, setFilterRole] = useState<string>('all');\n  const [isSuperAdmin, setIsSuperAdmin] = useState(false);\n\n  useEffect(() => {\n    checkSuperAdminAccess();\n    loadUsers();\n  }, []);\n\n  const checkSuperAdminAccess = async () => {\n    const result = await window.electron.invoke('admin:check-super-access');\n    setIsSuperAdmin(result.success && result.isSuperAdmin);\n  };\n\n  const loadUsers = async () => {\n    try {\n      setLoading(true);\n      const result = await window.electron.invoke('admin:get-all-users');\n      if (result.success) {\n        setUsers(result.users);\n      } else {\n      }\n    } catch (error) {\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateUserRole = async (userId: string, newRole: 'user' | 'admin' | 'super_admin') => {\n    if (!isSuperAdmin) {\n      alert('Only super administrators can change user roles');\n      return;\n    }\n\n    const user = users.find(u => u.id === userId);\n    if (!user) return;\n\n    if (!confirm(`Change ${user.email} role from ${user.role} to ${newRole}?`)) {\n      return;\n    }\n\n    try {\n      const result = await window.electron.invoke('admin:update-user-role', userId, newRole);\n      if (result.success) {\n        await loadUsers();\n      } else {\n        alert(`Failed to update role: ${result.error}`);\n      }\n    } catch (error) {\n    }\n  };\n\n  const toggleUserStatus = async (userId: string, currentStatus: boolean) => {\n    const user = users.find(u => u.id === userId);\n    if (!user) return;\n\n    const action = currentStatus ? 'suspend' : 'activate';\n    if (!confirm(`${action.charAt(0).toUpperCase() + action.slice(1)} user ${user.email}?`)) {\n      return;\n    }\n\n    try {\n      const endpoint = currentStatus ? 'admin:suspend-user' : 'admin:activate-user';\n      const result = await window.electron.invoke(endpoint, userId);\n      if (result.success) {\n        await loadUsers();\n      } else {\n        alert(`Failed to ${action} user: ${result.error}`);\n      }\n    } catch (error) {\n    }\n  };\n\n  const batchOperation = async (operation: 'suspend' | 'activate') => {\n    if (selectedUsers.size === 0) {\n      alert('No users selected');\n      return;\n    }\n\n    if (!confirm(`${operation.charAt(0).toUpperCase() + operation.slice(1)} ${selectedUsers.size} users?`)) {\n      return;\n    }\n\n    try {\n      const result = await window.electron.invoke('admin:batch-user-operation', operation, Array.from(selectedUsers));\n      if (result.success) {\n        setSelectedUsers(new Set());\n        await loadUsers();\n      } else {\n        alert(`Batch operation failed: ${result.error}`);\n      }\n    } catch (error) {\n    }\n  };\n\n  const filteredUsers = users.filter(user => {\n    const matchesSearch = user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (user.fullName?.toLowerCase().includes(searchTerm.toLowerCase()) ?? false);\n    const matchesRole = filterRole === 'all' || user.role === filterRole;\n    return matchesSearch && matchesRole;\n  });\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case 'super_admin':\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';\n      case 'admin':\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Controls */}\n      <Card className=\"p-4\">\n        <div className=\"flex flex-col sm:flex-row gap-4\">\n          <input\n            type=\"text\"\n            placeholder=\"Search users...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"flex-1 px-4 py-2 border rounded-lg dark:bg-gray-800 dark:border-gray-700\"\n          />\n          <select\n            value={filterRole}\n            onChange={(e) => setFilterRole(e.target.value)}\n            className=\"px-4 py-2 border rounded-lg dark:bg-gray-800 dark:border-gray-700\"\n          >\n            <option value=\"all\">All Roles</option>\n            <option value=\"user\">Users</option>\n            <option value=\"admin\">Admins</option>\n            <option value=\"super_admin\">Super Admins</option>\n          </select>\n          <div className=\"flex gap-2\">\n            <Button\n              onClick={() => batchOperation('suspend')}\n              variant=\"secondary\"\n              disabled={selectedUsers.size === 0}\n            >\n              Suspend Selected\n            </Button>\n            <Button\n              onClick={() => batchOperation('activate')}\n              variant=\"secondary\"\n              disabled={selectedUsers.size === 0}\n            >\n              Activate Selected\n            </Button>\n          </div>\n        </div>\n      </Card>\n\n      {/* User List */}\n      <Card className=\"overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-50 dark:bg-gray-800 border-b dark:border-gray-700\">\n              <tr>\n                <th className=\"px-6 py-3 text-left\">\n                  <input\n                    type=\"checkbox\"\n                    onChange={(e) => {\n                      if (e.target.checked) {\n                        setSelectedUsers(new Set(filteredUsers.map(u => u.id)));\n                      } else {\n                        setSelectedUsers(new Set());\n                      }\n                    }}\n                    checked={selectedUsers.size === filteredUsers.length && filteredUsers.length > 0}\n                  />\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  User\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Role\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Last Login\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Created\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y dark:divide-gray-700\">\n              {filteredUsers.map(user => (\n                <tr key={user.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                  <td className=\"px-6 py-4\">\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedUsers.has(user.id)}\n                      onChange={(e) => {\n                        const newSelected = new Set(selectedUsers);\n                        if (e.target.checked) {\n                          newSelected.add(user.id);\n                        } else {\n                          newSelected.delete(user.id);\n                        }\n                        setSelectedUsers(newSelected);\n                      }}\n                    />\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <div>\n                      <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                        {user.email}\n                      </div>\n                      {user.fullName && (\n                        <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                          {user.fullName}\n                        </div>\n                      )}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getRoleBadgeColor(user.role)}`}>\n                      {user.role.replace('_', ' ')}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${\n                      user.isActive\n                        ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\n                        : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n                    }`}>\n                      {user.isActive ? 'Active' : 'Suspended'}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 text-sm text-gray-500 dark:text-gray-400\">\n                    {user.lastLogin ? new Date(user.lastLogin).toLocaleString() : 'Never'}\n                  </td>\n                  <td className=\"px-6 py-4 text-sm text-gray-500 dark:text-gray-400\">\n                    {new Date(user.createdAt).toLocaleDateString()}\n                  </td>\n                  <td className=\"px-6 py-4 text-sm\">\n                    <div className=\"flex space-x-2\">\n                      {isSuperAdmin && (\n                        <select\n                          value={user.role}\n                          onChange={(e) => updateUserRole(user.id, e.target.value as any)}\n                          className=\"text-xs px-2 py-1 border rounded dark:bg-gray-800 dark:border-gray-700\"\n                        >\n                          <option value=\"user\">User</option>\n                          <option value=\"admin\">Admin</option>\n                          <option value=\"super_admin\">Super Admin</option>\n                        </select>\n                      )}\n                      <Button\n                        onClick={() => toggleUserStatus(user.id, user.isActive)}\n                        variant=\"ghost\"\n                        size=\"sm\"\n                      >\n                        {user.isActive ? 'Suspend' : 'Activate'}\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </Card>\n\n      {/* Summary */}\n      <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n        Showing {filteredUsers.length} of {users.length} users\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/ai/AIEnhancementDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[427,430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[427,430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[446,449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[446,449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":46,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":46,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1441,1441],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'initializeAI'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [initializeAI]","fix":{"range":[1462,1464],"text":"[initializeAI]"}}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":51,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":51,"endColumn":93},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1613,1616],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1613,1616],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":65,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":65,"endColumn":101},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1962,1965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1962,1965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":72,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":72,"endColumn":97},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2170,2173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2170,2173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":81,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":81,"endColumn":135},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2403,2406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2403,2406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2442,2445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2442,2445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":84,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":84,"endColumn":110},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2623,2626],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2623,2626],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":97,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":97,"endColumn":89},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3089,3092],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3089,3092],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":120,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":120,"endColumn":51},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":123,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":123,"endColumn":47}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AI Enhancement Dashboard Component\n * Session 2.8 Implementation\n */\nimport React, { useState, useEffect } from 'react';\nimport { Card } from '../../../components/ui/Card';\nimport { Button } from '../../../components/ui/Button';\nimport { LoadingSpinner } from '../../../components/ui/LoadingSpinner';\nimport { ErrorBoundary } from '../../../components/ui/ErrorBoundary';\n\n// Type guard for AI API\nconst hasAIAPI = (api: any): api is { ai: any } => {\n  return api && typeof api.ai === 'object';\n};\ninterface LearningStatus {\n  patternsLearned: number;\n  projectsAnalyzed: number;\n  stylesIdentified: number;\n  successRate: number;\n  lastUpdate: Date;\n}\ninterface MetricsSummary {\n  totalSessions: number;\n  successfulSessions: number;\n  averageDuration: number;\n  qualityGatePassRate: {\n    typescript: number;\n    eslint: number;\n    tests: number;\n    build: number;\n  };\n}\ninterface Insight {\n  type: 'success' | 'warning' | 'improvement';\n  title: string;\n  description: string;\n  recommendation?: string;\n}\nexport const AIEnhancementDashboard: React.FC = () => {\n  const [status, setStatus] = useState<LearningStatus | null>(null);\n  const [metrics, setMetrics] = useState<MetricsSummary | null>(null);\n  const [insights, setInsights] = useState<Insight[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState<'overview' | 'patterns' | 'insights'>('overview');\n  useEffect(() => {\n    initializeAI();\n  }, []);\n  const initializeAI = async () => {\n    try {\n      setLoading(true);\n      const aiStatus = await (hasAIAPI(window.api) ? window.api.ai : {} as any).initialize();\n      setStatus(aiStatus);\n      // Load initial data\n      await Promise.all([\n        loadMetrics(),\n        loadInsights()\n      ]);\n    } catch (error) {\n    } finally {\n      setLoading(false);\n    }\n  };\n  const loadMetrics = async () => {\n    try {\n      const summary = await (hasAIAPI(window.api) ? window.api.ai : {} as any).getMetricsSummary(30);\n      setMetrics(summary);\n    } catch (error) {\n    }\n  };\n  const loadInsights = async () => {\n    try {\n      const report = await (hasAIAPI(window.api) ? window.api.ai : {} as any).generateInsights();\n      if (report?.insights) {\n        setInsights(report.insights);\n      }\n    } catch (error) {\n    }\n  };\n  const handleAnalyzeProject = async () => {\n    try {\n      const projectPath = await ((window as any).api?.selectDirectory ? (window as any).api.selectDirectory() : Promise.resolve(null));\n      if (projectPath) {\n        setLoading(true);\n        const analysis = await (hasAIAPI(window.api) ? window.api.ai : {} as any).analyzeProject(projectPath);\n        // Refresh data after analysis\n        await initializeAI();\n        // Show analysis results\n        alert(`Project analyzed: ${analysis.template.detectedType} with ${analysis.recommendations.length} recommendations`);\n      }\n    } catch (error) {\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleExportData = async () => {\n    try {\n      const data = await (hasAIAPI(window.api) ? window.api.ai : {} as any).exportData();\n      const blob = new Blob([data], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `ai-learning-data-${new Date().toISOString().split('T')[0]}.json`;\n      a.click();\n    } catch (error) {\n    }\n  };\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  return (\n    <ErrorBoundary>\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-2xl font-bold\">AI Enhancement & Learning</h1>\n          <div className=\"space-x-2\">\n            <Button onClick={handleAnalyzeProject} variant=\"secondary\">\n              Analyze Project\n            </Button>\n            <Button onClick={handleExportData} variant=\"secondary\">\n              Export Data\n            </Button>\n          </div>\n        </div>\n        {/* Tab Navigation */}\n        <div className=\"flex space-x-4 border-b\">\n          <button\n            onClick={() => setActiveTab('overview')}\n            className={`pb-2 px-4 ${\n              activeTab === 'overview'\n                ? 'border-b-2 border-blue-500 text-blue-500'\n                : 'text-gray-600'\n            }`}\n          >\n            Overview\n          </button>\n          <button\n            onClick={() => setActiveTab('patterns')}\n            className={`pb-2 px-4 ${\n              activeTab === 'patterns'\n                ? 'border-b-2 border-blue-500 text-blue-500'\n                : 'text-gray-600'\n            }`}\n          >\n            Patterns & Metrics\n          </button>\n          <button\n            onClick={() => setActiveTab('insights')}\n            className={`pb-2 px-4 ${\n              activeTab === 'insights'\n                ? 'border-b-2 border-blue-500 text-blue-500'\n                : 'text-gray-600'\n            }`}\n          >\n            Insights\n          </button>\n        </div>\n        {/* Tab Content */}\n        {activeTab === 'overview' && status && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card className=\"p-6\">\n              <h3 className=\"text-sm font-medium text-gray-500\">Patterns Learned</h3>\n              <p className=\"text-2xl font-bold mt-2\">{status.patternsLearned}</p>\n            </Card>\n            <Card className=\"p-6\">\n              <h3 className=\"text-sm font-medium text-gray-500\">Projects Analyzed</h3>\n              <p className=\"text-2xl font-bold mt-2\">{status.projectsAnalyzed}</p>\n            </Card>\n            <Card className=\"p-6\">\n              <h3 className=\"text-sm font-medium text-gray-500\">Styles Identified</h3>\n              <p className=\"text-2xl font-bold mt-2\">{status.stylesIdentified}</p>\n            </Card>\n            <Card className=\"p-6\">\n              <h3 className=\"text-sm font-medium text-gray-500\">Success Rate</h3>\n              <p className=\"text-2xl font-bold mt-2\">\n                {(status.successRate * 100).toFixed(1)}%\n              </p>\n            </Card>\n          </div>\n        )}\n        {activeTab === 'patterns' && metrics && (\n          <div className=\"space-y-6\">\n            <Card className=\"p-6\">\n              <h2 className=\"text-lg font-semibold mb-4\">Session Metrics</h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <p className=\"text-sm text-gray-500\">Total Sessions</p>\n                  <p className=\"text-xl font-semibold\">{metrics.totalSessions}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-500\">Successful</p>\n                  <p className=\"text-xl font-semibold text-green-600\">\n                    {metrics.successfulSessions}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-500\">Avg Duration</p>\n                  <p className=\"text-xl font-semibold\">\n                    {(metrics.averageDuration / 1000 / 60).toFixed(1)} min\n                  </p>\n                </div>\n              </div>\n            </Card>\n            <Card className=\"p-6\">\n              <h2 className=\"text-lg font-semibold mb-4\">Quality Gate Performance</h2>\n              <div className=\"space-y-3\">\n                {Object.entries(metrics.qualityGatePassRate).map(([gate, rate]) => (\n                  <div key={gate} className=\"flex items-center justify-between\">\n                    <span className=\"capitalize\">{gate}</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-32 bg-gray-200 rounded-full h-2\">\n                        <div\n                          className={`h-2 rounded-full ${\n                            rate > 0.8 ? 'bg-green-500' : rate > 0.6 ? 'bg-yellow-500' : 'bg-red-500'\n                          }`}\n                          style={{ width: `${rate * 100}%` }}\n                        />\n                      </div>\n                      <span className=\"text-sm font-medium w-12 text-right\">\n                        {(rate * 100).toFixed(0)}%\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </Card>\n          </div>\n        )}\n        {activeTab === 'insights' && (\n          <div className=\"space-y-4\">\n            {insights.length === 0 ? (\n              <Card className=\"p-6 text-center text-gray-500\">\n                No insights available yet. Analyze more projects to generate insights.\n              </Card>\n            ) : (\n              insights.map((insight, index) => (\n                <Card key={index} className=\"p-6\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div\n                      className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center ${\n                        insight.type === 'success'\n                          ? 'bg-green-100 text-green-600'\n                          : insight.type === 'warning'\n                          ? 'bg-yellow-100 text-yellow-600'\n                          : 'bg-blue-100 text-blue-600'\n                      }`}\n                    >\n                      {insight.type === 'success' ? '✓' : insight.type === 'warning' ? '!' : '↑'}\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold\">{insight.title}</h3>\n                      <p className=\"text-gray-600 mt-1\">{insight.description}</p>\n                      {insight.recommendation && (\n                        <p className=\"text-sm text-blue-600 mt-2\">\n                          💡 {insight.recommendation}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                </Card>\n              ))\n            )}\n          </div>\n        )}\n      </div>\n    </ErrorBoundary>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/context/PatternExplorer.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":29,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":29,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[972,972],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterAndSortPatterns'. Either include it or remove the dependency array.","line":33,"column":6,"nodeType":"ArrayExpression","endLine":33,"endColumn":50,"suggestions":[{"desc":"Update the dependencies array to be: [patterns, selectedType, searchTerm, sortBy, filterAndSortPatterns]","fix":{"range":[1061,1105],"text":"[patterns, selectedType, searchTerm, sortBy, filterAndSortPatterns]"}}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":85,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":85,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":129,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4378,4381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4378,4381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\ninterface Pattern {\n  id: string;\n  type: 'success' | 'error' | 'workflow' | 'optimization';\n  name: string;\n  description: string;\n  examples: string[];\n  frequency: number;\n  projects: string[];\n  confidence: number;\n}\ninterface PatternExplorerProps {\n  projectId?: string;\n  onPatternSelect?: (pattern: Pattern) => void;\n}\nexport const PatternExplorer: React.FC<PatternExplorerProps> = ({\n  projectId,\n  onPatternSelect\n}) => {\n  const [patterns, setPatterns] = useState<Pattern[]>([]);\n  const [filteredPatterns, setFilteredPatterns] = useState<Pattern[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedType, setSelectedType] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortBy, setSortBy] = useState<'frequency' | 'confidence' | 'name'>('frequency');\n  useEffect(() => {\n    loadPatterns();\n  }, [projectId]);\n  useEffect(() => {\n    filterAndSortPatterns();\n  }, [patterns, selectedType, searchTerm, sortBy]);\n  const loadPatterns = async () => {\n    setLoading(true);\n    try {\n      // Mock data for development\n      setPatterns([]);\n    } catch (err) {\n    } finally {\n      setLoading(false);\n    }\n  };\n  const filterAndSortPatterns = () => {\n    let filtered = [...patterns];\n    // Filter by type\n    if (selectedType !== 'all') {\n      filtered = filtered.filter(p => p.type === selectedType);\n    }\n    // Filter by search term\n    if (searchTerm) {\n      const term = searchTerm.toLowerCase();\n      filtered = filtered.filter(p => \n        p.name.toLowerCase().includes(term) ||\n        p.description.toLowerCase().includes(term) ||\n        p.examples.some(e => e.toLowerCase().includes(term))\n      );\n    }\n    // Sort\n    filtered.sort((a, b) => {\n      switch (sortBy) {\n        case 'frequency':\n          return b.frequency - a.frequency;\n        case 'confidence':\n          return b.confidence - a.confidence;\n        case 'name':\n          return a.name.localeCompare(b.name);\n        default:\n          return 0;\n      }\n    });\n    setFilteredPatterns(filtered);\n  };\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-xl font-semibold\">Pattern Explorer</h2>\n        <Button onClick={loadPatterns} size=\"sm\" variant=\"secondary\">\n          Refresh\n        </Button>\n      </div>\n      {/* Filters and Search */}\n      <Card className=\"p-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {/* Search */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Search\n            </label>\n            <input\n              type=\"text\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              placeholder=\"Search patterns...\"\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n          {/* Type Filter */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Pattern Type\n            </label>\n            <select\n              value={selectedType}\n              onChange={(e) => setSelectedType(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"all\">All Types</option>\n              <option value=\"success\">Success Patterns</option>\n              <option value=\"error\">Error Patterns</option>\n              <option value=\"workflow\">Workflow Patterns</option>\n              <option value=\"optimization\">Optimization Patterns</option>\n            </select>\n          </div>\n          {/* Sort By */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Sort By\n            </label>\n            <select\n              value={sortBy}\n              onChange={(e) => setSortBy(e.target.value as any)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"frequency\">Frequency</option>\n              <option value=\"confidence\">Confidence</option>\n              <option value=\"name\">Name</option>\n            </select>\n          </div>\n        </div>\n      </Card>\n      {/* Pattern Stats */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <PatternStat\n          label=\"Total Patterns\"\n          value={patterns.length}\n          color=\"blue\"\n        />\n        <PatternStat\n          label=\"Success Patterns\"\n          value={patterns.filter(p => p.type === 'success').length}\n          color=\"green\"\n        />\n        <PatternStat\n          label=\"Error Patterns\"\n          value={patterns.filter(p => p.type === 'error').length}\n          color=\"red\"\n        />\n        <PatternStat\n          label=\"Avg Confidence\"\n          value={`${Math.round(\n            patterns.reduce((sum, p) => sum + p.confidence, 0) / patterns.length * 100\n          )}%`}\n          color=\"purple\"\n        />\n      </div>\n      {/* Pattern List */}\n      <div className=\"space-y-4\">\n        {filteredPatterns.length === 0 ? (\n          <Card className=\"p-8 text-center text-gray-500\">\n            No patterns found matching your criteria\n          </Card>\n        ) : (\n          filteredPatterns.map((pattern) => (\n            <PatternCard\n              key={pattern.id}\n              pattern={pattern}\n              onSelect={() => onPatternSelect?.(pattern)}\n            />\n          ))\n        )}\n      </div>\n      {/* Pattern Insights */}\n      {patterns.length > 0 && (\n        <Card className=\"p-4\">\n          <h3 className=\"text-lg font-medium mb-3\">Pattern Insights</h3>\n          <PatternInsights patterns={patterns} />\n        </Card>\n      )}\n    </div>\n  );\n};\n// Helper Components\ninterface PatternStatProps {\n  label: string;\n  value: string | number;\n  color: 'blue' | 'green' | 'red' | 'purple';\n}\nconst PatternStat: React.FC<PatternStatProps> = ({ label, value, color }) => {\n  const colorClasses = {\n    blue: 'bg-blue-50 text-blue-700',\n    green: 'bg-green-50 text-green-700',\n    red: 'bg-red-50 text-red-700',\n    purple: 'bg-purple-50 text-purple-700'\n  };\n  return (\n    <Card className={`p-4 ${colorClasses[color]}`}>\n      <p className=\"text-sm opacity-75\">{label}</p>\n      <p className=\"text-2xl font-semibold\">{value}</p>\n    </Card>\n  );\n};\ninterface PatternCardProps {\n  pattern: Pattern;\n  onSelect: () => void;\n}\nconst PatternCard: React.FC<PatternCardProps> = ({ pattern, onSelect }) => {\n  const [expanded, setExpanded] = useState(false);\n  const typeColors = {\n    success: 'border-green-500 bg-green-50',\n    error: 'border-red-500 bg-red-50',\n    workflow: 'border-blue-500 bg-blue-50',\n    optimization: 'border-purple-500 bg-purple-50'\n  };\n  const typeIcons = {\n    success: '✓',\n    error: '✗',\n    workflow: '↻',\n    optimization: '⚡'\n  };\n  return (\n    <Card className={`p-4 border-l-4 ${typeColors[pattern.type]} hover:shadow-md transition-shadow`}>\n      <div className=\"flex justify-between items-start\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <span className=\"text-2xl\">{typeIcons[pattern.type]}</span>\n            <h3 className=\"text-lg font-medium\">{pattern.name}</h3>\n            <span className=\"text-sm text-gray-500\">\n              ({pattern.frequency} occurrences)\n            </span>\n          </div>\n          <p className=\"text-gray-700 mb-3\">{pattern.description}</p>\n          <div className=\"flex items-center space-x-4 text-sm\">\n            <div className=\"flex items-center space-x-1\">\n              <span className=\"text-gray-500\">Confidence:</span>\n              <span className=\"font-medium\">{Math.round(pattern.confidence * 100)}%</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <span className=\"text-gray-500\">Projects:</span>\n              <span className=\"font-medium\">{pattern.projects.length}</span>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            onClick={() => setExpanded(!expanded)}\n            size=\"sm\"\n            variant=\"secondary\"\n          >\n            {expanded ? 'Hide' : 'Show'} Examples\n          </Button>\n          <Button\n            onClick={onSelect}\n            size=\"sm\"\n          >\n            Use Pattern\n          </Button>\n        </div>\n      </div>\n      {expanded && (\n        <div className=\"mt-4 pt-4 border-t border-gray-200\">\n          <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Examples:</h4>\n          <div className=\"space-y-2\">\n            {pattern.examples.map((example, idx) => (\n              <div key={idx} className=\"bg-white p-2 rounded border border-gray-200\">\n                <code className=\"text-sm\">{example}</code>\n              </div>\n            ))}\n          </div>\n          {pattern.projects.length > 0 && (\n            <div className=\"mt-3\">\n              <h4 className=\"text-sm font-medium text-gray-700 mb-1\">Used in:</h4>\n              <div className=\"flex flex-wrap gap-1\">\n                {pattern.projects.map((project, idx) => (\n                  <span\n                    key={idx}\n                    className=\"px-2 py-1 bg-gray-200 text-gray-700 rounded text-xs\"\n                  >\n                    {project}\n                  </span>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </Card>\n  );\n};\nconst PatternInsights: React.FC<{ patterns: Pattern[] }> = ({ patterns }) => {\n  // Calculate insights\n  // const totalOccurrences = patterns.reduce((sum, p) => sum + p.frequency, 0);\n  const avgConfidence = patterns.reduce((sum, p) => sum + p.confidence, 0) / patterns.length;\n  const typeDistribution = patterns.reduce((acc, p) => {\n    acc[p.type] = (acc[p.type] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n  const mostFrequent = patterns.sort((a, b) => b.frequency - a.frequency)[0];\n  const mostConfident = patterns.sort((a, b) => b.confidence - a.confidence)[0];\n  return (\n    <div className=\"space-y-4\">\n      {/* Distribution Chart */}\n      <div>\n        <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Pattern Distribution</h4>\n        <div className=\"flex space-x-2\">\n          {Object.entries(typeDistribution).map(([type, count]) => {\n            const percentage = (count / patterns.length) * 100;\n            return (\n              <div key={type} className=\"flex-1\">\n                <div className=\"text-xs text-gray-600 mb-1\">{type}</div>\n                <div className=\"h-20 bg-gray-200 rounded relative\">\n                  <div\n                    className={`absolute bottom-0 left-0 right-0 rounded transition-all ${\n                      type === 'success' ? 'bg-green-500' :\n                      type === 'error' ? 'bg-red-500' :\n                      type === 'workflow' ? 'bg-blue-500' :\n                      'bg-purple-500'\n                    }`}\n                    style={{ height: `${percentage}%` }}\n                  />\n                </div>\n                <div className=\"text-xs text-center mt-1\">{count}</div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      {/* Key Insights */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Most Frequent Pattern</h4>\n          <p className=\"text-sm\">\n            <span className=\"font-medium\">{mostFrequent?.name || 'N/A'}</span>\n            <span className=\"text-gray-500 ml-2\">({mostFrequent?.frequency || 0} times)</span>\n          </p>\n        </div>\n        <div>\n          <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Highest Confidence Pattern</h4>\n          <p className=\"text-sm\">\n            <span className=\"font-medium\">{mostConfident?.name || 'N/A'}</span>\n            <span className=\"text-gray-500 ml-2\">({mostConfident ? Math.round(mostConfident.confidence * 100) : 0}%)</span>\n          </p>\n        </div>\n      </div>\n      {/* Recommendations */}\n      <div>\n        <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Recommendations</h4>\n        <ul className=\"space-y-1 text-sm\">\n          {avgConfidence < 0.7 && (\n            <li className=\"flex items-start\">\n              <span className=\"text-yellow-500 mr-2\">⚠</span>\n              <span>Pattern confidence is below 70%. Consider refining pattern detection.</span>\n            </li>\n          )}\n          {patterns.filter(p => p.type === 'error').length > patterns.length * 0.3 && (\n            <li className=\"flex items-start\">\n              <span className=\"text-red-500 mr-2\">⚠</span>\n              <span>High number of error patterns detected. Review code quality practices.</span>\n            </li>\n          )}\n          {patterns.filter(p => p.type === 'optimization').length < 3 && (\n            <li className=\"flex items-start\">\n              <span className=\"text-blue-500 mr-2\">💡</span>\n              <span>Few optimization patterns found. Consider performance analysis.</span>\n            </li>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/context/ProjectContextComparison.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":20,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":20,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[622,622],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":238,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":238,"endColumn":41,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[7378,7379],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":275,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":275,"endColumn":37,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[8583,8584],"text":"?."},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { BaseProjectContext } from '@/src/models/ProjectContext';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\n\ninterface ProjectContextComparisonProps {\n  projectIds: string[];\n  onClose?: () => void;\n}\n\nexport const ProjectContextComparison: React.FC<ProjectContextComparisonProps> = ({\n  projectIds,\n  onClose\n}) => {\n  const [contexts, setContexts] = useState<Map<string, BaseProjectContext>>(new Map());\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadContexts();\n  }, [projectIds]);\n\n  const loadContexts = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const contextMap = new Map<string, BaseProjectContext>();\n      \n      // Mock data for development\n      setError('API not available');\n      \n      setContexts(contextMap);\n    } catch (err) {\n      setError('Failed to load contexts for comparison');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"p-4\">\n        <div className=\"text-red-500\">{error}</div>\n      </Card>\n    );\n  }\n\n  const contextArray = Array.from(contexts.values());\n  if (contextArray.length === 0) {\n    return (\n      <Card className=\"p-4\">\n        <p className=\"text-gray-500\">No contexts available for comparison</p>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <h2 className=\"text-xl font-semibold\">Project Context Comparison</h2>\n        {onClose && (\n          <Button onClick={onClose} size=\"sm\" variant=\"secondary\">\n            Close\n          </Button>\n        )}\n      </div>\n\n      {/* Comparison Table */}\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Attribute\n              </th>\n              {contextArray.map((context) => (\n                <th\n                  key={context.projectId}\n                  className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                >\n                  {context.name}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {/* Basic Information */}\n            <ComparisonRow\n              label=\"Project Type\"\n              values={contextArray.map(c => c.projectType.replace(/_/g, ' '))}\n            />\n            <ComparisonRow\n              label=\"Language\"\n              values={contextArray.map(c => c.language)}\n            />\n            <ComparisonRow\n              label=\"Version\"\n              values={contextArray.map(c => c.version)}\n            />\n            \n            {/* Frameworks */}\n            <ComparisonRow\n              label=\"Main Framework\"\n              values={contextArray.map(c => \n                c.frameworks && c.frameworks.length > 0 && c.frameworks[0] ? c.frameworks[0].name : 'None'\n              )}\n            />\n            \n            {/* Architecture */}\n            <ComparisonRow\n              label=\"Architecture\"\n              values={contextArray.map(c => \n                c.architecturePatterns && c.architecturePatterns.length > 0 && c.architecturePatterns[0]\n                  ? c.architecturePatterns[0].pattern \n                  : 'Not detected'\n              )}\n            />\n            \n            {/* Testing */}\n            <ComparisonRow\n              label=\"Testing\"\n              values={contextArray.map(c => \n                c.testingFrameworks.length > 0 \n                  ? c.testingFrameworks.map(t => t.name).join(', ')\n                  : 'None'\n              )}\n            />\n            \n            {/* Metrics */}\n            {contextArray.some(c => c.metrics?.testCoverage) && (\n              <ComparisonRow\n                label=\"Test Coverage\"\n                values={contextArray.map(c => \n                  c.metrics?.testCoverage ? `${c.metrics.testCoverage}%` : 'N/A'\n                )}\n                highlight=\"metric\"\n              />\n            )}\n            \n            {contextArray.some(c => c.metrics?.performanceScore) && (\n              <ComparisonRow\n                label=\"Performance\"\n                values={contextArray.map(c => \n                  c.metrics?.performanceScore ? `${c.metrics.performanceScore}/100` : 'N/A'\n                )}\n                highlight=\"metric\"\n              />\n            )}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Detailed Comparisons */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {/* Framework Comparison */}\n        <Card className=\"p-4\">\n          <h3 className=\"text-lg font-medium mb-3\">Frameworks & Libraries</h3>\n          <FrameworkComparison contexts={contextArray} />\n        </Card>\n\n        {/* Architecture Comparison */}\n        <Card className=\"p-4\">\n          <h3 className=\"text-lg font-medium mb-3\">Architecture Patterns</h3>\n          <ArchitectureComparison contexts={contextArray} />\n        </Card>\n      </div>\n\n      {/* Similarity Analysis */}\n      <Card className=\"p-4\">\n        <h3 className=\"text-lg font-medium mb-3\">Similarity Analysis</h3>\n        <SimilarityMatrix contexts={contextArray} />\n      </Card>\n\n      {/* Recommendations */}\n      <Card className=\"p-4\">\n        <h3 className=\"text-lg font-medium mb-3\">Cross-Project Recommendations</h3>\n        <CrossProjectRecommendations contexts={contextArray} />\n      </Card>\n    </div>\n  );\n};\n\n// Helper Components\n\ninterface ComparisonRowProps {\n  label: string;\n  values: string[];\n  highlight?: 'metric' | 'difference';\n}\n\nconst ComparisonRow: React.FC<ComparisonRowProps> = ({ label, values, highlight }) => {\n  const allSame = values.every(v => v === values[0]);\n  \n  return (\n    <tr>\n      <td className=\"px-4 py-2 text-sm font-medium text-gray-900\">{label}</td>\n      {values.map((value, idx) => (\n        <td\n          key={idx}\n          className={`px-4 py-2 text-sm ${\n            highlight === 'metric' ? getMetricColor(value) :\n            highlight === 'difference' && !allSame ? 'bg-yellow-50' :\n            ''\n          }`}\n        >\n          {value}\n        </td>\n      ))}\n    </tr>\n  );\n};\n\nconst getMetricColor = (value: string): string => {\n  const num = parseInt(value);\n  if (isNaN(num)) return 'text-gray-900';\n  if (num >= 80) return 'text-green-600 font-medium';\n  if (num >= 60) return 'text-yellow-600';\n  return 'text-red-600';\n};\n\nconst FrameworkComparison: React.FC<{ contexts: BaseProjectContext[] }> = ({ contexts }) => {\n  // Collect all unique frameworks\n  const allFrameworks = new Map<string, Set<string>>();\n  \n  contexts.forEach((context) => {\n    context.frameworks.forEach(framework => {\n      if (!allFrameworks.has(framework.name)) {\n        allFrameworks.set(framework.name, new Set());\n      }\n      allFrameworks.get(framework.name)!.add(context.name);\n    });\n  });\n\n  return (\n    <div className=\"space-y-2\">\n      {Array.from(allFrameworks.entries()).map(([framework, projects]) => (\n        <div key={framework} className=\"flex items-center justify-between\">\n          <span className=\"text-sm\">{framework}</span>\n          <div className=\"flex space-x-2\">\n            {contexts.map((context, idx) => (\n              <div\n                key={idx}\n                className={`w-6 h-6 rounded-full flex items-center justify-center text-xs ${\n                  projects.has(context.name)\n                    ? 'bg-blue-500 text-white'\n                    : 'bg-gray-200'\n                }`}\n              >\n                {idx + 1}\n              </div>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst ArchitectureComparison: React.FC<{ contexts: BaseProjectContext[] }> = ({ contexts }) => {\n  const patterns = new Map<string, number[]>();\n  \n  contexts.forEach((context, idx) => {\n    context.architecturePatterns.forEach(pattern => {\n      if (!patterns.has(pattern.pattern)) {\n        patterns.set(pattern.pattern, new Array(contexts.length).fill(0));\n      }\n      patterns.get(pattern.pattern)![idx] = pattern.confidence;\n    });\n  });\n\n  return (\n    <div className=\"space-y-2\">\n      {Array.from(patterns.entries()).map(([pattern, confidences]) => (\n        <div key={pattern}>\n          <div className=\"flex justify-between mb-1\">\n            <span className=\"text-sm\">{pattern}</span>\n          </div>\n          <div className=\"flex space-x-1\">\n            {confidences.map((confidence, idx) => (\n              <div key={idx} className=\"flex-1\">\n                <div className=\"h-2 bg-gray-200 rounded-full overflow-hidden\">\n                  <div\n                    className=\"h-full bg-blue-500\"\n                    style={{ width: `${confidence * 100}%` }}\n                  />\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst SimilarityMatrix: React.FC<{ contexts: BaseProjectContext[] }> = ({ contexts }) => {\n  // Calculate similarity scores between projects\n  const calculateSimilarity = (a: BaseProjectContext, b: BaseProjectContext): number => {\n    let score = 0;\n    let factors = 0;\n\n    // Language similarity\n    if (a.language === b.language) {\n      score += 1;\n    }\n    factors += 1;\n\n    // Framework similarity\n    const aFrameworks = new Set(a.frameworks.map(f => f.name));\n    const bFrameworks = new Set(b.frameworks.map(f => f.name));\n    const frameworkIntersection = [...aFrameworks].filter(f => bFrameworks.has(f));\n    const frameworkUnion = new Set([...aFrameworks, ...bFrameworks]);\n    if (frameworkUnion.size > 0) {\n      score += frameworkIntersection.length / frameworkUnion.size;\n      factors += 1;\n    }\n\n    // Architecture similarity\n    const aPatterns = new Set(a.architecturePatterns.map(p => p.pattern));\n    const bPatterns = new Set(b.architecturePatterns.map(p => p.pattern));\n    const patternIntersection = [...aPatterns].filter(p => bPatterns.has(p));\n    const patternUnion = new Set([...aPatterns, ...bPatterns]);\n    if (patternUnion.size > 0) {\n      score += patternIntersection.length / patternUnion.size;\n      factors += 1;\n    }\n\n    return factors > 0 ? score / factors : 0;\n  };\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"min-w-full\">\n        <thead>\n          <tr>\n            <th className=\"p-2\"></th>\n            {contexts.map((context, idx) => (\n              <th key={idx} className=\"p-2 text-xs font-medium text-gray-700\">\n                {context.name}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {contexts.map((contextA, idxA) => (\n            <tr key={idxA}>\n              <td className=\"p-2 text-xs font-medium text-gray-700\">{contextA.name}</td>\n              {contexts.map((contextB, idxB) => {\n                const similarity = idxA === idxB ? 1 : calculateSimilarity(contextA, contextB);\n                const percentage = Math.round(similarity * 100);\n                const bgColor = \n                  idxA === idxB ? 'bg-gray-100' :\n                  similarity > 0.7 ? 'bg-green-100' :\n                  similarity > 0.4 ? 'bg-yellow-100' :\n                  'bg-red-100';\n                \n                return (\n                  <td\n                    key={idxB}\n                    className={`p-2 text-center text-xs ${bgColor}`}\n                  >\n                    {percentage}%\n                  </td>\n                );\n              })}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst CrossProjectRecommendations: React.FC<{ contexts: BaseProjectContext[] }> = ({ contexts }) => {\n  const recommendations: string[] = [];\n\n  // Check for inconsistent testing\n  const projectsWithTests = contexts.filter(c => c.testingFrameworks.length > 0);\n  const projectsWithoutTests = contexts.filter(c => c.testingFrameworks.length === 0);\n  \n  if (projectsWithTests.length > 0 && projectsWithoutTests.length > 0) {\n    const testFramework = projectsWithTests[0]?.testingFrameworks?.[0]?.name || 'testing';\n    recommendations.push(\n      `Consider adding ${testFramework} testing to: ${projectsWithoutTests.map(c => c.name).join(', ')}`\n    );\n  }\n\n  // Check for TypeScript adoption\n  const tsProjects = contexts.filter(c => \n    c.language === 'TypeScript' || c.frameworks.some(f => f.name === 'typescript')\n  );\n  const jsProjects = contexts.filter(c => \n    c.language === 'JavaScript' && !c.frameworks.some(f => f.name === 'typescript')\n  );\n  \n  if (tsProjects.length > 0 && jsProjects.length > 0) {\n    recommendations.push(\n      `Consider migrating to TypeScript: ${jsProjects.map(c => c.name).join(', ')}`\n    );\n  }\n\n  // Check for shared patterns\n  const patternCounts = new Map<string, number>();\n  contexts.forEach(c => {\n    c.architecturePatterns.forEach(p => {\n      patternCounts.set(p.pattern, (patternCounts.get(p.pattern) || 0) + 1);\n    });\n  });\n\n  const commonPatterns = Array.from(patternCounts.entries())\n    .filter(([_, count]) => count > contexts.length / 2)\n    .map(([pattern]) => pattern);\n\n  if (commonPatterns.length > 0) {\n    const projectsWithoutPattern = contexts.filter(c => \n      !c.architecturePatterns.some(p => commonPatterns.includes(p.pattern))\n    );\n    \n    if (projectsWithoutPattern.length > 0) {\n      recommendations.push(\n        `Consider implementing ${commonPatterns.join(', ')} patterns in: ${\n          projectsWithoutPattern.map(c => c.name).join(', ')\n        }`\n      );\n    }\n  }\n\n  // Check for performance improvements\n  const lowPerfProjects = contexts.filter(c => \n    c.metrics?.performanceScore && c.metrics.performanceScore < 70\n  );\n  \n  if (lowPerfProjects.length > 0) {\n    recommendations.push(\n      `Performance optimization needed for: ${lowPerfProjects.map(c => c.name).join(', ')}`\n    );\n  }\n\n  if (recommendations.length === 0) {\n    recommendations.push('All projects follow consistent patterns and best practices');\n  }\n\n  return (\n    <ul className=\"space-y-2\">\n      {recommendations.map((rec, idx) => (\n        <li key={idx} className=\"flex items-start\">\n          <span className=\"text-blue-500 mr-2\">•</span>\n          <span className=\"text-sm\">{rec}</span>\n        </li>\n      ))}\n    </ul>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/context/ProjectContextViewer.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":24,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":24,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[871,871],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'initialContext'. Either include it or remove the dependency array.","line":26,"column":6,"nodeType":"ArrayExpression","endLine":26,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [initialContext, projectId]","fix":{"range":[897,908],"text":"[initialContext, projectId]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1090,1093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1090,1093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":82,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":82,"endColumn":38},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":91,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":91,"endColumn":40},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":101,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":101,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":247,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8484,8487],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8484,8487],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":250,"column":24,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":250,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":250,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8616,8619],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8616,8619],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { BaseProjectContext, WebAppContext, APIContext, ElectronContext, MLContext } from '@/src/models/ProjectContext';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\n\ninterface ProjectContextViewerProps {\n  projectId: string;\n  context?: BaseProjectContext;\n  onRefresh?: () => void;\n}\n\nexport const ProjectContextViewer: React.FC<ProjectContextViewerProps> = ({ \n  projectId, \n  context: initialContext,\n  onRefresh \n}) => {\n  const [context, setContext] = useState<BaseProjectContext | null>(initialContext || null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set(['overview']));\n\n  useEffect(() => {\n    if (!initialContext && projectId) {\n      loadContext();\n    }\n  }, [projectId]);\n\n  const loadContext = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Mock data for now\n      const result: { success: boolean; error?: string; data?: any } = { success: false, error: 'API not available' };\n      if (result.success && result.data) {\n        setContext(result.data);\n      } else {\n        setError(result.error || 'Failed to load context');\n      }\n    } catch (err) {\n      setError('Error loading project context');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRefresh = async () => {\n    setLoading(true);\n    try {\n      // Mock API call\n      // await window.api.analyzeProjectContext(projectId);\n      await loadContext();\n      onRefresh?.();\n    } catch (err) {\n      setError('Error refreshing context');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleSection = (section: string) => {\n    const newExpanded = new Set(expandedSections);\n    if (newExpanded.has(section)) {\n      newExpanded.delete(section);\n    } else {\n      newExpanded.add(section);\n    }\n    setExpandedSections(newExpanded);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"p-4\">\n        <div className=\"text-red-500 mb-4\">{error}</div>\n        <Button onClick={loadContext} size=\"sm\">Retry</Button>\n      </Card>\n    );\n  }\n\n  if (!context) {\n    return (\n      <Card className=\"p-4\">\n        <p className=\"text-gray-500 mb-4\">No context available</p>\n        <Button onClick={handleRefresh} size=\"sm\">Analyze Project</Button>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-xl font-semibold\">Project Context</h2>\n        <Button onClick={handleRefresh} size=\"sm\" variant=\"secondary\" disabled={loading}>\n          Refresh Context\n        </Button>\n      </div>\n\n      {/* Overview Section */}\n      <ContextSection\n        title=\"Overview\"\n        id=\"overview\"\n        expanded={expandedSections.has('overview')}\n        onToggle={() => toggleSection('overview')}\n      >\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"text-sm text-gray-500\">Project Type</label>\n            <p className=\"font-medium\">{context.projectType.replace(/_/g, ' ')}</p>\n          </div>\n          <div>\n            <label className=\"text-sm text-gray-500\">Primary Language</label>\n            <p className=\"font-medium\">{context.language}</p>\n          </div>\n          <div>\n            <label className=\"text-sm text-gray-500\">Last Analyzed</label>\n            <p className=\"font-medium\">{new Date(context.updatedAt).toLocaleString()}</p>\n          </div>\n          <div>\n            <label className=\"text-sm text-gray-500\">Version</label>\n            <p className=\"font-medium\">{context.version}</p>\n          </div>\n        </div>\n        {context.summary && (\n          <div className=\"mt-4\">\n            <label className=\"text-sm text-gray-500\">Summary</label>\n            <p className=\"mt-1\">{context.summary}</p>\n          </div>\n        )}\n      </ContextSection>\n\n      {/* Frameworks Section */}\n      <ContextSection\n        title=\"Frameworks & Libraries\"\n        id=\"frameworks\"\n        expanded={expandedSections.has('frameworks')}\n        onToggle={() => toggleSection('frameworks')}\n      >\n        <div className=\"space-y-4\">\n          {context.frameworks.length > 0 && (\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Frameworks</h4>\n              <div className=\"space-y-2\">\n                {context.frameworks.map((framework, idx) => (\n                  <div key={idx} className=\"flex justify-between items-center p-2 bg-gray-50 rounded\">\n                    <div>\n                      <span className=\"font-medium\">{framework.name}</span>\n                      {framework.version && (\n                        <span className=\"ml-2 text-sm text-gray-500\">v{framework.version}</span>\n                      )}\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-xs text-gray-500\">{framework.category}</span>\n                      <ConfidenceIndicator confidence={framework.confidence} />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n          \n          {context.libraries.length > 0 && (\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Key Libraries</h4>\n              <div className=\"flex flex-wrap gap-2\">\n                {context.libraries.slice(0, 10).map((lib, idx) => (\n                  <div key={idx} className=\"px-2 py-1 bg-blue-50 text-blue-700 rounded text-sm\">\n                    {lib.name}\n                  </div>\n                ))}\n                {context.libraries.length > 10 && (\n                  <div className=\"px-2 py-1 text-gray-500 text-sm\">\n                    +{context.libraries.length - 10} more\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </ContextSection>\n\n      {/* Architecture Section */}\n      <ContextSection\n        title=\"Architecture\"\n        id=\"architecture\"\n        expanded={expandedSections.has('architecture')}\n        onToggle={() => toggleSection('architecture')}\n      >\n        <div className=\"space-y-3\">\n          {context.architecturePatterns.map((pattern, idx) => (\n            <div key={idx} className=\"border-l-4 border-blue-500 pl-4\">\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <h4 className=\"font-medium\">{pattern.pattern}</h4>\n                  {pattern.description && (\n                    <p className=\"text-sm text-gray-600 mt-1\">{pattern.description}</p>\n                  )}\n                </div>\n                <ConfidenceIndicator confidence={pattern.confidence} />\n              </div>\n              {pattern.locations && pattern.locations.length > 0 && (\n                <div className=\"mt-2\">\n                  <p className=\"text-xs text-gray-500\">Found in:</p>\n                  <div className=\"text-xs text-gray-700 mt-1\">\n                    {pattern.locations.slice(0, 3).join(', ')}\n                  </div>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </ContextSection>\n\n      {/* Project-specific sections */}\n      {renderProjectSpecificSections(context, expandedSections, toggleSection)}\n\n      {/* Quality Metrics Section */}\n      {context.metrics && (\n        <ContextSection\n          title=\"Quality Metrics\"\n          id=\"metrics\"\n          expanded={expandedSections.has('metrics')}\n          onToggle={() => toggleSection('metrics')}\n        >\n          <div className=\"grid grid-cols-2 gap-4\">\n            {context.metrics.codeComplexity && (\n              <MetricCard\n                label=\"Code Complexity\"\n                value={context.metrics.codeComplexity}\n                type=\"number\"\n              />\n            )}\n            {context.metrics.testCoverage && (\n              <MetricCard\n                label=\"Test Coverage\"\n                value={`${context.metrics.testCoverage}%`}\n                type=\"percentage\"\n              />\n            )}\n            {(context.metrics as any).technicalDebt && (\n              <MetricCard\n                label=\"Technical Debt\"\n                value={(context.metrics as any).technicalDebt}\n                type=\"rating\"\n              />\n            )}\n            {context.metrics.performanceScore && (\n              <MetricCard\n                label=\"Performance Score\"\n                value={context.metrics.performanceScore}\n                type=\"score\"\n              />\n            )}\n          </div>\n        </ContextSection>\n      )}\n    </div>\n  );\n};\n\n// Helper Components\n\ninterface ContextSectionProps {\n  title: string;\n  id: string;\n  expanded: boolean;\n  onToggle: () => void;\n  children: React.ReactNode;\n}\n\nconst ContextSection: React.FC<ContextSectionProps> = ({\n  title,\n  // id,\n  expanded,\n  onToggle,\n  children\n}) => {\n  return (\n    <Card className=\"p-4\">\n      <div\n        className=\"flex justify-between items-center cursor-pointer\"\n        onClick={onToggle}\n      >\n        <h3 className=\"text-lg font-medium\">{title}</h3>\n        <svg\n          className={`w-5 h-5 transform transition-transform ${\n            expanded ? 'rotate-180' : ''\n          }`}\n          fill=\"none\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth=\"2\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path d=\"M19 9l-7 7-7-7\"></path>\n        </svg>\n      </div>\n      {expanded && <div className=\"mt-4\">{children}</div>}\n    </Card>\n  );\n};\n\nconst ConfidenceIndicator: React.FC<{ confidence: number }> = ({ confidence }) => {\n  const percentage = Math.round(confidence * 100);\n  const color = confidence > 0.8 ? 'green' : confidence > 0.5 ? 'yellow' : 'red';\n  \n  return (\n    <div className=\"flex items-center space-x-1\">\n      <div className=\"w-16 h-2 bg-gray-200 rounded-full overflow-hidden\">\n        <div\n          className={`h-full bg-${color}-500 transition-all`}\n          style={{ width: `${percentage}%` }}\n        />\n      </div>\n      <span className=\"text-xs text-gray-500\">{percentage}%</span>\n    </div>\n  );\n};\n\ninterface MetricCardProps {\n  label: string;\n  value: string | number;\n  type: 'number' | 'percentage' | 'rating' | 'score';\n}\n\nconst MetricCard: React.FC<MetricCardProps> = ({ label, value, type }) => {\n  const getColor = () => {\n    if (type === 'percentage' || type === 'score') {\n      const num = typeof value === 'string' ? parseInt(value) : value;\n      if (num >= 80) return 'text-green-600';\n      if (num >= 60) return 'text-yellow-600';\n      return 'text-red-600';\n    }\n    if (type === 'rating') {\n      if (value === 'low') return 'text-green-600';\n      if (value === 'medium') return 'text-yellow-600';\n      return 'text-red-600';\n    }\n    return 'text-gray-900';\n  };\n\n  return (\n    <div className=\"bg-gray-50 p-3 rounded\">\n      <p className=\"text-sm text-gray-500\">{label}</p>\n      <p className={`text-2xl font-semibold ${getColor()}`}>{value}</p>\n    </div>\n  );\n};\n\n// Render project-specific sections based on type\nfunction renderProjectSpecificSections(\n  context: BaseProjectContext,\n  expandedSections: Set<string>,\n  toggleSection: (section: string) => void\n) {\n  switch (context.projectType) {\n    case 'web_app':\n    case 'nextjs':\n    case 'react':\n      return renderWebAppSections(context as WebAppContext, expandedSections, toggleSection);\n    case 'api':\n    case 'microservice':\n      return renderAPISections(context as APIContext, expandedSections, toggleSection);\n    case 'electron':\n      return renderElectronSections(context as ElectronContext, expandedSections, toggleSection);\n    case 'machine_learning':\n      return renderMLSections(context as MLContext, expandedSections, toggleSection);\n    default:\n      return null;\n  }\n}\n\nfunction renderWebAppSections(\n  context: WebAppContext,\n  expandedSections: Set<string>,\n  toggleSection: (section: string) => void\n) {\n  return (\n    <ContextSection\n      title=\"Web Application Details\"\n      id=\"webapp\"\n      expanded={expandedSections.has('webapp')}\n      onToggle={() => toggleSection('webapp')}\n    >\n      <div className=\"space-y-3\">\n        {context.webFramework && (\n          <div>\n            <label className=\"text-sm text-gray-500\">Web Framework</label>\n            <p className=\"font-medium\">{context.webFramework}</p>\n          </div>\n        )}\n        {context.cssFramework && (\n          <div>\n            <label className=\"text-sm text-gray-500\">CSS Framework</label>\n            <p className=\"font-medium\">{context.cssFramework}</p>\n          </div>\n        )}\n        {context.stateManagement && (\n          <div>\n            <label className=\"text-sm text-gray-500\">State Management</label>\n            <p className=\"font-medium\">{context.stateManagement}</p>\n          </div>\n        )}\n        {context.apiIntegration && (\n          <div>\n            <label className=\"text-sm text-gray-500\">API Integration</label>\n            <p className=\"font-medium\">\n              {context.apiIntegration.type}\n              {context.apiIntegration.client && ` (${context.apiIntegration.client})`}\n            </p>\n          </div>\n        )}\n      </div>\n    </ContextSection>\n  );\n}\n\nfunction renderAPISections(\n  context: APIContext,\n  expandedSections: Set<string>,\n  toggleSection: (section: string) => void\n) {\n  return (\n    <ContextSection\n      title=\"API Details\"\n      id=\"api\"\n      expanded={expandedSections.has('api')}\n      onToggle={() => toggleSection('api')}\n    >\n      <div className=\"space-y-3\">\n        {context.apiFramework && (\n          <div>\n            <label className=\"text-sm text-gray-500\">API Framework</label>\n            <p className=\"font-medium\">{context.apiFramework}</p>\n          </div>\n        )}\n        {context.apiProtocol && (\n          <div>\n            <label className=\"text-sm text-gray-500\">Protocol</label>\n            <p className=\"font-medium\">{context.apiProtocol.toUpperCase()}</p>\n          </div>\n        )}\n        {context.databases && context.databases.length > 0 && (\n          <div>\n            <label className=\"text-sm text-gray-500\">Databases</label>\n            <div className=\"mt-1 space-y-1\">\n              {context.databases.map((db, idx) => (\n                <div key={idx} className=\"text-sm\">\n                  <span className=\"font-medium\">{db.type}</span>\n                  {db.orm && <span className=\"text-gray-500\"> (ORM: {db.orm})</span>}\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n        {context.authentication && (\n          <div>\n            <label className=\"text-sm text-gray-500\">Authentication</label>\n            <p className=\"font-medium\">\n              {context.authentication.type}\n              {context.authentication.provider && ` (${context.authentication.provider})`}\n            </p>\n          </div>\n        )}\n      </div>\n    </ContextSection>\n  );\n}\n\nfunction renderElectronSections(\n  context: ElectronContext,\n  expandedSections: Set<string>,\n  toggleSection: (section: string) => void\n) {\n  return (\n    <ContextSection\n      title=\"Electron Details\"\n      id=\"electron\"\n      expanded={expandedSections.has('electron')}\n      onToggle={() => toggleSection('electron')}\n    >\n      <div className=\"space-y-3\">\n        <div>\n          <label className=\"text-sm text-gray-500\">Electron Version</label>\n          <p className=\"font-medium\">{context.electronVersion}</p>\n        </div>\n        <div>\n          <label className=\"text-sm text-gray-500\">Security</label>\n          <div className=\"mt-1 space-y-1 text-sm\">\n            <p>\n              Node Integration: {' '}\n              <span className={context.nodeIntegration ? 'text-red-600' : 'text-green-600'}>\n                {context.nodeIntegration ? 'Enabled' : 'Disabled'}\n              </span>\n            </p>\n            <p>\n              Context Isolation: {' '}\n              <span className={context.contextIsolation ? 'text-green-600' : 'text-red-600'}>\n                {context.contextIsolation ? 'Enabled' : 'Disabled'}\n              </span>\n            </p>\n          </div>\n        </div>\n        {context.platformFeatures && (\n          <div>\n            <label className=\"text-sm text-gray-500\">Platform Features</label>\n            <div className=\"mt-1 space-y-1 text-sm\">\n              <p>Auto Updater: {context.platformFeatures.autoUpdater ? 'Yes' : 'No'}</p>\n              {context.platformFeatures.nativeModules.length > 0 && (\n                <p>Native Modules: {context.platformFeatures.nativeModules.join(', ')}</p>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </ContextSection>\n  );\n}\n\nfunction renderMLSections(\n  context: MLContext,\n  expandedSections: Set<string>,\n  toggleSection: (section: string) => void\n) {\n  return (\n    <ContextSection\n      title=\"Machine Learning Details\"\n      id=\"ml\"\n      expanded={expandedSections.has('ml')}\n      onToggle={() => toggleSection('ml')}\n    >\n      <div className=\"space-y-3\">\n        {context.mlFramework && (\n          <div>\n            <label className=\"text-sm text-gray-500\">ML Framework</label>\n            <p className=\"font-medium\">{context.mlFramework}</p>\n          </div>\n        )}\n        {context.mlType && (\n          <div>\n            <label className=\"text-sm text-gray-500\">ML Type</label>\n            <p className=\"font-medium\">{context.mlType}</p>\n          </div>\n        )}\n        {context.models && context.models.length > 0 && (\n          <div>\n            <label className=\"text-sm text-gray-500\">Models</label>\n            <div className=\"mt-1 space-y-1\">\n              {context.models.map((model, idx) => (\n                <div key={idx} className=\"text-sm\">\n                  <span className=\"font-medium\">{model.name}</span>\n                  <span className=\"text-gray-500\"> ({model.format})</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </ContextSection>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/figma/FigmaIntegrationPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[322,325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[322,325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":24,"column":10,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":24,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[721,724],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[721,724],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":27,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":27,"endColumn":28,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[758,758],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":65,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":65,"endColumn":37,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1741,1741],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":71,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":71,"endColumn":42,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2038,2038],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":82,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":100,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":84,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":84,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":88,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":88,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":89,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":89,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":90,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":90,"endColumn":30},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":104,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":123,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":106,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":106,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":110,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":110,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":111,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":111,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":112,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":112,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":113,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":113,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":130,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":130,"endColumn":85},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":171,"column":27,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":171,"endColumn":41},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":193,"column":23,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":193,"endColumn":38},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":200,"column":23,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":200,"endColumn":39},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":209,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":209,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":254,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7837,7840],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7837,7840],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":268,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":268,"endColumn":39}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\n\ninterface FigmaIntegrationPanelProps {\n  mode: 'self-improvement' | 'project-enhancement';\n  projectId?: string;\n}\n\ninterface UIUpdateStatus {\n  sessionId?: string;\n  status: string;\n  changes?: any;\n  previewUrl?: string;\n  error?: string;\n}\n\nexport const FigmaIntegrationPanel: React.FC<FigmaIntegrationPanelProps> = ({ mode, projectId }) => {\n  const [figmaFileKey, setFigmaFileKey] = useState('');\n  const [isConnected, setIsConnected] = useState(false);\n  const [updateStatus, setUpdateStatus] = useState<UIUpdateStatus>({\n    status: 'idle'\n  });\n  const [preview, setPreview] = useState<any>(null);\n\n  useEffect(() => {\n    checkFigmaConnection();\n  }, []);\n\n  const checkFigmaConnection = async () => {\n    try {\n      const connected = await window.electron.figma.checkConnection();\n      setIsConnected(connected);\n    } catch (error) {\n      // Failed to check Figma connection\n    }\n  };\n\n  const connectFigma = async () => {\n    try {\n      const apiKey = await window.electron.figma.getApiKey();\n      if (apiKey) {\n        await window.electron.figma.initialize(apiKey);\n        setIsConnected(true);\n      }\n    } catch (error) {\n      // Failed to connect Figma\n    }\n  };\n\n  const startUIUpdate = async () => {\n    if (!figmaFileKey) {\n      alert('Please enter a Figma file key');\n      return;\n    }\n\n    setUpdateStatus({ status: 'starting' });\n\n    try {\n      if (mode === 'self-improvement') {\n        const sessionId = await window.electron.figma.startSessionHubUIUpdate(figmaFileKey);\n        setUpdateStatus({ sessionId, status: 'running' });\n        \n        // Poll for status\n        pollUpdateStatus(sessionId);\n      } else if (mode === 'project-enhancement' && projectId) {\n        const sessionId = await window.electron.figma.startProjectUIUpdate(projectId, figmaFileKey);\n        setUpdateStatus({ sessionId, status: 'running' });\n        \n        // Poll for status\n        pollEnhancementStatus(sessionId);\n      }\n    } catch (error) {\n      setUpdateStatus({ \n        status: 'failed', \n        error: (error as Error).message \n      });\n    }\n  };\n\n  const pollUpdateStatus = async (sessionId: string) => {\n    const interval = setInterval(async () => {\n      try {\n        const status = await window.electron.figma.getUpdateStatus(sessionId);\n        \n        setUpdateStatus({\n          sessionId,\n          status: status.status,\n          changes: status.changes,\n          error: status.error\n        });\n\n        if (status.status === 'completed' || status.status === 'failed') {\n          clearInterval(interval);\n        }\n      } catch (error) {\n        clearInterval(interval);\n        // Failed to poll status\n      }\n    }, 2000);\n  };\n\n  const pollEnhancementStatus = async (sessionId: string) => {\n    const interval = setInterval(async () => {\n      try {\n        const status = await window.electron.figma.getEnhancementStatus(sessionId);\n        \n        setUpdateStatus({\n          sessionId,\n          status: status.status,\n          changes: status.changes,\n          previewUrl: status.deploymentUrl,\n          error: status.error\n        });\n\n        if (status.status === 'completed' || status.status === 'failed') {\n          clearInterval(interval);\n        }\n      } catch (error) {\n        clearInterval(interval);\n        // Failed to poll status\n      }\n    }, 2000);\n  };\n\n  const previewChanges = async () => {\n    if (!figmaFileKey) return;\n\n    try {\n      const previewData = await window.electron.figma.previewUIChanges(figmaFileKey);\n      setPreview(previewData);\n    } catch (error) {\n      // Failed to preview changes\n    }\n  };\n\n  const applyChanges = async () => {\n    if (!updateStatus.sessionId) return;\n\n    try {\n      await window.electron.figma.applyUIChanges(updateStatus.sessionId);\n      alert('UI changes applied successfully!');\n    } catch (error) {\n      alert('Failed to apply changes: ' + (error as Error).message);\n    }\n  };\n\n  const createPullRequest = async () => {\n    if (!figmaFileKey) return;\n\n    try {\n      const prUrl = await window.electron.figma.createUIPullRequest(\n        figmaFileKey,\n        'UI updates from Figma design'\n      );\n      window.open(prUrl, '_blank');\n    } catch (error) {\n      alert('Failed to create PR: ' + (error as Error).message);\n    }\n  };\n\n  return (\n    <Card className=\"p-6\">\n      <h2 className=\"text-2xl font-bold mb-4\">\n        Figma MCP Integration - {mode === 'self-improvement' ? 'SessionHub UI' : 'Project UI'}\n      </h2>\n\n      {!isConnected ? (\n        <div className=\"mb-6\">\n          <p className=\"text-gray-600 mb-4\">Connect to Figma to start syncing designs</p>\n          <Button onClick={connectFigma}>Connect Figma</Button>\n        </div>\n      ) : (\n        <>\n          <div className=\"mb-6\">\n            <label className=\"block text-sm font-medium mb-2\">\n              Figma File Key\n            </label>\n            <input\n              type=\"text\"\n              value={figmaFileKey}\n              onChange={(e) => setFigmaFileKey(e.target.value)}\n              placeholder=\"Enter Figma file key or URL\"\n              className=\"w-full p-2 border rounded\"\n            />\n            <p className=\"text-xs text-gray-500 mt-1\">\n              You can find this in your Figma file URL\n            </p>\n          </div>\n\n          <div className=\"flex gap-2 mb-6\">\n            <Button \n              onClick={startUIUpdate}\n              disabled={!figmaFileKey || updateStatus.status === 'running'}\n            >\n              {updateStatus.status === 'running' ? 'Updating...' : 'Start UI Update'}\n            </Button>\n            \n            <Button \n              onClick={previewChanges}\n              variant=\"secondary\"\n              disabled={!figmaFileKey}\n            >\n              Preview Changes\n            </Button>\n\n            {mode === 'self-improvement' && (\n              <Button \n                onClick={createPullRequest}\n                variant=\"secondary\"\n                disabled={!figmaFileKey}\n              >\n                Create PR\n              </Button>\n            )}\n          </div>\n\n          {/* Status Display */}\n          {updateStatus.status !== 'idle' && (\n            <div className=\"mb-6 p-4 bg-gray-50 rounded\">\n              <h3 className=\"font-semibold mb-2\">Update Status</h3>\n              <p className=\"text-sm\">\n                Status: <span className=\"font-medium\">{updateStatus.status}</span>\n              </p>\n              {updateStatus.sessionId && (\n                <p className=\"text-sm\">\n                  Session: <span className=\"font-mono text-xs\">{updateStatus.sessionId}</span>\n                </p>\n              )}\n              {updateStatus.previewUrl && (\n                <p className=\"text-sm\">\n                  Preview: <a href={updateStatus.previewUrl} target=\"_blank\" className=\"text-blue-600 hover:underline\">\n                    {updateStatus.previewUrl}\n                  </a>\n                </p>\n              )}\n              {updateStatus.error && (\n                <p className=\"text-sm text-red-600\">\n                  Error: {updateStatus.error}\n                </p>\n              )}\n            </div>\n          )}\n\n          {/* Preview Display */}\n          {preview && (\n            <div className=\"mb-6 p-4 bg-blue-50 rounded\">\n              <h3 className=\"font-semibold mb-2\">Preview</h3>\n              <p className=\"text-sm mb-2\">{preview.summary}</p>\n              <p className=\"text-sm\">Files affected: {preview.filesAffected}</p>\n              <div className=\"mt-2\">\n                <h4 className=\"text-sm font-medium\">Components:</h4>\n                <ul className=\"text-sm list-disc list-inside\">\n                  {preview.components.map((comp: any, idx: number) => (\n                    <li key={idx}>\n                      {comp.path} ({comp.action})\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          )}\n\n          {/* Apply Changes Button */}\n          {updateStatus.status === 'completed' && updateStatus.changes && (\n            <div className=\"mt-4\">\n              <Button \n                onClick={applyChanges}\n                variant=\"primary\"\n              >\n                Apply Changes to {mode === 'self-improvement' ? 'SessionHub' : 'Project'}\n              </Button>\n            </div>\n          )}\n        </>\n      )}\n    </Card>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/ide/ZedConnectionStatus.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":20,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":20,"endColumn":19,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[580,580],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":23,"column":34,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":23,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[758,761],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[758,761],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":120,"column":23,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":120,"endColumn":40}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card } from '../../../components/ui/Card';\nimport { Button } from '../../../components/ui/Button';\n\ninterface ConnectionHealth {\n  isConnected: boolean;\n  isZedRunning: boolean;\n  isMCPAvailable: boolean;\n  lastHealthCheck: Date;\n  connectionUptime: number;\n  errors: string[];\n}\n\nexport const ZedConnectionStatus: React.FC = () => {\n  const [health, setHealth] = useState<ConnectionHealth | null>(null);\n  const [isReconnecting, setIsReconnecting] = useState(false);\n\n  useEffect(() => {\n    // Get initial status\n    checkHealth();\n\n    // Set up health check polling\n    const interval = setInterval(checkHealth, 5000);\n\n    // Listen for health updates\n    const handleHealthUpdate = (_event: any, healthData: ConnectionHealth) => {\n      setHealth(healthData);\n    };\n\n    window.electronAPI.api.on('zed:health-update', handleHealthUpdate);\n\n    return () => {\n      clearInterval(interval);\n      window.electronAPI.api.off('zed:health-update', handleHealthUpdate);\n    };\n  }, []);\n\n  const checkHealth = async () => {\n    try {\n      const healthData = await window.electronAPI.zed.getConnectionHealth();\n      setHealth(healthData);\n    } catch (error) {\n      // Handle error silently - health state will remain unchanged\n      // The UI will continue to show the last known state\n    }\n  };\n\n  const handleReconnect = async () => {\n    setIsReconnecting(true);\n    try {\n      await window.electronAPI.zed.reconnect();\n    } catch (error) {\n      // Show user-friendly error notification\n      window.electronAPI.api.showNotification({\n        title: 'Reconnection Failed',\n        body: error instanceof Error ? error.message : 'Unable to reconnect to Zed',\n        type: 'error'\n      });\n    } finally {\n      setIsReconnecting(false);\n    }\n  };\n\n  const formatUptime = (ms: number): string => {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n\n    if (days > 0) return `${days}d ${hours % 24}h`;\n    if (hours > 0) return `${hours}h ${minutes % 60}m`;\n    if (minutes > 0) return `${minutes}m ${seconds % 60}s`;\n    return `${seconds}s`;\n  };\n\n  if (!health) {\n    return (\n      <Card className=\"p-4\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mb-2\"></div>\n          <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/2\"></div>\n        </div>\n      </Card>\n    );\n  }\n\n  const getStatusColor = () => {\n    if (health.isConnected && health.isMCPAvailable) return 'bg-green-500';\n    if (health.isConnected || health.isZedRunning) return 'bg-yellow-500';\n    return 'bg-red-500';\n  };\n\n  const getStatusText = () => {\n    if (health.isConnected && health.isMCPAvailable) return 'Connected';\n    if (health.isConnected) return 'Partial Connection';\n    if (health.isZedRunning) return 'Zed Running (Not Connected)';\n    return 'Disconnected';\n  };\n\n  return (\n    <Card className=\"p-4\">\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className={`w-3 h-3 rounded-full ${getStatusColor()} animate-pulse`} />\n            <div>\n              <h3 className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n                Zed Connection\n              </h3>\n              <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                {getStatusText()}\n              </p>\n            </div>\n          </div>\n          \n          {!health.isConnected && (\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={handleReconnect}\n              disabled={isReconnecting}\n            >\n              {isReconnecting ? 'Reconnecting...' : 'Reconnect'}\n            </Button>\n          )}\n        </div>\n\n        <div className=\"grid grid-cols-3 gap-2 text-xs\">\n          <StatusItem\n            label=\"Zed\"\n            value={health.isZedRunning ? 'Running' : 'Not Running'}\n            success={health.isZedRunning}\n          />\n          <StatusItem\n            label=\"MCP\"\n            value={health.isMCPAvailable ? 'Available' : 'Unavailable'}\n            success={health.isMCPAvailable}\n          />\n          <StatusItem\n            label=\"Uptime\"\n            value={health.connectionUptime > 0 ? formatUptime(health.connectionUptime) : 'N/A'}\n            success={health.connectionUptime > 0}\n          />\n        </div>\n\n        {health.errors.length > 0 && (\n          <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md p-2\">\n            <p className=\"text-xs font-medium text-red-800 dark:text-red-200 mb-1\">\n              Issues:\n            </p>\n            <ul className=\"text-xs text-red-700 dark:text-red-300 space-y-0.5\">\n              {health.errors.map((error, index) => (\n                <li key={index}>• {error}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n          Last checked: {new Date(health.lastHealthCheck).toLocaleTimeString()}\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nconst StatusItem: React.FC<{ label: string; value: string; success: boolean }> = ({\n  label,\n  value,\n  success\n}) => (\n  <div className=\"bg-gray-50 dark:bg-gray-800 rounded p-2\">\n    <p className=\"text-gray-600 dark:text-gray-400\">{label}</p>\n    <p className={`font-medium ${success ? 'text-green-600 dark:text-green-400' : 'text-gray-900 dark:text-white'}`}>\n      {value}\n    </p>\n  </div>\n);","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/ide/ZedConnectionWizard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1460,1463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1460,1463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1901,1904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1901,1904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":177,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":177,"endColumn":105},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":197,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":197,"endColumn":50},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":251,"column":31,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":251,"endColumn":44}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Button } from '../ui/Button';\nimport { Card } from '../ui/Card';\nimport { LoadingSpinner } from '../../../components/ui/LoadingSpinner';\n\ninterface ZedConnectionWizardProps {\n  onComplete: () => void;\n  onCancel: () => void;\n}\n\ntype WizardStep = 'welcome' | 'credentials' | 'testing' | 'complete';\n\ninterface ConnectionTestResult {\n  success: boolean;\n  diagnostics: {\n    zedInstalled: boolean;\n    zedRunning: boolean;\n    mcpConfigured: boolean;\n    credentialsValid: boolean;\n  };\n  errors: string[];\n}\n\nexport const ZedConnectionWizard: React.FC<ZedConnectionWizardProps> = ({\n  onComplete,\n  onCancel\n}) => {\n  const [currentStep, setCurrentStep] = useState<WizardStep>('welcome');\n  const [email, setEmail] = useState('');\n  const [apiToken, setApiToken] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [testResult, setTestResult] = useState<ConnectionTestResult | null>(null);\n\n  const handleCredentialsSubmit = async () => {\n    if (!email || !apiToken) {\n      setError('Please provide both email and API token');\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Store credentials\n      await window.electronAPI.zed.storeCredentials({ email, apiToken });\n      \n      // Move to testing step\n      setCurrentStep('testing');\n      await runConnectionTest();\n    } catch (err: any) {\n      setError(err.message || 'Failed to store credentials');\n      setIsLoading(false);\n    }\n  };\n\n  const runConnectionTest = async () => {\n    try {\n      const result = await window.electronAPI.zed.testConnection();\n      setTestResult(result);\n      \n      if (result.success) {\n        // Auto-proceed to complete step after successful test\n        setTimeout(() => setCurrentStep('complete'), 2000);\n      }\n    } catch (err: any) {\n      setError(err.message || 'Connection test failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRetry = async () => {\n    setIsLoading(true);\n    setError(null);\n    await runConnectionTest();\n  };\n\n  const renderWelcomeStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center space-y-4\">\n        <div className=\"w-24 h-24 mx-auto bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center\">\n          <svg className=\"w-12 h-12 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4\" />\n          </svg>\n        </div>\n        \n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n          Connect SessionHub to Zed\n        </h2>\n        \n        <p className=\"text-gray-600 dark:text-gray-400 max-w-md mx-auto\">\n          Set up the integration between SessionHub and Zed to enable Two-Actor development with lightning-fast performance.\n        </p>\n      </div>\n\n      <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n        <h3 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-2\">\n          What you'll need:\n        </h3>\n        <ul className=\"space-y-2 text-sm text-blue-800 dark:text-blue-200\">\n          <li className=\"flex items-start\">\n            <span className=\"mr-2\">•</span>\n            <span>Zed installed on your Mac (download from zed.dev)</span>\n          </li>\n          <li className=\"flex items-start\">\n            <span className=\"mr-2\">•</span>\n            <span>Your Zed account email address</span>\n          </li>\n          <li className=\"flex items-start\">\n            <span className=\"mr-2\">•</span>\n            <span>A Zed API token (we'll help you create one)</span>\n          </li>\n        </ul>\n      </div>\n\n      <div className=\"flex justify-between\">\n        <Button variant=\"ghost\" onClick={onCancel}>\n          Cancel\n        </Button>\n        <Button onClick={() => setCurrentStep('credentials')}>\n          Get Started\n        </Button>\n      </div>\n    </div>\n  );\n\n  const renderCredentialsStep = () => (\n    <div className=\"space-y-6\">\n      <div>\n        <button\n          onClick={() => setCurrentStep('welcome')}\n          className=\"flex items-center text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100\"\n        >\n          <svg className=\"w-4 h-4 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n          </svg>\n          Back\n        </button>\n      </div>\n\n      <div className=\"space-y-4\">\n        <h2 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n          Enter Your Zed Credentials\n        </h2>\n\n        <div className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n              Zed Account Email\n            </label>\n            <input\n              id=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white\"\n              placeholder=\"you@example.com\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"apiToken\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n              API Token\n            </label>\n            <input\n              id=\"apiToken\"\n              type=\"password\"\n              value={apiToken}\n              onChange={(e) => setApiToken(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white\"\n              placeholder=\"zed_token_...\"\n            />\n            <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n              Don't have a token? \n              <button\n                onClick={() => window.electronAPI.shell.openExternal('https://zed.dev/settings/tokens')}\n                className=\"ml-1 text-blue-500 hover:text-blue-600 underline\"\n              >\n                Create one here\n              </button>\n            </p>\n          </div>\n        </div>\n\n        {error && (\n          <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md p-3\">\n            <p className=\"text-sm text-red-800 dark:text-red-200\">{error}</p>\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex justify-between\">\n        <Button variant=\"ghost\" onClick={() => setCurrentStep('welcome')}>\n          Back\n        </Button>\n        <Button onClick={handleCredentialsSubmit} disabled={isLoading}>\n          {isLoading ? 'Connecting...' : 'Connect to Zed'}\n        </Button>\n      </div>\n    </div>\n  );\n\n  const renderTestingStep = () => (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n        Testing Connection\n      </h2>\n\n      {isLoading ? (\n        <div className=\"flex flex-col items-center justify-center py-12 space-y-4\">\n          <LoadingSpinner size=\"lg\" />\n          <p className=\"text-gray-600 dark:text-gray-400\">Running connection diagnostics...</p>\n        </div>\n      ) : testResult ? (\n        <div className=\"space-y-4\">\n          <div className=\"space-y-3\">\n            <DiagnosticItem\n              label=\"Zed Installed\"\n              success={testResult.diagnostics.zedInstalled}\n            />\n            <DiagnosticItem\n              label=\"Zed Running\"\n              success={testResult.diagnostics.zedRunning}\n            />\n            <DiagnosticItem\n              label=\"MCP Configured\"\n              success={testResult.diagnostics.mcpConfigured}\n            />\n            <DiagnosticItem\n              label=\"Credentials Valid\"\n              success={testResult.diagnostics.credentialsValid}\n            />\n          </div>\n\n          {testResult.errors.length > 0 && (\n            <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md p-3\">\n              <p className=\"text-sm font-medium text-red-800 dark:text-red-200 mb-1\">\n                Issues detected:\n              </p>\n              <ul className=\"list-disc list-inside text-sm text-red-700 dark:text-red-300\">\n                {testResult.errors.map((error, index) => (\n                  <li key={index}>{error}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          {!testResult.success && (\n            <div className=\"flex justify-center\">\n              <Button onClick={handleRetry} disabled={isLoading}>\n                Retry Test\n              </Button>\n            </div>\n          )}\n        </div>\n      ) : null}\n    </div>\n  );\n\n  const renderCompleteStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center space-y-4\">\n        <div className=\"w-20 h-20 mx-auto bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center\">\n          <svg className=\"w-10 h-10 text-green-600 dark:text-green-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n          </svg>\n        </div>\n\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n          Successfully Connected!\n        </h2>\n\n        <p className=\"text-gray-600 dark:text-gray-400 max-w-md mx-auto\">\n          SessionHub is now connected to Zed. You can start using the Two-Actor development workflow with lightning-fast performance.\n        </p>\n      </div>\n\n      <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n        <h3 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-2\">\n          What's next?\n        </h3>\n        <ul className=\"space-y-2 text-sm text-blue-800 dark:text-blue-200\">\n          <li className=\"flex items-start\">\n            <span className=\"mr-2\">•</span>\n            <span>Create or open a project to start developing</span>\n          </li>\n          <li className=\"flex items-start\">\n            <span className=\"mr-2\">•</span>\n            <span>Use SessionHub's Planning Actor to design your approach</span>\n          </li>\n          <li className=\"flex items-start\">\n            <span className=\"mr-2\">•</span>\n            <span>Watch as the Execution Actor implements through Zed's agent panel</span>\n          </li>\n        </ul>\n      </div>\n\n      <div className=\"flex justify-center\">\n        <Button onClick={onComplete}>\n          Start Using SessionHub\n        </Button>\n      </div>\n    </div>\n  );\n\n  return (\n    <Card className=\"max-w-2xl mx-auto\">\n      <div className=\"p-6\">\n        {currentStep === 'welcome' && renderWelcomeStep()}\n        {currentStep === 'credentials' && renderCredentialsStep()}\n        {currentStep === 'testing' && renderTestingStep()}\n        {currentStep === 'complete' && renderCompleteStep()}\n      </div>\n    </Card>\n  );\n};\n\nconst DiagnosticItem: React.FC<{ label: string; success: boolean }> = ({ label, success }) => (\n  <div className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-md\">\n    <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">{label}</span>\n    {success ? (\n      <span className=\"flex items-center text-green-600 dark:text-green-400\">\n        <svg className=\"w-5 h-5 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n        </svg>\n        <span className=\"text-sm\">Passed</span>\n      </span>\n    ) : (\n      <span className=\"flex items-center text-red-600 dark:text-red-400\">\n        <svg className=\"w-5 h-5 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n        </svg>\n        <span className=\"text-sm\">Failed</span>\n      </span>\n    )}\n  </div>\n);","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/ide/ZedProjectSwitcher.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":27,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":27,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[734,734],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":151,"column":23,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":151,"endColumn":59}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card } from '../ui/Card';\nimport { LoadingSpinner } from '../../../components/ui/LoadingSpinner';\n\ninterface Project {\n  id: string;\n  name: string;\n  path: string;\n  type: string;\n  lastOpened?: Date;\n  isActive?: boolean;\n}\n\ninterface ZedProjectSwitcherProps {\n  onProjectSwitch?: (project: Project) => void;\n}\n\nexport const ZedProjectSwitcher: React.FC<ZedProjectSwitcherProps> = ({\n  onProjectSwitch\n}) => {\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSwitching, setIsSwitching] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  useEffect(() => {\n    loadProjects();\n  }, []);\n\n  const loadProjects = async () => {\n    try {\n      const projectList = await window.electronAPI.projects.list();\n      setProjects(projectList);\n    } catch (error) {\n      // Handle error silently - empty project list will be shown\n      setProjects([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleProjectSwitch = async (project: Project) => {\n    setIsSwitching(project.id);\n    \n    try {\n      // Measure switch time\n      const startTime = performance.now();\n      \n      // Switch to project in Zed\n      await window.electronAPI.zed.openWorkspace(project.path);\n      \n      const switchTime = performance.now() - startTime;\n      \n      // Update project as active\n      const updatedProjects = projects.map(p => ({\n        ...p,\n        isActive: p.id === project.id,\n        lastOpened: p.id === project.id ? new Date() : p.lastOpened\n      }));\n      setProjects(updatedProjects);\n      \n      // Show performance metric\n      if (switchTime < 2000) {\n        window.electronAPI.api.showNotification({\n          title: 'Project Opened',\n          body: `Switched to ${project.name} in ${Math.round(switchTime)}ms`,\n          type: 'success'\n        });\n      }\n      \n      onProjectSwitch?.(project);\n    } catch (error) {\n      window.electronAPI.api.showNotification({\n        title: 'Switch Failed',\n        body: error instanceof Error ? error.message : `Failed to open ${project.name} in Zed`,\n        type: 'error'\n      });\n    } finally {\n      setIsSwitching(null);\n    }\n  };\n\n  const filteredProjects = projects.filter(project =>\n    project.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    project.path.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const getProjectIcon = (type: string) => {\n    const icons: Record<string, string> = {\n      'next': '⚡',\n      'react': '⚛️',\n      'node': '🟢',\n      'typescript': '🔷',\n      'javascript': '🟨',\n      'python': '🐍',\n      'rust': '🦀',\n      'go': '🐹'\n    };\n    return icons[type] || '📁';\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"p-6\">\n        <div className=\"flex items-center justify-center\">\n          <LoadingSpinner />\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"p-4\">\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n            Quick Project Switch\n          </h3>\n          <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n            {projects.length} projects\n          </div>\n        </div>\n\n        <div className=\"relative\">\n          <input\n            type=\"text\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            placeholder=\"Search projects...\"\n            className=\"w-full px-3 py-2 pl-9 text-sm border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-white\"\n          />\n          <svg\n            className=\"absolute left-3 top-2.5 w-4 h-4 text-gray-400\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n            />\n          </svg>\n        </div>\n\n        <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n          {filteredProjects.map((project) => (\n            <button\n              key={project.id}\n              onClick={() => handleProjectSwitch(project)}\n              disabled={isSwitching !== null}\n              className={`\n                w-full text-left p-3 rounded-md transition-all\n                ${project.isActive\n                  ? 'bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800'\n                  : 'bg-gray-50 dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700'\n                }\n                ${isSwitching === project.id ? 'opacity-50' : ''}\n              `}\n            >\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <span className=\"text-2xl\">{getProjectIcon(project.type)}</span>\n                  <div>\n                    <div className=\"flex items-center space-x-2\">\n                      <p className=\"font-medium text-gray-900 dark:text-white\">\n                        {project.name}\n                      </p>\n                      {project.isActive && (\n                        <span className=\"px-2 py-0.5 text-xs bg-blue-100 dark:bg-blue-800 text-blue-700 dark:text-blue-200 rounded-full\">\n                          Active\n                        </span>\n                      )}\n                    </div>\n                    <p className=\"text-xs text-gray-600 dark:text-gray-400 truncate max-w-xs\">\n                      {project.path}\n                    </p>\n                  </div>\n                </div>\n                \n                {isSwitching === project.id ? (\n                  <LoadingSpinner size=\"sm\" />\n                ) : (\n                  <svg\n                    className=\"w-5 h-5 text-gray-400\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M13 7l5 5m0 0l-5 5m5-5H6\"\n                    />\n                  </svg>\n                )}\n              </div>\n              \n              {project.lastOpened && (\n                <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1 ml-11\">\n                  Last opened: {new Date(project.lastOpened).toLocaleString()}\n                </p>\n              )}\n            </button>\n          ))}\n        </div>\n\n        {filteredProjects.length === 0 && (\n          <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n            <p className=\"text-sm\">No projects found</p>\n          </div>\n        )}\n\n        <div className=\"pt-2 border-t border-gray-200 dark:border-gray-700\">\n          <p className=\"text-xs text-gray-500 dark:text-gray-400 text-center\">\n            Tip: Projects open in Zed in under 2 seconds with full workspace restoration\n          </p>\n        </div>\n      </div>\n    </Card>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/ide/ZedTwoActorSync.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":37,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":37,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[932,932],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1027,1030],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1027,1030],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1040,1043],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1040,1043],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":43,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":43,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1186,1189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1186,1189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1199,1202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1199,1202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":50,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":50,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1346,1349],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1346,1349],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":63,"column":34,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":63,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":75,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":75,"endColumn":67},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":119,"column":23,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":119,"endColumn":35}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\n\ninterface ActorStatus {\n  planning: {\n    active: boolean;\n    currentTask?: string;\n    lastInstruction?: string;\n  };\n  execution: {\n    active: boolean;\n    currentTask?: string;\n    progress?: number;\n    agentPanelConnected: boolean;\n  };\n}\n\ninterface Instruction {\n  id: string;\n  type: 'planning' | 'execution';\n  content: string;\n  timestamp: Date;\n  status: 'pending' | 'sent' | 'completed' | 'failed';\n}\n\nexport const ZedTwoActorSync: React.FC = () => {\n  const [actorStatus, setActorStatus] = useState<ActorStatus>({\n    planning: { active: false },\n    execution: { active: false, agentPanelConnected: false }\n  });\n  const [instructions, setInstructions] = useState<Instruction[]>([]);\n  const [isSyncing, setIsSyncing] = useState(false);\n\n  useEffect(() => {\n    // Initial status check\n    checkActorStatus();\n\n    // Listen for actor updates\n    const handlePlanningUpdate = (_event: any, status: any) => {\n      setActorStatus(prev => ({\n        ...prev,\n        planning: status\n      }));\n    };\n\n    const handleExecutionUpdate = (_event: any, status: any) => {\n      setActorStatus(prev => ({\n        ...prev,\n        execution: status\n      }));\n    };\n\n    const handleInstructionSent = (_event: any, instruction: Instruction) => {\n      setInstructions(prev => [instruction, ...prev].slice(0, 10)); // Keep last 10\n    };\n\n    window.electronAPI.api.on('actor:planning-update', handlePlanningUpdate);\n    window.electronAPI.api.on('actor:execution-update', handleExecutionUpdate);\n    window.electronAPI.api.on('actor:instruction-sent', handleInstructionSent);\n\n    // Poll for status updates\n    const interval = setInterval(checkActorStatus, 3000);\n\n    return () => {\n      clearInterval(interval);\n      window.electronAPI.api.off('actor:planning-update', handlePlanningUpdate);\n      window.electronAPI.api.off('actor:execution-update', handleExecutionUpdate);\n      window.electronAPI.api.off('actor:instruction-sent', handleInstructionSent);\n    };\n  }, []);\n\n  const checkActorStatus = async () => {\n    try {\n      const status = await window.electronAPI.zed.getActorStatus();\n      setActorStatus(status);\n    } catch (error) {\n      // Silently handle error - status will remain unchanged\n      // The UI will show the last known state\n    }\n  };\n\n  const handleSync = async () => {\n    setIsSyncing(true);\n    try {\n      await window.electronAPI.zed.syncActors();\n      window.electronAPI.api.showNotification({\n        title: 'Actors Synchronized',\n        body: 'Planning and Execution actors are now in sync',\n        type: 'success'\n      });\n    } catch (error) {\n      window.electronAPI.api.showNotification({\n        title: 'Sync Failed',\n        body: error instanceof Error ? error.message : 'Failed to synchronize actors',\n        type: 'error'\n      });\n    } finally {\n      setIsSyncing(false);\n    }\n  };\n\n  const getActorStatusColor = (active: boolean, connected?: boolean) => {\n    if (active && (connected === undefined || connected)) return 'bg-green-500';\n    if (active) return 'bg-yellow-500';\n    return 'bg-gray-400';\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Card className=\"p-4\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n              Two-Actor Synchronization\n            </h3>\n            <Button\n              size=\"sm\"\n              onClick={handleSync}\n              disabled={isSyncing}\n            >\n              {isSyncing ? 'Syncing...' : 'Sync Actors'}\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <ActorCard\n              title=\"Planning Actor\"\n              subtitle=\"SessionHub\"\n              active={actorStatus.planning.active}\n              currentTask={actorStatus.planning.currentTask}\n              statusColor={getActorStatusColor(actorStatus.planning.active)}\n              icon={\n                <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" />\n                </svg>\n              }\n            />\n\n            <ActorCard\n              title=\"Execution Actor\"\n              subtitle=\"Zed Agent Panel\"\n              active={actorStatus.execution.active}\n              currentTask={actorStatus.execution.currentTask}\n              statusColor={getActorStatusColor(\n                actorStatus.execution.active,\n                actorStatus.execution.agentPanelConnected\n              )}\n              icon={\n                <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4\" />\n                </svg>\n              }\n              progress={actorStatus.execution.progress}\n              warning={!actorStatus.execution.agentPanelConnected ? 'Agent panel not connected' : undefined}\n            />\n          </div>\n\n          <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-md p-3\">\n            <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n              <strong>How it works:</strong> Planning Actor in SessionHub generates strategies, \n              then sends instructions to Execution Actor running in Zed's agent panel for implementation.\n            </p>\n          </div>\n        </div>\n      </Card>\n\n      <Card className=\"p-4\">\n        <div className=\"space-y-3\">\n          <h4 className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n            Recent Instructions\n          </h4>\n          \n          {instructions.length === 0 ? (\n            <p className=\"text-sm text-gray-500 dark:text-gray-400 text-center py-4\">\n              No instructions sent yet\n            </p>\n          ) : (\n            <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n              {instructions.map((instruction) => (\n                <InstructionItem key={instruction.id} instruction={instruction} />\n              ))}\n            </div>\n          )}\n        </div>\n      </Card>\n    </div>\n  );\n};\n\ninterface ActorCardProps {\n  title: string;\n  subtitle: string;\n  active: boolean;\n  currentTask?: string;\n  statusColor: string;\n  icon: React.ReactNode;\n  progress?: number;\n  warning?: string;\n}\n\nconst ActorCard: React.FC<ActorCardProps> = ({\n  title,\n  subtitle,\n  active,\n  currentTask,\n  statusColor,\n  icon,\n  progress,\n  warning\n}) => (\n  <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4\">\n    <div className=\"flex items-start justify-between mb-3\">\n      <div className=\"flex items-center space-x-3\">\n        <div className=\"p-2 bg-white dark:bg-gray-700 rounded-lg shadow-sm\">\n          {icon}\n        </div>\n        <div>\n          <h4 className=\"font-medium text-gray-900 dark:text-white\">{title}</h4>\n          <p className=\"text-xs text-gray-600 dark:text-gray-400\">{subtitle}</p>\n        </div>\n      </div>\n      <div className={`w-3 h-3 rounded-full ${statusColor} ${active ? 'animate-pulse' : ''}`} />\n    </div>\n\n    {currentTask && (\n      <div className=\"mt-3 p-2 bg-white dark:bg-gray-700 rounded border border-gray-200 dark:border-gray-600\">\n        <p className=\"text-xs text-gray-700 dark:text-gray-300\">{currentTask}</p>\n      </div>\n    )}\n\n    {progress !== undefined && (\n      <div className=\"mt-2\">\n        <div className=\"flex items-center justify-between text-xs text-gray-600 dark:text-gray-400 mb-1\">\n          <span>Progress</span>\n          <span>{progress}%</span>\n        </div>\n        <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5\">\n          <div\n            className=\"bg-blue-500 h-1.5 rounded-full transition-all duration-300\"\n            style={{ width: `${progress}%` }}\n          />\n        </div>\n      </div>\n    )}\n\n    {warning && (\n      <div className=\"mt-2 flex items-center text-xs text-yellow-600 dark:text-yellow-400\">\n        <svg className=\"w-4 h-4 mr-1\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\n        </svg>\n        {warning}\n      </div>\n    )}\n  </div>\n);\n\nconst InstructionItem: React.FC<{ instruction: Instruction }> = ({ instruction }) => {\n  const getStatusIcon = () => {\n    switch (instruction.status) {\n      case 'completed':\n        return (\n          <svg className=\"w-4 h-4 text-green-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n          </svg>\n        );\n      case 'failed':\n        return (\n          <svg className=\"w-4 h-4 text-red-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n          </svg>\n        );\n      case 'sent':\n        return (\n          <svg className=\"w-4 h-4 text-blue-500 animate-spin\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n          </svg>\n        );\n      default:\n        return (\n          <svg className=\"w-4 h-4 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n          </svg>\n        );\n    }\n  };\n\n  return (\n    <div className=\"flex items-start space-x-2 p-2 bg-white dark:bg-gray-700 rounded border border-gray-200 dark:border-gray-600\">\n      {getStatusIcon()}\n      <div className=\"flex-1 min-w-0\">\n        <p className=\"text-xs text-gray-700 dark:text-gray-300 truncate\">\n          {instruction.content}\n        </p>\n        <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n          {instruction.type === 'planning' ? 'Planning → Execution' : 'Execution'} • \n          {new Date(instruction.timestamp).toLocaleTimeString()}\n        </p>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/mcp/MCPIntegrationBuilder.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/mcp/MCPIntegrationManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":20,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":20,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[874,874],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":21,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":21,"endColumn":25,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[898,898],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":81,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":85,"endColumn":12},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":82,"column":13,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":82,"endColumn":28},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":109,"column":16,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":109,"endColumn":39},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":141,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":141,"endColumn":48},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":145,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":145,"endColumn":47},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":221,"column":33,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":221,"endColumn":81},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":221,"column":64,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":221,"endColumn":79},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":240,"column":35,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":240,"endColumn":77}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * MCP Integration Manager\n * \n * Main interface for managing MCP integrations\n */\nimport React, { useState, useEffect } from 'react';\nimport { MCPIntegration } from '../../../src/services/mcp/server/types';\nimport { MCPIntegrationBuilder } from './MCPIntegrationBuilder';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\nexport const MCPIntegrationManager: React.FC = () => {\n  const [integrations, setIntegrations] = useState<MCPIntegration[]>([]);\n  const [showBuilder, setShowBuilder] = useState(false);\n  const [editingIntegration, setEditingIntegration] = useState<MCPIntegration | undefined>();\n  const [serverStatus, setServerStatus] = useState<'running' | 'stopped' | 'error'>('stopped');\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  // Load integrations\n  useEffect(() => {\n    loadIntegrations();\n    checkServerStatus();\n  }, []);\n  const loadIntegrations = async () => {\n    try {\n      const result = await window.electronAPI.mcp.listIntegrations();\n      setIntegrations(result);\n    } catch (error) {\n    } finally {\n      setLoading(false);\n    }\n  };\n  const checkServerStatus = async () => {\n    try {\n      const status = await window.electronAPI.mcp.getServerStatus();\n      setServerStatus(status.running ? 'running' : 'stopped');\n    } catch (error) {\n      setServerStatus('error');\n    }\n  };\n  const handleStartServer = async () => {\n    try {\n      await window.electronAPI.mcp.startServer();\n      setServerStatus('running');\n      await loadIntegrations();\n    } catch (error) {\n      setServerStatus('error');\n    }\n  };\n  const handleStopServer = async () => {\n    try {\n      await window.electronAPI.mcp.stopServer();\n      setServerStatus('stopped');\n    } catch (error) {\n    }\n  };\n  const handleSaveIntegration = async (integration: MCPIntegration) => {\n    try {\n      await window.electronAPI.mcp.registerIntegration(integration);\n      await loadIntegrations();\n      setShowBuilder(false);\n      setEditingIntegration(undefined);\n    } catch (error) {\n    }\n  };\n  const handleDeleteIntegration = async (id: string) => {\n    if (!confirm('Are you sure you want to delete this integration?')) {\n      return;\n    }\n    try {\n      await window.electronAPI.mcp.unregisterIntegration(id);\n      await loadIntegrations();\n    } catch (error) {\n    }\n  };\n  const handleTestIntegration = async (integration: MCPIntegration) => {\n    try {\n      // Test the first tool of the integration\n      if (integration.tools.length > 0) {\n        const tool = integration.tools[0];\n        if (tool) {\n          const result = await window.electronAPI.mcp.testTool(\n            integration.id!,\n            tool.name,\n            {}\n          );\n          alert(`Test successful!\\n\\nResult: ${JSON.stringify(result, null, 2)}`);\n        }\n      }\n    } catch (error) {\n      alert(`Test failed: ${(error as Error).message}`);\n    }\n  };\n  const filteredIntegrations = integrations.filter(integration =>\n    integration.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    integration.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    integration.author.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n  const categorizedIntegrations = filteredIntegrations.reduce((acc, integration) => {\n    const category = integration.category || 'other';\n    if (!acc[category]) {\n      acc[category] = [];\n    }\n    acc[category].push(integration);\n    return acc;\n  }, {} as Record<string, MCPIntegration[]>);\n  if (showBuilder) {\n    return (\n      <MCPIntegrationBuilder\n        onSave={handleSaveIntegration}\n        onCancel={() => {\n          setShowBuilder(false);\n          setEditingIntegration(undefined);\n        }}\n        existingIntegration={editingIntegration}\n      />\n    );\n  }\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">MCP Integrations</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">\n            Manage and create Model Context Protocol integrations\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          {/* Server Status */}\n          <div className=\"flex items-center space-x-2\">\n            <div className={`w-3 h-3 rounded-full ${\n              serverStatus === 'running' ? 'bg-green-500' :\n              serverStatus === 'stopped' ? 'bg-gray-400' :\n              'bg-red-500'\n            }`} />\n            <span className=\"text-sm font-medium\">\n              Server {serverStatus}\n            </span>\n          </div>\n          {serverStatus === 'stopped' ? (\n            <Button onClick={handleStartServer} size=\"sm\">\n              Start Server\n            </Button>\n          ) : serverStatus === 'running' ? (\n            <Button onClick={handleStopServer} size=\"sm\" variant=\"secondary\">\n              Stop Server\n            </Button>\n          ) : null}\n          <Button onClick={() => setShowBuilder(true)}>\n            Create Integration\n          </Button>\n        </div>\n      </div>\n      {/* Search */}\n      <div className=\"relative\">\n        <input\n          type=\"text\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          placeholder=\"Search integrations...\"\n          className=\"w-full px-4 py-2 pl-10 border rounded-lg\"\n        />\n        <svg\n          className=\"absolute left-3 top-2.5 w-5 h-5 text-gray-400\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n          />\n        </svg>\n      </div>\n      {/* Integrations */}\n      {loading ? (\n        <div className=\"text-center py-12\">\n          <div className=\"inline-flex items-center space-x-3\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\" />\n            <span>Loading integrations...</span>\n          </div>\n        </div>\n      ) : Object.keys(categorizedIntegrations).length === 0 ? (\n        <Card className=\"p-12 text-center\">\n          <h3 className=\"text-lg font-medium mb-2\">No integrations found</h3>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n            {searchTerm ? 'Try a different search term' : 'Get started by creating your first integration'}\n          </p>\n          {!searchTerm && (\n            <Button onClick={() => setShowBuilder(true)}>\n              Create Your First Integration\n            </Button>\n          )}\n        </Card>\n      ) : (\n        <div className=\"space-y-8\">\n          {Object.entries(categorizedIntegrations).map(([category, items]) => (\n            <div key={category}>\n              <h2 className=\"text-xl font-semibold mb-4 capitalize\">\n                {category.replace('_', ' ')}\n              </h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {items.map((integration) => (\n                  <Card\n                    key={integration.id}\n                    className=\"p-6 hover:shadow-lg transition-shadow\"\n                  >\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        {integration.icon && (\n                          <span className=\"text-2xl\">{integration.icon}</span>\n                        )}\n                        <div>\n                          <h3 className=\"font-semibold\">{integration.name}</h3>\n                          <p className=\"text-sm text-gray-500\">v{integration.version}</p>\n                        </div>\n                      </div>\n                      <button\n                        onClick={() => handleDeleteIntegration(integration.id!)}\n                        className=\"text-gray-400 hover:text-red-500\"\n                      >\n                        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                        </svg>\n                      </button>\n                    </div>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4 line-clamp-2\">\n                      {integration.description}\n                    </p>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n                        <span>{integration.tools.length} tools</span>\n                        <span>•</span>\n                        <span>by {integration.author}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <button\n                          onClick={() => handleTestIntegration(integration)}\n                          className=\"text-blue-500 hover:text-blue-600 text-sm font-medium\"\n                        >\n                          Test\n                        </button>\n                        <button\n                          onClick={() => {\n                            setEditingIntegration(integration);\n                            setShowBuilder(true);\n                          }}\n                          className=\"text-blue-500 hover:text-blue-600 text-sm font-medium\"\n                        >\n                          Edit\n                        </button>\n                      </div>\n                    </div>\n                    {/* Permissions */}\n                    {integration.permissions.length > 0 && (\n                      <div className=\"mt-3 pt-3 border-t\">\n                        <div className=\"flex flex-wrap gap-1\">\n                          {integration.permissions.map(perm => (\n                            <span\n                              key={perm}\n                              className=\"px-2 py-1 text-xs bg-gray-100 dark:bg-gray-800 rounded\"\n                            >\n                              {perm}\n                            </span>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </Card>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/mcp/MCPMarketplace.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":31,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":31,"endColumn":23,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1221,1221],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadMarketplace'. Either include it or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadMarketplace]","fix":{"range":[1245,1247],"text":"[loadMarketplace]"}}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":102,"column":23,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":102,"endColumn":67},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":119,"column":27,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":119,"endColumn":41},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":169,"column":49,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":169,"endColumn":83},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":213,"column":49,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":213,"endColumn":83},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":278,"column":33,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":278,"endColumn":67}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * MCP Integration Marketplace\n * \n * Browse and install community MCP integrations\n */\nimport React, { useState, useEffect } from 'react';\nimport { MCPIntegration } from '../../../src/services/mcp/server/types';\nimport { Card } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\ninterface MCPMarketplaceIntegration extends MCPIntegration {\n  stats: {\n    downloads: number;\n    rating: number;\n    reviews: number;\n  };\n  tags: string[];\n}\ninterface MCPMarketplaceProps {\n  onInstall?: (integration: MCPMarketplaceIntegration) => void;\n}\nexport const MCPMarketplace: React.FC<MCPMarketplaceProps> = ({ onInstall }) => {\n  const [integrations, setIntegrations] = useState<MCPMarketplaceIntegration[]>([]);\n  const [featured, setFeatured] = useState<MCPMarketplaceIntegration[]>([]);\n  const [trending, setTrending] = useState<MCPMarketplaceIntegration[]>([]);\n  const [categories, setCategories] = useState<string[]>([]);\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [installing, setInstalling] = useState<string | null>(null);\n  useEffect(() => {\n    loadMarketplace();\n  }, []);\n  const loadMarketplace = async () => {\n    try {\n      setLoading(true);\n      const [allIntegrations, featuredList, trendingList, categoryList] = await Promise.all([\n        window.electronAPI.mcp.marketplace.search({ category: selectedCategory }),\n        window.electronAPI.mcp.marketplace.getFeatured(),\n        window.electronAPI.mcp.marketplace.getTrending(),\n        window.electronAPI.mcp.marketplace.getCategories()\n      ]);\n      setIntegrations(allIntegrations);\n      setFeatured(featuredList);\n      setTrending(trendingList);\n      setCategories(categoryList);\n    } catch (error) {\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSearch = async () => {\n    try {\n      setLoading(true);\n      const results = await window.electronAPI.mcp.marketplace.search({\n        term: searchTerm,\n        category: selectedCategory === 'all' ? undefined : selectedCategory\n      });\n      setIntegrations(results);\n    } catch (error) {\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleInstall = async (integration: MCPMarketplaceIntegration) => {\n    if (!integration.id) {\n      alert('Invalid integration: missing ID');\n      return;\n    }\n    try {\n      setInstalling(integration.id);\n      await window.electronAPI.mcp.marketplace.install(integration.id);\n      alert(`Successfully installed ${integration.name}!`);\n      window.location.reload();\n    } catch (error) {\n      alert(`Failed to install: ${(error as Error).message}`);\n    } finally {\n      setInstalling(null);\n    }\n  };\n  const formatNumber = (num: number): string => {\n    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;\n    if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;\n    return num.toString();\n  };\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"space-y-6\">\n      {/* Search Bar */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 shadow-sm border border-gray-200 dark:border-gray-700\">\n        <div className=\"flex gap-4\">\n          <input\n            type=\"text\"\n            placeholder=\"Search integrations...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            onKeyDown={(e) => e.key === 'Enter' && handleSearch()}\n            className=\"flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg \n                     focus:ring-2 focus:ring-primary focus:border-transparent\n                     bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\n          />\n          <select\n            value={selectedCategory}\n            onChange={(e) => setSelectedCategory(e.target.value)}\n            className=\"px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg \n                     focus:ring-2 focus:ring-primary focus:border-transparent\n                     bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\n          >\n            <option value=\"all\">All Categories</option>\n            {categories.map(cat => (\n              <option key={cat} value={cat}>{cat}</option>\n            ))}\n          </select>\n          <Button onClick={handleSearch}>Search</Button>\n        </div>\n      </div>\n      {/* Featured Section */}\n      {featured.length > 0 && (\n        <div>\n          <h3 className=\"text-lg font-semibold mb-4\">Featured Integrations</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {featured.map(integration => (\n              <Card\n                key={integration.id}\n                className=\"hover:shadow-lg transition-shadow cursor-pointer\"\n                onClick={() => onInstall && onInstall(integration)}\n              >\n                <div className=\"p-4 space-y-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900 dark:text-gray-100\">\n                        {integration.name}\n                      </h4>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                        by {integration.author}\n                      </p>\n                    </div>\n                    <span className=\"px-2 py-1 bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200 \n                                   text-xs font-medium rounded-full\">\n                      Featured\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 line-clamp-2\">\n                    {integration.description}\n                  </p>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {integration.tags.slice(0, 3).map(tag => (\n                      <span\n                        key={tag}\n                        className=\"px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded text-xs text-gray-600 dark:text-gray-400\"\n                      >\n                        {tag}\n                      </span>\n                    ))}\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                      <span className=\"flex items-center gap-1\">\n                        ⭐ {integration.stats.rating.toFixed(1)}\n                      </span>\n                      <span>{formatNumber(integration.stats.downloads)} downloads</span>\n                    </div>\n                    <div onClick={(e) => e.stopPropagation()}>\n                      <Button size=\"sm\" onClick={() => handleInstall(integration)}>\n                        Install\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      )}\n      {/* Trending Section */}\n      {trending.length > 0 && (\n        <div>\n          <h3 className=\"text-lg font-semibold mb-4\">Trending Integrations</h3>\n          <div className=\"space-y-2\">\n            {trending.map(integration => (\n              <Card\n                key={integration.id}\n                className=\"hover:shadow-md transition-shadow cursor-pointer\"\n                onClick={() => onInstall && onInstall(integration)}\n              >\n                <div className=\"p-4 flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-3\">\n                      <h4 className=\"font-medium text-gray-900 dark:text-gray-100\">\n                        {integration.name}\n                      </h4>\n                      <span className=\"text-sm text-gray-500\">by {integration.author}</span>\n                    </div>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                      {integration.description}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"text-right\">\n                      <div className=\"text-sm font-medium\">\n                        ⭐ {integration.stats.rating.toFixed(1)}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        {formatNumber(integration.stats.downloads)} downloads\n                      </div>\n                    </div>\n                    <div onClick={(e) => e.stopPropagation()}>\n                      <Button size=\"sm\" onClick={() => handleInstall(integration)}>\n                        Install\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      )}\n      {/* All Integrations */}\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">\n          {selectedCategory === 'all' ? 'All Integrations' : `${selectedCategory} Integrations`}\n        </h3>\n        {integrations.length === 0 ? (\n          <Card className=\"p-8 text-center\">\n            <p className=\"text-gray-500 dark:text-gray-400\">\n              No integrations found. Try a different search or category.\n            </p>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {integrations.map(integration => (\n              <Card\n                key={integration.id}\n                className=\"hover:shadow-lg transition-shadow cursor-pointer\"\n                onClick={() => onInstall && onInstall(integration)}\n              >\n                <div className=\"p-4 space-y-3\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 dark:text-gray-100\">\n                      {integration.name}\n                    </h4>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                      by {integration.author}\n                    </p>\n                  </div>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 line-clamp-2\">\n                    {integration.description}\n                  </p>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {integration.tags.slice(0, 3).map(tag => (\n                      <span\n                        key={tag}\n                        className=\"px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded text-xs text-gray-600 dark:text-gray-400\"\n                      >\n                        {tag}\n                      </span>\n                    ))}\n                    {integration.tags.length > 3 && (\n                      <span className=\"px-2 py-1 text-xs text-gray-500\">\n                        +{integration.tags.length - 3}\n                      </span>\n                    )}\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                      <span>⭐ {integration.stats.rating.toFixed(1)}</span>\n                      <span>{formatNumber(integration.stats.downloads)} downloads</span>\n                    </div>\n                    <div onClick={(e) => e.stopPropagation()}>\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleInstall(integration)}\n                        disabled={installing === integration.id}\n                      >\n                        {installing === integration.id ? 'Installing...' : 'Install'}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\nexport { MCPMarketplace as MCPMarketplaceUI };","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/sessions/SessionAnalyticsDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":20,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":20,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[743,743],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAnalytics'. Either include it or remove the dependency array.","line":21,"column":6,"nodeType":"ArrayExpression","endLine":21,"endColumn":52,"suggestions":[{"desc":"Update the dependencies array to be: [userId, projectId, selectedPeriod, dateRange, loadAnalytics]","fix":{"range":[765,811],"text":"[userId, projectId, selectedPeriod, dateRange, loadAnalytics]"}}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":26,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":30,"endColumn":9}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { SessionAnalytics } from '@/src/services/SessionService';\nimport { SessionStatus } from '@/src/models/Session';\nimport { Card } from '../ui/Card';\nimport { Button } from '../ui/Button';\ninterface SessionAnalyticsDashboardProps {\n  userId?: string;\n  projectId?: string;\n  dateRange?: { from: Date; to: Date };\n}\nexport const SessionAnalyticsDashboard: React.FC<SessionAnalyticsDashboardProps> = ({\n  userId,\n  projectId,\n  dateRange\n}) => {\n  const [analytics, setAnalytics] = useState<SessionAnalytics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedPeriod, setSelectedPeriod] = useState<'7d' | '30d' | '90d' | 'all'>('30d');\n  useEffect(() => {\n    loadAnalytics();\n  }, [userId, projectId, selectedPeriod, dateRange]);\n  const loadAnalytics = async () => {\n    setLoading(true);\n    try {\n      const period = getPeriodDateRange(selectedPeriod);\n      const result = await window.electron.invoke('session:analytics', {\n        userId,\n        projectId,\n        dateRange: dateRange || period\n      });\n      setAnalytics(result);\n    } catch (error) {\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getPeriodDateRange = (period: string) => {\n    const to = new Date();\n    const from = new Date();\n    switch (period) {\n      case '7d':\n        from.setDate(from.getDate() - 7);\n        break;\n      case '30d':\n        from.setDate(from.getDate() - 30);\n        break;\n      case '90d':\n        from.setDate(from.getDate() - 90);\n        break;\n      case 'all':\n        from.setFullYear(from.getFullYear() - 10);\n        break;\n    }\n    return { from, to };\n  };\n  const getStatusColor = (status: SessionStatus) => {\n    switch (status) {\n      case 'completed': return '#10b981';\n      case 'failed': return '#ef4444';\n      case 'pending': return '#6b7280';\n      case 'planning': return '#3b82f6';\n      case 'executing': return '#8b5cf6';\n      case 'cancelled': return '#f59e0b';\n      default: return '#6b7280';\n    }\n  };\n  const formatDuration = (ms: number) => {\n    const minutes = Math.floor(ms / 1000 / 60);\n    if (minutes < 60) return `${minutes}m`;\n    const hours = Math.floor(minutes / 60);\n    return `${hours}h ${minutes % 60}m`;\n  };\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n  if (!analytics) {\n    return (\n      <Card className=\"p-6\">\n        <p className=\"text-gray-500 dark:text-gray-400\">No analytics data available.</p>\n      </Card>\n    );\n  }\n  // Calculate max value for bar chart scaling\n  const maxDailyCount = Math.max(...analytics.sessionsByDay.map(d => d.count), 1);\n  return (\n    <div className=\"space-y-6\">\n      {/* Period selector */}\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">\n          Session Analytics\n        </h2>\n        <div className=\"flex gap-2\">\n          {(['7d', '30d', '90d', 'all'] as const).map(period => (\n            <Button\n              key={period}\n              variant={selectedPeriod === period ? 'primary' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setSelectedPeriod(period)}\n            >\n              {period === 'all' ? 'All Time' : `Last ${period}`}\n            </Button>\n          ))}\n        </div>\n      </div>\n      {/* Key metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"p-4\">\n          <div className=\"space-y-2\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">Total Sessions</p>\n            <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n              {analytics.totalSessions}\n            </p>\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"space-y-2\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">Success Rate</p>\n            <p className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n              {analytics.successRate.toFixed(1)}%\n            </p>\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"space-y-2\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">Avg Duration</p>\n            <p className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">\n              {formatDuration(analytics.averageDuration)}\n            </p>\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"space-y-2\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">Active Now</p>\n            <p className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n              {analytics.sessionsByStatus.executing || 0}\n            </p>\n          </div>\n        </Card>\n      </div>\n      {/* Charts row */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Sessions by status */}\n        <Card className=\"p-6\">\n          <h3 className=\"text-lg font-semibold mb-4 text-gray-900 dark:text-gray-100\">\n            Sessions by Status\n          </h3>\n          <div className=\"space-y-3\">\n            {Object.entries(analytics.sessionsByStatus)\n              .sort(([, a], [, b]) => b - a)\n              .map(([status, count]) => (\n                <div key={status} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div\n                      className=\"w-3 h-3 rounded-full\"\n                      style={{ backgroundColor: getStatusColor(status as SessionStatus) }}\n                    />\n                    <span className=\"text-sm capitalize text-gray-700 dark:text-gray-300\">\n                      {status}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-32 bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                      <div\n                        className=\"h-2 rounded-full transition-all\"\n                        style={{\n                          width: `${(count / analytics.totalSessions) * 100}%`,\n                          backgroundColor: getStatusColor(status as SessionStatus)\n                        }}\n                      />\n                    </div>\n                    <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100 w-10 text-right\">\n                      {count}\n                    </span>\n                  </div>\n                </div>\n              ))}\n          </div>\n        </Card>\n        {/* Performance metrics */}\n        <Card className=\"p-6\">\n          <h3 className=\"text-lg font-semibold mb-4 text-gray-900 dark:text-gray-100\">\n            Performance Metrics\n          </h3>\n          <div className=\"space-y-4\">\n            <div>\n              <div className=\"flex justify-between mb-1\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Planning Time\n                </span>\n                <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                  {formatDuration(analytics.performanceMetrics.avgPlanningTime)}\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                <div\n                  className=\"bg-blue-500 h-2 rounded-full\"\n                  style={{\n                    width: `${(analytics.performanceMetrics.avgPlanningTime / analytics.performanceMetrics.avgTotalTime) * 100}%`\n                  }}\n                />\n              </div>\n            </div>\n            <div>\n              <div className=\"flex justify-between mb-1\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Execution Time\n                </span>\n                <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                  {formatDuration(analytics.performanceMetrics.avgExecutionTime)}\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                <div\n                  className=\"bg-purple-500 h-2 rounded-full\"\n                  style={{\n                    width: `${(analytics.performanceMetrics.avgExecutionTime / analytics.performanceMetrics.avgTotalTime) * 100}%`\n                  }}\n                />\n              </div>\n            </div>\n            <div className=\"pt-2 border-t border-gray-200 dark:border-gray-700\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                  Total Average Time\n                </span>\n                <span className=\"text-sm font-bold text-gray-900 dark:text-gray-100\">\n                  {formatDuration(analytics.performanceMetrics.avgTotalTime)}\n                </span>\n              </div>\n            </div>\n          </div>\n        </Card>\n      </div>\n      {/* Sessions over time */}\n      <Card className=\"p-6\">\n        <h3 className=\"text-lg font-semibold mb-4 text-gray-900 dark:text-gray-100\">\n          Sessions Over Time\n        </h3>\n        <div className=\"h-64 flex items-end justify-between gap-1\">\n          {analytics.sessionsByDay.map((day) => (\n            <div\n              key={day.date}\n              className=\"flex-1 flex flex-col items-center justify-end group\"\n            >\n              <div className=\"relative w-full\">\n                <div\n                  className=\"w-full bg-blue-500 rounded-t transition-all group-hover:bg-blue-600\"\n                  style={{\n                    height: `${(day.count / maxDailyCount) * 200}px`,\n                    minHeight: day.count > 0 ? '4px' : '0'\n                  }}\n                />\n                <div className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity\">\n                  <div className=\"bg-gray-800 text-white text-xs rounded px-2 py-1 whitespace-nowrap\">\n                    {day.count} sessions\n                  </div>\n                </div>\n              </div>\n              <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-2 rotate-45 origin-left\">\n                {new Date(day.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n              </div>\n            </div>\n          ))}\n        </div>\n      </Card>\n      {/* Common errors */}\n      {analytics.commonErrors.length > 0 && (\n        <Card className=\"p-6\">\n          <h3 className=\"text-lg font-semibold mb-4 text-gray-900 dark:text-gray-100\">\n            Common Errors\n          </h3>\n          <div className=\"space-y-2\">\n            {analytics.commonErrors.slice(0, 5).map((error, index) => (\n              <div\n                key={index}\n                className=\"flex items-center justify-between p-3 bg-red-50 dark:bg-red-900/20 rounded-lg\"\n              >\n                <span className=\"text-sm text-red-700 dark:text-red-300 flex-1 mr-4\">\n                  {error.error}\n                </span>\n                <span className=\"text-sm font-medium text-red-600 dark:text-red-400\">\n                  {error.count} occurrence{error.count !== 1 ? 's' : ''}\n                </span>\n              </div>\n            ))}\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/sessions/SessionLibrary.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":28,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":28,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1090,1090],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSessions'. Either include it or remove the dependency array.","line":29,"column":6,"nodeType":"ArrayExpression","endLine":29,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [userId, projectId, loadSessions]","fix":{"range":[1111,1130],"text":"[userId, projectId, loadSessions]"}}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":42,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":42,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":117,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":117,"endColumn":83},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":147,"column":25,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":147,"endColumn":69},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":240,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":240,"endColumn":35},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":304,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":304,"endColumn":68},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":311,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":311,"endColumn":68},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":356,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":356,"endColumn":68},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":363,"column":29,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":363,"endColumn":68}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useMemo } from 'react';\nimport { SessionFilter } from '@/src/services/SessionService';\nimport { Session, SessionStatus } from '@/src/models/Session';\nimport { Card } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { formatDistanceToNow } from 'date-fns';\ninterface SessionLibraryProps {\n  userId: string;\n  projectId?: string;\n  onSessionSelect?: (session: Session) => void;\n  onSessionCreate?: () => void;\n}\nexport const SessionLibrary: React.FC<SessionLibraryProps> = ({\n  userId,\n  projectId,\n  onSessionSelect,\n  onSessionCreate\n}) => {\n  const [sessions, setSessions] = useState<Session[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState<SessionStatus[]>([]);\n  const [dateRange] = useState<{ from?: Date; to?: Date }>({});\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  const [view, setView] = useState<'grid' | 'list'>('grid');\n  // Load sessions on mount\n  useEffect(() => {\n    loadSessions();\n  }, [userId, projectId]);\n  const loadSessions = async () => {\n    setLoading(true);\n    try {\n      const filter: SessionFilter = {\n        userId,\n        projectId,\n        status: statusFilter.length > 0 ? statusFilter : undefined,\n        searchTerm: searchTerm || undefined,\n        tags: selectedTags.length > 0 ? selectedTags : undefined,\n        dateFrom: dateRange.from,\n        dateTo: dateRange.to\n      };\n      const result = await window.electron.invoke('session:search', filter);\n      setSessions(result);\n    } catch (error) {\n    } finally {\n      setLoading(false);\n    }\n  };\n  // Filter sessions based on search criteria\n  const filteredSessions = useMemo(() => {\n    return sessions.filter(session => {\n      // Text search\n      if (searchTerm) {\n        const term = searchTerm.toLowerCase();\n        if (\n          !session.name.toLowerCase().includes(term) &&\n          !session.description.toLowerCase().includes(term) &&\n          !session.request.content.toLowerCase().includes(term)\n        ) {\n          return false;\n        }\n      }\n      // Status filter\n      if (statusFilter.length > 0 && !statusFilter.includes(session.status)) {\n        return false;\n      }\n      // Tag filter\n      if (selectedTags.length > 0) {\n        const sessionTags = session.metadata.tags || [];\n        if (!selectedTags.some(tag => sessionTags.includes(tag))) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }, [sessions, searchTerm, statusFilter, selectedTags]);\n  // Extract all unique tags from sessions\n  const allTags = useMemo(() => {\n    const tagSet = new Set<string>();\n    sessions.forEach(session => {\n      session.metadata.tags?.forEach((tag: string) => tagSet.add(tag));\n    });\n    return Array.from(tagSet).sort();\n  }, [sessions]);\n  const getStatusColor = (status: SessionStatus) => {\n    switch (status) {\n      case 'completed': return 'text-green-600 bg-green-50';\n      case 'failed': return 'text-red-600 bg-red-50';\n      case 'pending': return 'text-gray-600 bg-gray-50';\n      case 'planning': return 'text-blue-600 bg-blue-50';\n      case 'executing': return 'text-purple-600 bg-purple-50';\n      case 'cancelled': return 'text-yellow-600 bg-yellow-50';\n      default: return 'text-gray-600 bg-gray-50';\n    }\n  };\n  const getStatusIcon = (status: SessionStatus) => {\n    switch (status) {\n      case 'completed': return '✓';\n      case 'failed': return '✗';\n      case 'pending': return '⏳';\n      case 'planning': return '🧠';\n      case 'executing': return '⚡';\n      case 'cancelled': return '⚠️';\n      default: return '•';\n    }\n  };\n  const handleDeleteSession = async (sessionId: string) => {\n    if (!confirm('Are you sure you want to delete this session?')) return;\n    try {\n      await window.electron.invoke('session:delete', sessionId);\n      await loadSessions();\n    } catch (error) {\n    }\n  };\n  const handleExportSession = async (sessionId: string) => {\n    try {\n      const exportData = await window.electron.invoke('session:export', sessionId);\n      const blob = new Blob([exportData], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `session-${sessionId}.json`;\n      a.click();\n      URL.revokeObjectURL(url);\n    } catch (error) {\n    }\n  };\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"space-y-4\">\n      {/* Search and Filters */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 shadow-sm border border-gray-200 dark:border-gray-700\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {/* Search input */}\n          <div className=\"lg:col-span-2\">\n            <input\n              type=\"text\"\n              placeholder=\"Search sessions...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              onKeyDown={(e) => e.key === 'Enter' && loadSessions()}\n              className=\"w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg \n                       focus:ring-2 focus:ring-primary focus:border-transparent\n                       bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\n            />\n          </div>\n          {/* View toggle */}\n          <div className=\"flex gap-2\">\n            <Button\n              variant={view === 'grid' ? 'primary' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setView('grid')}\n            >\n              Grid\n            </Button>\n            <Button\n              variant={view === 'list' ? 'primary' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setView('list')}\n            >\n              List\n            </Button>\n            <Button\n              variant=\"primary\"\n              size=\"sm\"\n              onClick={onSessionCreate}\n              className=\"ml-auto\"\n            >\n              New Session\n            </Button>\n          </div>\n        </div>\n        {/* Status filters */}\n        <div className=\"mt-4\">\n          <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n            Filter by status:\n          </div>\n          <div className=\"flex flex-wrap gap-2\">\n            {(['pending', 'planning', 'executing', 'completed', 'failed', 'cancelled'] as SessionStatus[])\n              .map(status => (\n                <button\n                  key={status}\n                  onClick={() => {\n                    setStatusFilter(prev =>\n                      prev.includes(status)\n                        ? prev.filter(s => s !== status)\n                        : [...prev, status]\n                    );\n                  }}\n                  className={`px-3 py-1 rounded-full text-xs font-medium transition-colors ${\n                    statusFilter.includes(status)\n                      ? getStatusColor(status)\n                      : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400'\n                  }`}\n                >\n                  {getStatusIcon(status)} {status}\n                </button>\n              ))}\n          </div>\n        </div>\n        {/* Tag filters */}\n        {allTags.length > 0 && (\n          <div className=\"mt-4\">\n            <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              Filter by tags:\n            </div>\n            <div className=\"flex flex-wrap gap-2\">\n              {allTags.map((tag: string) => (\n                <button\n                  key={tag}\n                  onClick={() => {\n                    setSelectedTags(prev =>\n                      prev.includes(tag)\n                        ? prev.filter(t => t !== tag)\n                        : [...prev, tag]\n                    );\n                  }}\n                  className={`px-3 py-1 rounded-full text-xs font-medium transition-colors ${\n                    selectedTags.includes(tag)\n                      ? 'bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400'\n                      : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400'\n                  }`}\n                >\n                  {tag}\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n        <div className=\"mt-4 flex justify-end\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={loadSessions}\n          >\n            Search\n          </Button>\n        </div>\n      </div>\n      {/* Results count */}\n      <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n        Found {filteredSessions.length} session{filteredSessions.length !== 1 ? 's' : ''}\n      </div>\n      {/* Session list/grid */}\n      {filteredSessions.length === 0 ? (\n        <Card className=\"p-8 text-center\">\n          <p className=\"text-gray-500 dark:text-gray-400\">\n            No sessions found matching your criteria.\n          </p>\n        </Card>\n      ) : view === 'grid' ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {filteredSessions.map(session => (\n            <Card\n              key={session.id}\n              className=\"hover:shadow-lg transition-shadow cursor-pointer\"\n              onClick={() => onSessionSelect && onSessionSelect(session)}\n            >\n              <div className=\"p-4 space-y-3\">\n                <div className=\"flex items-start justify-between\">\n                  <h3 className=\"font-medium text-gray-900 dark:text-gray-100 line-clamp-1\">\n                    {session.name}\n                  </h3>\n                  <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(session.status)}`}>\n                    {getStatusIcon(session.status)} {session.status}\n                  </span>\n                </div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 line-clamp-2\">\n                  {session.description}\n                </p>\n                <div className=\"flex items-center justify-between text-xs text-gray-500 dark:text-gray-500\">\n                  <span>{formatDistanceToNow(new Date(session.createdAt))} ago</span>\n                  {session.metadata.totalDuration && (\n                    <span>{Math.round(session.metadata.totalDuration / 1000 / 60)}m</span>\n                  )}\n                </div>\n                {session.metadata.tags && session.metadata.tags.length > 0 && (\n                  <div className=\"flex flex-wrap gap-1\">\n                    {session.metadata.tags.slice(0, 3).map((tag: string) => (\n                      <span\n                        key={tag}\n                        className=\"px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded text-xs text-gray-600 dark:text-gray-400\"\n                      >\n                        {tag}\n                      </span>\n                    ))}\n                    {session.metadata.tags.length > 3 && (\n                      <span className=\"px-2 py-1 text-xs text-gray-500\">\n                        +{session.metadata.tags.length - 3}\n                      </span>\n                    )}\n                  </div>\n                )}\n                <div className=\"flex gap-2 mt-3\" onClick={(e) => e.stopPropagation()}>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleExportSession(session.id)}\n                  >\n                    Export\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleDeleteSession(session.id)}\n                    className=\"text-red-600 hover:bg-red-50\"\n                  >\n                    Delete\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"space-y-2\">\n          {filteredSessions.map(session => (\n            <Card\n              key={session.id}\n              className=\"hover:shadow-md transition-shadow cursor-pointer\"\n              onClick={() => onSessionSelect && onSessionSelect(session)}\n            >\n              <div className=\"p-4 flex items-center justify-between\">\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center gap-3\">\n                    <h3 className=\"font-medium text-gray-900 dark:text-gray-100 truncate\">\n                      {session.name}\n                    </h3>\n                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(session.status)}`}>\n                      {getStatusIcon(session.status)} {session.status}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1 truncate\">\n                    {session.description}\n                  </p>\n                  <div className=\"flex items-center gap-4 mt-2 text-xs text-gray-500\">\n                    <span>{formatDistanceToNow(new Date(session.createdAt))} ago</span>\n                    {session.metadata.totalDuration && (\n                      <span>{Math.round(session.metadata.totalDuration / 1000 / 60)}m</span>\n                    )}\n                    {session.metadata.tags && session.metadata.tags.length > 0 && (\n                      <span>{session.metadata.tags.length} tags</span>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex gap-2 ml-4\" onClick={(e) => e.stopPropagation()}>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleExportSession(session.id)}\n                  >\n                    Export\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleDeleteSession(session.id)}\n                    className=\"text-red-600 hover:bg-red-50\"\n                  >\n                    Delete\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/sessions/SessionWorkflowVisualization.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/ui/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/components/ui/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/hooks/useAIEnhancement.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[614,617],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[614,617],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[633,636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[633,636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":26,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":26,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[750,750],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'initializeAI'. Either include it or remove the dependency array.","line":27,"column":6,"nodeType":"ArrayExpression","endLine":27,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [initializeAI]","fix":{"range":[771,773],"text":"[initializeAI]"}}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":32,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":32,"endColumn":93},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[944,947],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[944,947],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1379,1382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1379,1382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":49,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":49,"endColumn":93},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1518,1521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1518,1521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'initializeAI'. Either include it or remove the dependency array.","line":54,"column":6,"nodeType":"ArrayExpression","endLine":54,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [initializeAI, isInitialized]","fix":{"range":[1612,1627],"text":"[initializeAI, isInitialized]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1922,1925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1922,1925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2281,2284],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2281,2284],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":86,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":86,"endColumn":108},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2637,2640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2637,2640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'initializeAI'. Either include it or remove the dependency array.","line":93,"column":6,"nodeType":"ArrayExpression","endLine":93,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [initializeAI, isInitialized]","fix":{"range":[2783,2798],"text":"[initializeAI, isInitialized]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3011,3014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3011,3014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3173,3176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3173,3176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3283,3286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3283,3286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3559,3562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3559,3562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":114,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":114,"endColumn":93},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3701,3704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3701,3704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4041,4044],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4041,4044],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":135,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":135,"endColumn":102},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4400,4403],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4400,4403],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":137,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":137,"endColumn":93},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":137,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4526,4529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4526,4529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":148,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4859,4862],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4859,4862],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":159,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5228,5231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5228,5231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5549,5552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5549,5552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":176,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5817,5820],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5817,5820],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":187,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6130,6133],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6130,6133],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":197,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6419,6422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6419,6422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":199,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":199,"endColumn":93},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":199,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6542,6545],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6542,6545],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":210,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6845,6848],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6845,6848],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":212,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":212,"endColumn":93},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":212,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6963,6966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6963,6966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":34,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Hook for AI Enhancement features\n * Session 2.8 Implementation\n */\nimport { useState, useEffect, useCallback } from 'react';\nimport type {\n  AutocompleteSuggestion,\n  AutocompleteContext,\n  LearningStatus,\n  PatternSearchCriteria,\n  CodePattern\n} from '../../src/services/ai';\nexport function useAIEnhancement() {\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [status, setStatus] = useState<LearningStatus | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Type guard for AI API\n  const hasAIAPI = (api: any): api is { ai: any } => {\n    return api && typeof api.ai === 'object';\n  };\n  \n  // Initialize AI on mount\n  useEffect(() => {\n    initializeAI();\n  }, []);\n  const initializeAI = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const aiStatus = await (hasAIAPI(window.api) ? window.api.ai : {} as any).initialize();\n      setStatus(aiStatus);\n      setIsInitialized(true);\n    } catch (err) {\n      setError('Failed to initialize AI enhancement');\n    } finally {\n      setLoading(false);\n    }\n  };\n  // Learn from code\n  const learnFromCode = useCallback(async (filePath: string, content: string) => {\n    if (!isInitialized) {\n      await initializeAI();\n    }\n    try {\n      await (hasAIAPI(window.api) ? window.api.ai : {} as any).learnFromCode(filePath, content);\n      // Refresh status\n      const newStatus = await (hasAIAPI(window.api) ? window.api.ai : {} as any).getStatus();\n      setStatus(newStatus);\n    } catch (err) {\n      throw err;\n    }\n  }, [isInitialized]);\n  // Get autocomplete suggestions\n  const getAutocompleteSuggestions = useCallback(async (\n    context: AutocompleteContext\n  ): Promise<AutocompleteSuggestion[]> => {\n    if (!isInitialized) {\n      return [];\n    }\n    try {\n      return await (hasAIAPI(window.api) ? window.api.ai : {} as any).getAutocomplete(context) || [];\n    } catch (err) {\n      return [];\n    }\n  }, [isInitialized]);\n  // Record autocomplete usage\n  const recordAutocompleteUsage = useCallback(async (\n    suggestion: AutocompleteSuggestion,\n    accepted: boolean\n  ) => {\n    if (!isInitialized) return;\n    try {\n      await (hasAIAPI(window.api) ? window.api.ai : {} as any).recordAutocomplete(suggestion, accepted);\n    } catch (err) {\n    }\n  }, [isInitialized]);\n  // Analyze project\n  const analyzeProject = useCallback(async (projectPath: string) => {\n    if (!isInitialized) {\n      await initializeAI();\n    }\n    try {\n      setLoading(true);\n      const analysis = await (hasAIAPI(window.api) ? window.api.ai : {} as any).analyzeProject(projectPath);\n      return analysis;\n    } catch (err) {\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [isInitialized]);\n  // Session tracking\n  const startSession = useCallback(async (sessionId: string, objectives: string[]) => {\n    if (!isInitialized) return;\n    try {\n      await (hasAIAPI(window.api) ? window.api.ai : {} as any).startSession(sessionId, objectives);\n    } catch (err) {\n    }\n  }, [isInitialized]);\n  const updateSession = useCallback(async (sessionId: string, updates: any) => {\n    if (!isInitialized) return;\n    try {\n      await (hasAIAPI(window.api) ? window.api.ai : {} as any).updateSession(sessionId, updates);\n    } catch (err) {\n    }\n  }, [isInitialized]);\n  const completeSession = useCallback(async (sessionId: string, success: boolean) => {\n    if (!isInitialized) return;\n    try {\n      await (hasAIAPI(window.api) ? window.api.ai : {} as any).completeSession(sessionId, success);\n      // Refresh status\n      const newStatus = await (hasAIAPI(window.api) ? window.api.ai : {} as any).getStatus();\n      setStatus(newStatus);\n    } catch (err) {\n    }\n  }, [isInitialized]);\n  // Pattern library\n  const searchPatterns = useCallback(async (\n    criteria: PatternSearchCriteria\n  ): Promise<CodePattern[]> => {\n    if (!isInitialized) return [];\n    try {\n      return await (hasAIAPI(window.api) ? window.api.ai : {} as any).searchPatterns(criteria) || [];\n    } catch (err) {\n      return [];\n    }\n  }, [isInitialized]);\n  const addPattern = useCallback(async (pattern: Omit<CodePattern, 'id' | 'metadata'>) => {\n    if (!isInitialized) {\n      throw new Error('AI not initialized');\n    }\n    try {\n      const newPattern = await (hasAIAPI(window.api) ? window.api.ai : {} as any).addPattern(pattern);\n      // Refresh status\n      const newStatus = await (hasAIAPI(window.api) ? window.api.ai : {} as any).getStatus();\n      setStatus(newStatus);\n      return newPattern;\n    } catch (err) {\n      throw err;\n    }\n  }, [isInitialized]);\n  // Get insights\n  const getInsights = useCallback(async (projectPath?: string) => {\n    if (!isInitialized) return [];\n    try {\n      return await (hasAIAPI(window.api) ? window.api.ai : {} as any).getInsights(projectPath) || [];\n    } catch (err) {\n      return [];\n    }\n  }, [isInitialized]);\n  // Transfer learning\n  const transferLearning = useCallback(async (fromProject: string, toProject: string) => {\n    if (!isInitialized) {\n      throw new Error('AI not initialized');\n    }\n    try {\n      return await (hasAIAPI(window.api) ? window.api.ai : {} as any).transferLearning(fromProject, toProject);\n    } catch (err) {\n      throw err;\n    }\n  }, [isInitialized]);\n  // Metrics and reports\n  const getMetricsSummary = useCallback(async (days: number = 30) => {\n    if (!isInitialized) return null;\n    try {\n      return await (hasAIAPI(window.api) ? window.api.ai : {} as any).getMetricsSummary(days);\n    } catch (err) {\n      return null;\n    }\n  }, [isInitialized]);\n  const generateInsightReport = useCallback(async () => {\n    if (!isInitialized) return null;\n    try {\n      return await (hasAIAPI(window.api) ? window.api.ai : {} as any).generateInsights();\n    } catch (err) {\n      return null;\n    }\n  }, [isInitialized]);\n  // Data management\n  const exportData = useCallback(async () => {\n    if (!isInitialized) {\n      throw new Error('AI not initialized');\n    }\n    try {\n      return await (hasAIAPI(window.api) ? window.api.ai : {} as any).exportData();\n    } catch (err) {\n      throw err;\n    }\n  }, [isInitialized]);\n  const importData = useCallback(async (data: string) => {\n    if (!isInitialized) {\n      throw new Error('AI not initialized');\n    }\n    try {\n      await (hasAIAPI(window.api) ? window.api.ai : {} as any).importData(data);\n      // Refresh status\n      const newStatus = await (hasAIAPI(window.api) ? window.api.ai : {} as any).getStatus();\n      setStatus(newStatus);\n    } catch (err) {\n      throw err;\n    }\n  }, [isInitialized]);\n  const clearData = useCallback(async () => {\n    if (!isInitialized) {\n      throw new Error('AI not initialized');\n    }\n    try {\n      await (hasAIAPI(window.api) ? window.api.ai : {} as any).clearData();\n      // Refresh status\n      const newStatus = await (hasAIAPI(window.api) ? window.api.ai : {} as any).getStatus();\n      setStatus(newStatus);\n    } catch (err) {\n      throw err;\n    }\n  }, [isInitialized]);\n  return {\n    // State\n    isInitialized,\n    status,\n    loading,\n    error,\n    // Methods\n    initializeAI,\n    learnFromCode,\n    getAutocompleteSuggestions,\n    recordAutocompleteUsage,\n    analyzeProject,\n    startSession,\n    updateSession,\n    completeSession,\n    searchPatterns,\n    addPattern,\n    getInsights,\n    transferLearning,\n    getMetricsSummary,\n    generateInsightReport,\n    exportData,\n    importData,\n    clearData\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/hooks/useSessionPipeline.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[166,169],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[166,169],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[184,187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[184,187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[206,209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[206,209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[372,375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[372,375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[529,532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[529,532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[660,663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[660,663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":61,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":61,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":80,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":80,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":96,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":96,"endColumn":71},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2865,2868],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2865,2868],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":112,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":112,"endColumn":80},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3294,3297],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3294,3297],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":128,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":128,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":144,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":144,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":160,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":160,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":176,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":176,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":192,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":192,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":207,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":207,"endColumn":68}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useEffect } from 'react';\n\ninterface SessionDocument {\n  source: { type: 'file' | 'url' | 'google-docs'; path: string };\n  metadata?: any;\n  analysis?: any;\n  importResult?: any;\n}\n\ninterface SessionExecutionRequest {\n  userId: string;\n  projectId: string;\n  description: string;\n  documents?: SessionDocument[];\n  context?: Record<string, any>;\n}\n\ninterface SessionProgress {\n  phase: string;\n  step: string;\n  progress: number;\n  message: string;\n  timestamp: string;\n  details?: Record<string, any>;\n}\n\ninterface Session {\n  id: string;\n  name: string;\n  status: string;\n  documents?: SessionDocument[];\n  documentAnalysis?: any;\n  progress?: SessionProgress[];\n}\n\nexport function useSessionPipeline() {\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [currentSession, setCurrentSession] = useState<Session | null>(null);\n  const [progress, setProgress] = useState<SessionProgress[]>([]);\n  const [error, setError] = useState<string | null>(null);\n\n  // Listen for progress updates\n  useEffect(() => {\n    const handleProgress = (data: { sessionId: string; progress: SessionProgress }) => {\n      setProgress(prev => [...prev, data.progress]);\n    };\n\n    window.electronAPI.onSessionProgress(handleProgress);\n\n    return () => {\n      window.electronAPI.removeSessionProgressListener(handleProgress);\n    };\n  }, []);\n\n  const executeSession = useCallback(async (request: SessionExecutionRequest) => {\n    setIsExecuting(true);\n    setError(null);\n    setProgress([]);\n\n    try {\n      const result = await window.electronAPI.executeSession(request);\n      \n      if (result.success) {\n        setCurrentSession(result.session);\n        return result.session;\n      } else {\n        setError(result.error || 'Session execution failed');\n        return null;\n      }\n    } catch (err) {\n      setError((err as Error).message);\n      return null;\n    } finally {\n      setIsExecuting(false);\n    }\n  }, []);\n\n  const importDocuments = useCallback(async (filePaths: string[]) => {\n    try {\n      const result = await window.electronAPI.importDocuments(filePaths);\n      \n      if (result.success) {\n        return result.results;\n      } else {\n        setError(result.error || 'Document import failed');\n        return null;\n      }\n    } catch (err) {\n      setError((err as Error).message);\n      return null;\n    }\n  }, []);\n\n  const importFromGoogleDocs = useCallback(async (docUrl: string) => {\n    try {\n      const result = await window.electronAPI.importGoogleDocs(docUrl);\n      \n      if (result.success) {\n        return result.result;\n      } else {\n        setError(result.error || 'Google Docs import failed');\n        return null;\n      }\n    } catch (err) {\n      setError((err as Error).message);\n      return null;\n    }\n  }, []);\n\n  const analyzeDocument = useCallback(async (documentMetadata: any) => {\n    try {\n      const result = await window.electronAPI.analyzeDocument(documentMetadata);\n      \n      if (result.success) {\n        return result.analysis;\n      } else {\n        setError(result.error || 'Document analysis failed');\n        return null;\n      }\n    } catch (err) {\n      setError((err as Error).message);\n      return null;\n    }\n  }, []);\n\n  const analyzeDocumentSet = useCallback(async (documents: any[]) => {\n    try {\n      const result = await window.electronAPI.analyzeDocumentSet(documents);\n      \n      if (result.success) {\n        return result.analysis;\n      } else {\n        setError(result.error || 'Document set analysis failed');\n        return null;\n      }\n    } catch (err) {\n      setError((err as Error).message);\n      return null;\n    }\n  }, []);\n\n  const getSession = useCallback(async (sessionId: string) => {\n    try {\n      const result = await window.electronAPI.getSession(sessionId);\n      \n      if (result.success) {\n        return result.session;\n      } else {\n        setError(result.error || 'Failed to get session');\n        return null;\n      }\n    } catch (err) {\n      setError((err as Error).message);\n      return null;\n    }\n  }, []);\n\n  const getUserSessions = useCallback(async (userId: string) => {\n    try {\n      const result = await window.electronAPI.getUserSessions(userId);\n      \n      if (result.success) {\n        return result.sessions;\n      } else {\n        setError(result.error || 'Failed to get user sessions');\n        return null;\n      }\n    } catch (err) {\n      setError((err as Error).message);\n      return null;\n    }\n  }, []);\n\n  const getMetrics = useCallback(async () => {\n    try {\n      const result = await window.electronAPI.getSessionMetrics();\n      \n      if (result.success) {\n        return result.metrics;\n      } else {\n        setError(result.error || 'Failed to get metrics');\n        return null;\n      }\n    } catch (err) {\n      setError((err as Error).message);\n      return null;\n    }\n  }, []);\n\n  const selectDocuments = useCallback(async () => {\n    try {\n      const result = await window.electronAPI.selectDocuments();\n      \n      if (result.success && result.filePaths.length > 0) {\n        return result.filePaths;\n      } else {\n        return null;\n      }\n    } catch (err) {\n      setError((err as Error).message);\n      return null;\n    }\n  }, []);\n\n  const getFileInfo = useCallback(async (filePath: string) => {\n    try {\n      const result = await window.electronAPI.getFileInfo(filePath);\n      \n      if (result.success) {\n        return result.fileInfo;\n      } else {\n        setError(result.error || 'Failed to get file info');\n        return null;\n      }\n    } catch (err) {\n      setError((err as Error).message);\n      return null;\n    }\n  }, []);\n\n  return {\n    // State\n    isExecuting,\n    currentSession,\n    progress,\n    error,\n    \n    // Actions\n    executeSession,\n    importDocuments,\n    importFromGoogleDocs,\n    analyzeDocument,\n    analyzeDocumentSet,\n    getSession,\n    getUserSessions,\n    getMetrics,\n    selectDocuments,\n    getFileInfo,\n    \n    // Utilities\n    clearError: () => setError(null),\n    clearProgress: () => setProgress([])\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/renderer/types/window.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[107,110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[107,110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[157,160],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[157,160],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[210,213],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[210,213],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[258,261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[258,261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[305,308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[305,308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[354,357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[354,357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3266,3269],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3266,3269],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3282,3285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3282,3285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3344,3347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3344,3347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3402,3405],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3402,3405],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3450,3453],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3450,3453],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3466,3469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3466,3469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3510,3513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3510,3513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3528,3531],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3528,3531],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3583,3586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3583,3586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3640,3643],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3640,3643],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3685,3688],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3685,3688],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3728,3731],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3728,3731],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3783,3786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3783,3786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3832,3835],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3832,3835],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3910,3913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3910,3913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4460,4463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4460,4463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4526,4529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4526,4529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4722,4725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4722,4725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4901,4904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4901,4904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5016,5019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5016,5019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5198,5201],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5198,5201],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5216,5219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5216,5219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":201,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7481,7484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7481,7484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":201,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7497,7500],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7497,7500],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":202,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":202,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7559,7562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7559,7562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":203,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7617,7620],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7617,7620],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":204,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7665,7668],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7665,7668],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":204,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7681,7684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7681,7684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":205,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7725,7728],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7725,7728],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":205,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7743,7746],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7743,7746],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":206,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7798,7801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7798,7801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":207,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7855,7858],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7855,7858],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":208,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7900,7903],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7900,7903],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":209,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7943,7946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7943,7946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":210,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7998,8001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7998,8001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":211,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8047,8050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8047,8050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":212,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8125,8128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8125,8128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":223,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8474,8477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8474,8477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":224,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8525,8528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8525,8528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":226,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8679,8682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8679,8682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":226,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8695,8698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8695,8698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":227,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8765,8768],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8765,8768],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":227,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8781,8784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8781,8784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":229,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8838,8841],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8838,8841],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":229,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8854,8857],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8854,8857],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":230,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8899,8902],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8899,8902],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":231,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8944,8947],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8944,8947],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":232,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9002,9005],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9002,9005],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":234,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9110,9113],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9110,9113],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":236,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9187,9190],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9187,9190],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":237,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9270,9273],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9270,9273],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":238,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9329,9332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9329,9332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":259,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9903,9906],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9903,9906],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":290,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":290,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11055,11058],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11055,11058],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":294,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":294,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11309,11312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11309,11312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":296,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11472,11475],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11472,11475],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":303,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11862,11865],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11862,11865],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":304,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":304,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11935,11938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11935,11938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":311,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":311,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12181,12184],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12181,12184],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":312,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":312,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12257,12260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12257,12260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":316,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12430,12433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12430,12433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":323,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":323,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12658,12661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12658,12661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":324,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":324,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12707,12710],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12707,12710],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":329,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13001,13004],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13001,13004],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":332,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":332,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13222,13225],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13222,13225],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":334,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":334,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13385,13388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13385,13388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":339,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":339,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13724,13727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13724,13727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":340,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":340,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13797,13800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13797,13800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":346,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":346,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13956,13959],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13956,13959],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":349,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":349,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14019,14022],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14019,14022],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":351,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":351,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14153,14156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14153,14156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":351,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":351,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14169,14172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14169,14172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":352,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":352,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14218,14221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14218,14221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":354,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":354,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14355,14358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14355,14358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":355,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":355,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14381,14384],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14381,14384],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":359,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":359,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14585,14588],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14585,14588],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":361,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":361,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14756,14759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14756,14759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":361,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":361,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14772,14775],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14772,14775],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":362,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":362,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14810,14813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14810,14813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":362,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":362,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14826,14829],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14826,14829],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":363,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":363,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14887,14890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14887,14890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":364,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":364,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14973,14976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14973,14976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":365,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":365,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15012,15015],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15012,15015],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":366,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":366,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15071,15074],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15071,15074],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":367,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":367,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15117,15120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15117,15120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":368,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":368,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15156,15159],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15156,15159],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":369,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15193,15196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15193,15196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":369,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15209,15212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15209,15212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":375,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":375,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15493,15496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15493,15496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":376,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":376,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15567,15570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15567,15570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":96,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"declare global {\n  interface Window {\n    api: {\n      context: {\n        getProjectContext: () => Promise<any>;\n        getAvailablePatterns: () => Promise<any[]>;\n        analyzeProjectContext: () => Promise<any>;\n      };\n      getPatterns: () => Promise<any[]>;\n      getProjectContext: () => Promise<any>;\n      analyzeProjectContext: () => Promise<any>;\n    };\n    sessionhub: {\n      getSystemHealth: () => Promise<{\n        status: string;\n        uptime: number;\n        timestamp: string;\n        checks: Array<{ name: string; status: string; message: string }>;\n      }>;\n      getSelfDevelopmentStatus: () => Promise<{\n        operational: boolean;\n        message: string;\n      }>;\n      getProductionMetrics: () => Promise<{\n        uptime: number;\n        memory: NodeJS.MemoryUsage;\n        timestamp: string;\n      }>;\n      triggerTestIssue: () => Promise<{ success: boolean; message: string }>;\n      createNewSession: () => void;\n      checkApiKey: () => Promise<boolean>;\n      validateApiKey: (apiKey: string) => Promise<boolean>;\n      saveApiKey: (apiKey: string) => Promise<void>;\n      sendChatMessage: (sessionId: string, message: string) => Promise<string>;\n      selectGitHubRepo: () => Promise<{\n        url: string;\n        name: string;\n        owner: string;\n        defaultBranch: string;\n      } | null>;\n      analyzeRepository: (sessionId: string,\n        repoInfo: {\n          url: string;\n          name: string;\n          owner: string;\n          defaultBranch: string;\n        },\n      ) => Promise<string>;\n      configureSupabase: (config: {\n        url: string;\n        anonKey: string;\n        serviceKey?: string;\n      }) => Promise<{ success: boolean; error?: string }>;\n      checkSupabaseConnection: () => Promise<{\n        isConnected: boolean;\n        isInitialized: boolean;\n        error?: string;\n      }>;\n      getSupabaseConfig: () => Promise<{\n        hasConfig: boolean;\n        url?: string;\n        hasServiceKey?: boolean;\n        error?: string;\n      }>;\n      initSupabase: () => Promise<{ success: boolean; error?: string }>;\n      createProject: (project: {\n        name: string;\n        path: string;\n        type: string;\n        metadata?: Record<string, unknown>;\n      }) => Promise<{ success: boolean; project?: unknown; error?: string }>;\n      getProjects: () => Promise<{\n        success: boolean;\n        projects: unknown[];\n        error?: string;\n      }>;\n      createSession: (session: {\n        user_id: string;\n        project_id: string;\n        title?: string;\n        description?: string;\n        metadata?: Record<string, unknown>;\n      }) => Promise<{ success: boolean; session?: unknown; error?: string }>;\n      updateSessionStatus: (sessionId: string,\n        status: string,\n      ) => Promise<{ success: boolean; session?: unknown; error?: string }>;\n      getActiveSessions: () => Promise<{\n        success: boolean;\n        sessions: unknown[];\n        error?: string;\n      }>;\n      getSessionStats: (sessionId?: string,\n      ) => Promise<{ success: boolean; stats: unknown[]; error?: string }>;\n      onNewSession: (callback: () => void) => void;\n      removeAllListeners: (channel: string) => void;\n      // Session Pipeline API\n      executeSession: (request: any) => Promise<any>;\n      importDocuments: (filePaths: string[]) => Promise<any>;\n      importGoogleDocs: (docUrl: string) => Promise<any>;\n      analyzeDocument: (documentMetadata: any) => Promise<any>;\n      analyzeDocumentSet: (documents: any[]) => Promise<any>;\n      getSession: (sessionId: string) => Promise<any>;\n      getUserSessions: (userId: string) => Promise<any>;\n      getSessionMetrics: () => Promise<any>;\n      selectDocuments: () => Promise<any>;\n      getFileInfo: (filePath: string) => Promise<any>;\n      onSessionProgress: (callback: (data: any) => void) => void;\n      removeSessionProgressListener: (callback: (data: any) => void) => void;\n    };\n    electron: {\n      onSessionProgress: (callback: (event: { type: string; data: unknown }) => void,\n      ) => Promise<() => void>;\n      getSessionStatus: (sessionId: string,\n      ) => Promise<{ state: string } | null>;\n      figma: {\n        checkConnection: () => Promise<boolean>;\n        getApiKey: () => Promise<string>;\n        initialize: (apiKey: string) => Promise<boolean>;\n        startSessionHubUIUpdate: (figmaFileKey: string) => Promise<string>;\n        getUpdateStatus: (sessionId: string) => Promise<any>;\n        previewUIChanges: (figmaFileKey: string) => Promise<any>;\n        createUIPullRequest: (figmaFileKey: string, description: string) => Promise<string>;\n        applyUIChanges: (sessionId: string) => Promise<void>;\n        registerProject: (project: any) => Promise<boolean>;\n        startProjectUIUpdate: (projectId: string, figmaFileKey: string) => Promise<string>;\n        getEnhancementStatus: (sessionId: string) => Promise<any>;\n        mergeUIChanges: (sessionId: string) => Promise<void>;\n        getFigmaEnabledProjects: () => Promise<any[]>;\n        watchFile: (figmaFileKey: string) => Promise<boolean>;\n        getComponentsNeedingUpdate: () => Promise<string[]>;\n      };\n      invoke: (channel: string, ...args: any[]) => Promise<any>;\n    };\n    electronAPI: {\n      claude: {\n        getAutoAcceptSettings: () => Promise<{\n          enabled: boolean;\n          sessionId?: string;\n          acceptFileEdits: boolean;\n          acceptGitOperations: boolean;\n          acceptFoundationUpdates: boolean;\n          acceptAllPrompts: boolean;\n        }>;\n        setAutoAcceptSettings: (settings: {\n          enabled: boolean;\n          sessionId?: string;\n          acceptFileEdits: boolean;\n          acceptGitOperations: boolean;\n          acceptFoundationUpdates: boolean;\n          acceptAllPrompts: boolean;\n        }) => Promise<{ success: boolean }>;\n        enableForSession: (sessionId: string) => Promise<{ success: boolean }>;\n      };\n      checkApiKey: () => Promise<boolean>;\n      validateApiKey: (apiKey: string) => Promise<boolean>;\n      saveApiKey: (apiKey: string) => Promise<void>;\n      sendChatMessage: (sessionId: string, message: string) => Promise<string>;\n      selectGitHubRepo: () => Promise<{\n        url: string;\n        name: string;\n        owner: string;\n        defaultBranch: string;\n      } | null>;\n      analyzeRepository: (sessionId: string,\n        repoInfo: {\n          url: string;\n          name: string;\n          owner: string;\n          defaultBranch: string;\n        },\n      ) => Promise<string>;\n      configureSupabase: (config: {\n        url: string;\n        anonKey: string;\n        serviceKey?: string;\n      }) => Promise<{ success: boolean; error?: string }>;\n      checkSupabaseConnection: () => Promise<{\n        isConnected: boolean;\n        isInitialized: boolean;\n        error?: string;\n      }>;\n      getSupabaseConfig: () => Promise<{\n        hasConfig: boolean;\n        url?: string;\n        hasServiceKey?: boolean;\n        error?: string;\n      }>;\n      initSupabase: () => Promise<{ success: boolean; error?: string }>;\n      createProject: (project: {\n        name: string;\n        path: string;\n        type: string;\n        metadata?: Record<string, unknown>;\n      }) => Promise<{ success: boolean; project?: unknown; error?: string }>;\n      getProjects: () => Promise<{\n        success: boolean;\n        projects: unknown[];\n        error?: string;\n      }>;\n      // Session Pipeline API\n      executeSession: (request: any) => Promise<any>;\n      importDocuments: (filePaths: string[]) => Promise<any>;\n      importGoogleDocs: (docUrl: string) => Promise<any>;\n      analyzeDocument: (documentMetadata: any) => Promise<any>;\n      analyzeDocumentSet: (documents: any[]) => Promise<any>;\n      getSession: (sessionId: string) => Promise<any>;\n      getUserSessions: (userId: string) => Promise<any>;\n      getSessionMetrics: () => Promise<any>;\n      selectDocuments: () => Promise<any>;\n      getFileInfo: (filePath: string) => Promise<any>;\n      onSessionProgress: (callback: (data: any) => void) => void;\n      removeSessionProgressListener: (callback: (data: any) => void) => void;\n      // MCP Server API\n      mcp: {\n        startServer: () => Promise<void>;\n        stopServer: () => Promise<void>;\n        getServerStatus: () => Promise<{\n          running: boolean;\n          port?: number;\n          integrations?: number;\n          uptime?: number;\n        }>;\n        listIntegrations: () => Promise<any[]>;\n        registerIntegration: (integration: any) => Promise<string>;\n        unregisterIntegration: (id: string) => Promise<void>;\n        executeTool: (integrationId: string, tool: string, params: any) => Promise<any>;\n        testTool: (integrationId: string, tool: string, params: any) => Promise<any>;\n        marketplace: {\n          search: (options: any) => Promise<any[]>;\n          getFeatured: () => Promise<any[]>;\n          getTrending: () => Promise<any[]>;\n          getIntegration: (id: string) => Promise<any>;\n          install: (integrationId: string) => Promise<string>;\n          getCategories: () => Promise<any[]>;\n        };\n        onIntegrationRegistered: (callback: (integration: any) => void) => void;\n        onIntegrationUnregistered: (callback: (integration: any) => void) => void;\n        onError: (callback: (error: any) => void) => void;\n      };\n      // Actor Status API\n      getRealAPIStatus: () => Promise<{\n        operational: boolean;\n        message: string;\n        lastCheck: string;\n      }>;\n      getViolations: () => Promise<Array<{\n        id: string;\n        type: string;\n        severity: 'critical' | 'high' | 'medium' | 'low';\n        message: string;\n        timestamp: string;\n        actor: string;\n      }>>;\n      getActivities: () => Promise<Array<{\n        id: string;\n        actor: string;\n        action: string;\n        timestamp: string;\n        details?: any;\n      }>>;\n      openAPIConfiguration: () => Promise<void>;\n      clearViolations: () => Promise<{ success: boolean }>;\n      // Zed IDE Integration\n      zed: {\n        // Connection Management\n        storeCredentials: (credentials: { email: string; apiToken: string }) => Promise<void>;\n        testConnection: () => Promise<{\n          success: boolean;\n          diagnostics: {\n            zedInstalled: boolean;\n            zedRunning: boolean;\n            mcpConfigured: boolean;\n            credentialsValid: boolean;\n          };\n          errors: string[];\n        }>;\n        getConnectionHealth: () => Promise<{\n          isConnected: boolean;\n          isZedRunning: boolean;\n          isMCPAvailable: boolean;\n          lastHealthCheck: Date;\n          connectionUptime: number;\n          errors: string[];\n        }>;\n        reconnect: () => Promise<{ success: boolean }>;\n        // IDE Operations\n        connect: () => Promise<{ success: boolean }>;\n        disconnect: () => Promise<{ success: boolean }>;\n        openWorkspace: (workspacePath: string) => Promise<{ success: boolean }>;\n        getWorkspaceInfo: () => Promise<any>;\n        openFile: (filePath: string) => Promise<{ success: boolean }>;\n        saveFile: (filePath: string, content: string) => Promise<{ success: boolean }>;\n        // Two-Actor Integration\n        sendToExecution: (instruction: string, context: any) => Promise<{ success: boolean }>;\n        getExecutionStatus: () => Promise<{ active: boolean; currentTask?: string }>;\n        getActorStatus: () => Promise<any>;\n        syncActors: () => Promise<{ success: boolean }>;\n        // Git Operations\n        getGitStatus: () => Promise<{ branch: string; changes: string[] }>;\n        stageFiles: (files: string[]) => Promise<{ success: boolean }>;\n        commit: (message: string) => Promise<{ success: boolean }>;\n        // Quality Gates\n        runLinter: () => Promise<{ passed: boolean; errors: any[] }>;\n        runTypeCheck: () => Promise<{ passed: boolean; errors: any[] }>;\n        openExternal: (url: string) => Promise<{ success: boolean }>;\n      };\n      shell: {\n        openExternal: (url: string) => Promise<{ success: boolean }>;\n      };\n      api: {\n        on: (channel: string, callback: (...args: any[]) => void) => void;\n        off: (channel: string, callback: (...args: any[]) => void) => void;\n        showNotification: (options: { title: string; body: string; type?: string }) => void;\n      };\n      projects: {\n        list: () => Promise<any[]>;\n      };\n    };\n    // Add the api property for Zed components\n    api: {\n      zed: {\n        storeCredentials: (credentials: { email: string; apiToken: string }) => Promise<void>;\n        testConnection: () => Promise<any>;\n        getConnectionHealth: () => Promise<any>;\n        reconnect: () => Promise<{ success: boolean }>;\n        connect: () => Promise<{ success: boolean }>;\n        disconnect: () => Promise<{ success: boolean }>;\n        openWorkspace: (workspacePath: string) => Promise<{ success: boolean }>;\n        getWorkspaceInfo: () => Promise<any>;\n        openFile: (filePath: string) => Promise<{ success: boolean }>;\n        saveFile: (filePath: string, content: string) => Promise<{ success: boolean }>;\n        sendToExecution: (instruction: string, context: any) => Promise<{ success: boolean }>;\n        getExecutionStatus: () => Promise<{ active: boolean; currentTask?: string }>;\n        getActorStatus: () => Promise<any>;\n        syncActors: () => Promise<{ success: boolean }>;\n        getGitStatus: () => Promise<{ branch: string; changes: string[] }>;\n        stageFiles: (files: string[]) => Promise<{ success: boolean }>;\n        commit: (message: string) => Promise<{ success: boolean }>;\n        runLinter: () => Promise<{ passed: boolean; errors: any[] }>;\n        runTypeCheck: () => Promise<{ passed: boolean; errors: any[] }>;\n      };\n      shell: {\n        openExternal: (url: string) => Promise<{ success: boolean }>;\n      };\n      projects: {\n        list: () => Promise<any[]>;\n      };\n      ai: {\n        initialize: () => Promise<any>;\n        learnFromCode: (filePath: string, content: string) => Promise<{ success: boolean }>;\n        getAutocomplete: (context: any) => Promise<any[]>;\n        recordAutocomplete: (suggestion: any, accepted: boolean) => Promise<{ success: boolean }>;\n        analyzeProject: (projectPath: string) => Promise<{\n          template: any;\n          knowledge: any;\n          recommendations: string[];\n        }>;\n        startSession: (sessionId: string, objectives: string[]) => Promise<{ success: boolean }>;\n        updateSession: (sessionId: string, updates: any) => Promise<{ success: boolean }>;\n        completeSession: (sessionId: string, success: boolean) => Promise<{ success: boolean }>;\n        searchPatterns: (criteria: any) => Promise<any[]>;\n        addPattern: (pattern: any) => Promise<any>;\n        getInsights: (projectPath?: string) => Promise<any[]>;\n        transferLearning: (fromProject: string, toProject: string) => Promise<any>;\n        getStatus: () => Promise<any>;\n        getMetricsSummary: (days: number) => Promise<any>;\n        generateInsights: () => Promise<any>;\n        getConfig: () => Promise<any>;\n        updateConfig: (config: any) => Promise<any>;\n        exportData: () => Promise<string>;\n        importData: (data: string) => Promise<{ success: boolean }>;\n        clearData: () => Promise<{ success: boolean }>;\n      };\n      selectDirectory: () => Promise<string | null>;\n      on: (channel: string, callback: (...args: any[]) => void) => void;\n      off: (channel: string, callback: (...args: any[]) => void) => void;\n      showNotification: (options: { title: string; body: string; type?: string }) => void;\n    };\n  }\n}\nexport {};\n","usedDeprecatedRules":[]},{"filePath":"/Users/jonathanhoggard/Development/sessionhub-v2/types/electron.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
